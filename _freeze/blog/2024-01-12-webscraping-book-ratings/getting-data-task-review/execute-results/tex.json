{
  "hash": "e8cb95df36ce833680b300e96612fea7",
  "result": {
    "markdown": "---\ntitle: \"Live Session 2: Getting Data\"\nauthor: \"Zak Varty\"\nformat: pdf\nself-contained: true\n---\n\n\n# Week in Review \n\n__Tabular data__\n\n  - Reading with base R and {readr}\n  - Tibbles\n  - Tidy data, wide data and tall data\n\n__Web Scraping__\n\n  - Intro to HTML and CSS\n  - {rvest} for scraping webpages and extracting content\n  - Amazon task (review to come)\n\n__APIs__\n\n  - Ways of sharing and sourcing data\n  - HTTP requests and responses\n  - Use wrappers where you can\n\n# Discussion \n\n## Question 1: RDS files \n\n-----\n\n<br>\n\n1. Roger Peng states that files can be imported and exported using readRDS() and saveRDS() for fast and space efficient data storage. What is the downside to doing so?\n\n\n<br>\n\n-----\n\n<br>\n<br>\n\n-----\n\n<br>\n\n2. What data types have you come across (that we have not discussed already) and in what context are they used?\n\n<br>\n\n\n-----\n\n<br>\n<br>\n\n-----\n\n<br>\n\n3. What do you have to give greater consideration to when scraping data than when using an API?\n\n\n\n<br>\n\n-----\n\n\n# Scraping Book Reviews\n\n## Scrape R4DS Star Rating Percentages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"rvest\")\nlibrary(\"httr\")\nlibrary(\"magrittr\")\n```\n:::\n\n\nVisiting the R for Data Science webpage and scrolling down we find the review summaries giving the percentage of reviewers in each category.\n\n![](images-2024/amazon-screenshot-1.png)\n\nUsing the httr selector gadget we can identify that the elements we want to scrape are given by\n\n<!--`.a-nowrap .a-link-normal`--> <!--Amazon HTML changed 2023-2024-->\n`.a-text-right .a-link-normal`\n\n![](images-2024/amazon-screenshot-2.png)\n\nWe first scrape the entire page. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nr4ds_url <- \"https://www.amazon.com/dp/1491910399/\"\nr4ds_html <- rvest::read_html(r4ds_url)\n```\n:::\n\n\nThen we can use Rvest functions to extract the elements that we care about and convert these to strings.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_strings <- r4ds_html %>% \n  #rvest::html_elements(\".a-nowrap .a-link-normal\") %>% \n  rvest::html_elements(\".a-text-right .a-link-normal\") %>%\n  rvest::html_text2()\n\ndata_strings\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"82%\" \"12%\" \"4%\"  \"1%\"  \"1%\" \n```\n:::\n:::\n\n\nFinally, we want to drop the percentage sign from each element of the vector and convert this to a vector of integers, rather than strings.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_values_as_character <- stringr::str_sub(data_strings, start = 1, end = -2)\ndata_values <- as.integer(data_values_as_character)\ndata_values\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 82 12  4  1  1\n```\n:::\n:::\n\n\n## Scrape R4DS Number of Ratings \n\nSimilarly, we can scrape the number of reviews using the selectors \n\n`.averageStarRatingNumerical .a-color-secondary` \n\n![](images-2024/amazon-screenshot-3.png)\n\nWe extract the text element in the same way as before. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nr4ds_review_count <- r4ds_html %>% \n  rvest::html_elements(\".averageStarRatingNumerical\") %>% \n  rvest::html_text2()\n\nr4ds_review_count\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1,585 global ratings\"\n```\n:::\n:::\n\n<!-- Notice that there are some development notes in with this text. These did not show up on the webpage because they were commented out.--> To convert this to an integer we can work with, we first drop the 15 characters \" global ratings\" from the end. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nr4ds_review_count <- r4ds_html %>% \n  rvest::html_elements(\".averageStarRatingNumerical .a-color-secondary\") %>% \n  rvest::html_text2() %>% \n  stringr::str_sub(start = 1, end = -16)\n\nr4ds_review_count\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1,585\"\n```\n:::\n:::\n\n\nThe last things we need to do is get rid of the comma and convert this to an integer.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr4ds_review_count <- r4ds_html %>% \n  rvest::html_elements(\".averageStarRatingNumerical .a-color-secondary\") %>% \n  rvest::html_text2() %>% \n  stringr::str_sub(start = 1, end = -16) %>% \n  stringr::str_split_1(\",\") %>% \n  stringr::str_flatten() %>% \n  as.integer()\n\nr4ds_review_count\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1585\n```\n:::\n:::\n\n## Summary table R4DS reviews \n\n\n::: {.cell}\n\n```{.r .cell-code}\nr4ds_data <- tibble::tibble(\n  product = \"R4DS\",\n  n_reviews = r4ds_review_count, \n  percent_5_star = data_values[1],\n  percent_4_star = data_values[2],\n  percent_3_star = data_values[3],\n  percent_2_star = data_values[4],\n  percent_1_star = data_values[5],\n  url = r4ds_url)\n\nr4ds_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 8\n  product n_reviews percent_5_star percent_4_star percent_3_star percent_2_star\n  <chr>       <int>          <int>          <int>          <int>          <int>\n1 R4DS         1585             82             12              4              1\n# i 2 more variables: percent_1_star <int>, url <chr>\n```\n:::\n:::\n\n\n## Making this a function\n\nLet's abstract out the URL and product name to turn this into a function. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_amazon_reviews <- function(product_name, url){\n  \n  # Scrape Amazon page of product\n  product_html <- rvest::read_html(url)\n  \n  # Extract percentage receiving each number of stars\n  review_percentages <- product_html %>% \n  rvest::html_elements(\".a-text-right .a-link-normal\") %>%  # extract information \n  rvest::html_text2() %>%                               # convert to text\n  stringr::str_sub(start = 1, end = -2) %>%             # remove \"%\" from string\n  as.integer()                                          # convert to integer\n  \n  # Extract total number of reviews \n  review_count <- product_html %>% \n  rvest::html_elements(\".averageStarRatingNumerical .a-color-secondary\") %>% \n  rvest::html_text2() %>% \n  stringr::str_sub(start = 1, end = -16) %>% \n  stringr::str_split_1(\",\") %>% \n  stringr::str_flatten() %>% \n  as.integer()\n  \n  # Construct Tibble \n  product_data <- tibble::tibble(\n  product = product_name,\n  n_reviews = review_count, \n  percent_5_star = review_percentages[1],\n  percent_4_star = review_percentages[2],\n  percent_3_star = review_percentages[3],\n  percent_2_star = review_percentages[4],\n  percent_1_star = review_percentages[5],\n  url = url)\n\nproduct_data\n}\n```\n:::\n\n\nWe can test that this works for R4DS. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_amazon_reviews(\"R4DS\", url = r4ds_url)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 8\n  product n_reviews percent_5_star percent_4_star percent_3_star percent_2_star\n  <chr>       <int>          <int>          <int>          <int>          <int>\n1 R4DS         1585             82             12              4              1\n# i 2 more variables: percent_1_star <int>, url <chr>\n```\n:::\n:::\n\n\nThis function is doing a lot, let's move some of the stages out to helper functions. This will make life easier for us if the structure of the webpages change over time and also if we need to debug the function. \n\nWe will have one function to extract the review percentages from the scraped html. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nextract_review_percentages <- function(scraped_html, css_selector = \".a-text-right .a-link-normal\"){\n  scraped_html %>% \n  rvest::html_elements(css_selector) %>%                # extract information\n  rvest::html_text2() %>%                               # convert to text\n  stringr::str_sub(start = 1, end = -2) %>%             # remove \"%\" from string\n  as.integer()     \n}\n```\n:::\n\n\n\nA second function to extract the review count from the scraped html. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nextract_review_count <- function(scraped_html, css_selector = \".averageStarRatingNumerical .a-color-secondary\"){\n  scraped_html %>% \n  rvest::html_elements(\".averageStarRatingNumerical .a-color-secondary\") %>% \n  rvest::html_text2() %>% \n  stringr::str_sub(start = 1, end = -16) %>% \n  stringr::str_split_1(\",\") %>% \n  stringr::str_flatten() %>% \n  as.integer()\n}\n```\n:::\n\n\nAnd a third function to assemble this information into a tibble. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nconstruct_product_review_tibble <- function(product_name, url, review_count, review_percentages){\n  tibble::tibble(\n  product = product_name,\n  n_reviews = review_count, \n  percent_5_star = review_percentages[1],\n  percent_4_star = review_percentages[2],\n  percent_3_star = review_percentages[3],\n  percent_2_star = review_percentages[4],\n  percent_1_star = review_percentages[5],\n  url = url)\n}\n```\n:::\n\n\n\nEach of these can then be called from within an updated version of `get_amazon_reviews()`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_amazon_reviews <- function(product_name, url){\n  \n  # Scrape Amazon page of product\n  product_html <- rvest::read_html(url)\n  \n  # Extract percentage receiving each number of stars\n  review_percentages <- extract_review_percentages(product_html)                                    \n  \n  # Extract total number of reviews \n  review_count <- extract_review_count(product_html)\n  \n  # Construct Tibble \n  construct_product_review_tibble(product_name, url, review_count, review_percentages)\n}\n```\n:::\n\n\nAgain, we should test that this still works. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_amazon_reviews(\"R4DS\", url = r4ds_url)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 8\n  product n_reviews percent_5_star percent_4_star percent_3_star percent_2_star\n  <chr>       <int>          <int>          <int>          <int>          <int>\n1 R4DS         1585             82             12              4              1\n# i 2 more variables: percent_1_star <int>, url <chr>\n```\n:::\n:::\n\n\nWe can also try it with the ggplot2 book \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot2_url <- \"https://www.amazon.com/dp/331924275X\"\nget_amazon_reviews(\"ggplot2\", url = ggplot2_url)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 8\n  product n_reviews percent_5_star percent_4_star percent_3_star percent_2_star\n  <chr>       <int>          <int>          <int>          <int>          <int>\n1 ggplot2       160             71             12             10              4\n# i 2 more variables: percent_1_star <int>, url <chr>\n```\n:::\n:::\n\n\n![](images-2024/amazon-screenshot-4-ggplot2-reviews.png)   \n\nHooray! It works! How about the R packages? \n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_packages_url <- \"https://www.amazon.com/dp/1491910593/\"\nget_amazon_reviews(\"R packages\", url = r_packages_url)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 8\n  product  n_reviews percent_5_star percent_4_star percent_3_star percent_2_star\n  <chr>        <int>          <int>          <int>          <int>          <int>\n1 R packa~       107             81             15              4             NA\n# i 2 more variables: percent_1_star <int>, url <chr>\n```\n:::\n:::\n\n\nOnce again, this has worked out. \n\n![](images-2024/amazon-screenshot-5-r-packages-reviews.png)\n\n\nBut those `NA` values worry me. Let's take a look at where they are coming from. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_packages_html <- rvest::read_html(r_packages_url)\nextract_review_percentages(r_packages_html)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 81 15  4\n```\n:::\n:::\n\n\nWe only have three values being extracted. This is likely because only the non-zero values were click-able on the webpage. It seems we got lucky and those happened to be the first three, but what would have happened if that were not the case? \n\nTo find out, we need to identify a product which satisfies:\n\n- (at least) one star category $x \\in \\{2,3,4,5\\}$ that has zero percent \n- a second star category $y \\in \\{1,2,3,4\\}$ such that $y<x$ and y has non-zero percentage of reviews. \n\nTo get an empty star category, we can maximise our chances by looking at product with a low total number of reviews. Staying on topic, I decided to look at mathematics textbooks. \n\nIt took a bit of digging (lots of books received only 5-star and 4-star reviews) to find [Vector Calculus](https://www.amazon.co.uk/dp/3540761802) which, _at the time of writing_ has no 2-star reviews. \n\n![](images-2024/amazon-screenshot-6-vector-calc.png)\n![](images-2024/amazon-screenshot-7-vector-calc-reviews.png)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvector_calc_url <- \"https://www.amazon.co.uk/dp/3540761802\"\nget_amazon_reviews(product_name = \"vector calculus\", url = vector_calc_url)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 8\n  product  n_reviews percent_5_star percent_4_star percent_3_star percent_2_star\n  <chr>        <int>          <int>          <int>          <int>          <int>\n1 vector ~        55             66             26              7              2\n# i 2 more variables: percent_1_star <int>, url <chr>\n```\n:::\n:::\n\n\nAs we suspected - the one star reviews are misplaced. \n\nI spent a long time trying to get workarounds, but missing values are tricky to deal with. I got some code working, but it was very clunky and involved using `try()` within a `for` loop. \n\nA much simpler solution is to return to the Selector gadget and update our CSS selectors within the extraction function. \n\n![](images-2024/amazon-screenshot-8-vector-calc-selection-gadget.png)\n\nThis more careful selection gives the following CSS selector: \n\n`#histogramTable .a-text-right .a-size-base`\n\nWe can use this to update the default value in `extract_review_percentages()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nextract_review_percentages <- function(scraped_html, css_selector = \"#histogramTable .a-text-right .a-size-base\"){\n  scraped_html %>% \n  rvest::html_elements(css_selector) %>%                # extract information\n  rvest::html_text2() %>%                               # convert to text\n  stringr::str_sub(start = 1, end = -2) %>%             # remove \"%\" from string\n  as.integer()     \n}\n```\n:::\n\n\n\nThis works for our vector calculus example.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_amazon_reviews(product_name = \"vector calculus\", url = vector_calc_url)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 8\n  product  n_reviews percent_5_star percent_4_star percent_3_star percent_2_star\n  <chr>        <int>          <int>          <int>          <int>          <int>\n1 vector ~        55             66             26              7              0\n# i 2 more variables: percent_1_star <int>, url <chr>\n```\n:::\n:::\n\n\n-----\n\nIt corrects also corrects our output for the R packages example to be `0` rather than `NA`, \n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_amazon_reviews(product_name = \"R packages\", url = r_packages_url)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 8\n  product  n_reviews percent_5_star percent_4_star percent_3_star percent_2_star\n  <chr>        <int>          <int>          <int>          <int>          <int>\n1 R packa~       107             81             15              4              0\n# i 2 more variables: percent_1_star <int>, url <chr>\n```\n:::\n:::\n\n\n\n-----\n\nand it has not broken any of our complete examples \n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_amazon_reviews(product_name = \"R4DS\", url = r4ds_url)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 8\n  product n_reviews percent_5_star percent_4_star percent_3_star percent_2_star\n  <chr>       <int>          <int>          <int>          <int>          <int>\n1 R4DS         1585             82             12              4              1\n# i 2 more variables: percent_1_star <int>, url <chr>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nget_amazon_reviews(product_name = \"ggplot2\", url = ggplot2_url)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 8\n  product n_reviews percent_5_star percent_4_star percent_3_star percent_2_star\n  <chr>       <int>          <int>          <int>          <int>          <int>\n1 ggplot2       160             71             12             10              4\n# i 2 more variables: percent_1_star <int>, url <chr>\n```\n:::\n:::\n\n\n----\n\n\n## Discussion \n\n- What did you do differently to me?\n\n- What was easy, what was difficult? \n\n- How could we formalise and automate this testing workflow? What might be make this difficult?\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}