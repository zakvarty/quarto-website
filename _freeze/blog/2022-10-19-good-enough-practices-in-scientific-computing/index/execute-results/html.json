{
  "hash": "002fd65213f34e9137fa21617e88c2b2",
  "result": {
    "markdown": "---\ntitle: \"Good Enough Practices in Scientific Computing\"\ndescription: |\n    Reading Summary of Wilson et al. (2017).\ndate: \"2022-10-19\"\ncategories:\n  - academic skills\n  - computing\n  - reproducible research\n  - reading summary\ncode-fold: false\nimage: gepisc-image.png\nimage-alt: \"Header section of a PLOS Comptational Biology perspective paper titled 'Good Enough Practices in Scientific Computing'.\"\ndraft: false\nfreeze: true\nappendix-style: plain #(default, plain, none)\nbibliography: ../library.bib\ncitation: false\n---\n\n\n<!--Photo by <a href=\"https://unsplash.com/@qwitka?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Maksym Kaharlytskyi</a> on <a href=\"https://unsplash.com/s/photos/filing-cabinet?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a> --> \n\n## Reading Summary\n\n`wilson2017good`\n\n**Title:** _Good Enough Practices in Scientific Computing. {PLOS Computational Biology, 2017} (20 pages)._\n\n**Authors:** _Greg Wilson, Jennifer Bryan, Karen Cranston, Justin Kitzes, Lex Nederbragt and Tracy K. Teal._\n\n**Key words:** _computing_, _research skills_, _reproducibilty_, _guides_. \n\nIn this paper by @wilson2017good, a collection of experienced researchers and instructors give simple ways to implement good computing practices during a research project. They do this by providing a list of concrete recommendations that every researcher can adopt, regardless of their current computational skills. This is important to help the transition toward open, documented and reproducible research. The article is aimed specifically at people who are new to computational research but also contains useful guidance for more experienced researchers.\n\n## Notes \n\n\nThis article describes some of the best-practices in software development and how those ideas can be implemented in a reasearch project. This focus here is on implementing these approaches without requiring reseachers to learn how to use lots of peripheral technologies (for example git and LaTeX / markdown). \n\nAn earlier paper \"Best Practices for Scientifc Computing\" [@wilson2014best], is aimed at those who have or would like to develop such peripheral skills.\n\n## Suggested Best Practices \n\nBest practices are grouped into 6 main themes. \n\n### 1. Data Management\n\n#### Create the data you wish to see in the world\n\nRaw data should be created in a format that is ammenable to analysis and where multiple tables are used, a unique identifer used to link each record across these tables.\n\n#### Keep it backed up, keep it intact\n \nThis raw data should be backed up in more than one location and preserved during the analysis (i.e. __not__ directly edited). When cleaning, handling and modelling the data keep a record of all steps used.\n\n#### Share the data\n\nTo allow your future self (and others) to access and cite your hard won data, submit it to a reputable DOI-issuing repository.\n\n### 2. Software \n\n#### Script files\n\nStart each script with a brief explanatory comment of its purpose and a description of any dependencies. \n\nWithin scripts, ruthlessly eliminate duplication. Do this by creating functions for any repeated operations and provide simple examples of how those functions work. \n\nWhen making functions and variables, give them meaningful names. As rule of thumb: fuctions are verbs, variables are nouns.\n\nIf you need your script to perform different actions, control this behaviour programmatically rather than by commenting/uncommenting sections of code. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Uncomment for weekly reports\noutput_dir <- paste0(\"weekly_reports/\",year,\"/\",week_of_year,\"/\")\n# Uncomment for annual reports\n#output_dir <- paste0(\"annual_reports/\",year,\"/\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nreport_type = \"weekly\"\nyear = 2022\nweek_of_year = 21\n\nif (report_type == \"weekly\") {\n  output_dir <- paste0(\"weekly_reports/\",year,\"/\",week_of_year,\"/\")\n} else if (report_type == \"annual\") {\n  output_dir <- paste0(\"annual_reports/\",year,\"/\")\n} else {\n  stop(\"report_type should be 'weekly' or 'annual'.\")\n}\n```\n:::\n\n\nSubmit the final code for your research project to to a reputable DOI-issuing repository. \n\n#### External Code\n\nBefore writing your own code, check if someone else got there first. Are there well-maintained software libraries that already do what you need? \n\nIf so, test the code (extensively!) before relying on it. Keep a record of what you have tested and add to this as you find awkward edge cases.\n\n\n### 3. Collaboration \n\n#### Collaborating within your team\n\nCreate a single file called `README` giving an overview of your project. This should describe aim of the project and how to get started working with the data/code/writing. A good rule of thumb is to write this as though it were for either a new-starter on your team. Future you will thank you! \n\nCreate a shared to-do list for the project in a file called `TODO` and decide on how you will communicate during the project. For example, what channels will you use for group meetings, quick questions, assigning tasks and setting deadlines?\n\n\n#### Opening up to the wider world\n\nAdd another file called `LICENSE` giving the licensing information for the project. This says who can use it and for what purposes. No license implies you are keeping all rights and nobody is allowed to reuse or modify the materials. For more information on licenses see [choosealicense.com](choosealicense.com) or [The Open Source Guide](https://opensource.guide/legal/#which-open-source-license-is-appropriate-for-my-project). Consult your company's legal folks as needed.\n\nCreate a final file called `CITATION` letting other people know how they should give proper attribution to your work if they use it.\n\n\n\n### 4. Project Organisation \n\nEach project should be self-contained in its own directory (folder) and this directory should be named after the project. \n\nCreate subdirectories called:\n\n-  `docs/` for all text documents associated with the project \n-  `data/raw/` for all raw data and metadata \n-  `data/derived/` for all data files during cleanup and analysis\n-  `src` for all code you write as part of this project \n-  `bin` for all external code or compiled programs that you use in this project \n\nWhen adding files and subdirectories within this structure, name these to clearly reflect their content or function. \n\n\n### 5. Tracking Changes \n\nAs soon as any file is created by a human, back it up in multiple locations. If you make a huge file, then consult your IT folks about how to store and back it up.\n\nAdd a file called `CHANGELOG` to the docs subfolder. Use this to track all changes made within the project by all contributers, describing when the changes happened and why they were made. \n\nKeep these changes as small as possible and share among collaborators frequently to avoid getting out of sync.\n\nMake a Copy the entire project whenever a significant change has been made. \n\nBetter yet, use a dedicated version control system such as git if that is a realistic option.\n\n\n### 6. Manuscripts \n\nPick one and stick to it within each project. The former has a much lower bar to entry and has most of the benefits of the latter (other than manuscripts being stored in the same place as everything else). \n\n1. Write the manuscript using online tools with rich formatting, change tracking and reference management. (e.g. Overleaf, Google Docs)\n\n2. Write the manuscript in plain text format the permits version control (e.g. tex + git or markdown + git)\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}