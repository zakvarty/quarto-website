<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Zak Varty</title>
<link>https://www.zakvarty.com/blog.html</link>
<atom:link href="https://www.zakvarty.com/blog.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.0.38</generator>
<lastBuildDate>Thu, 19 Jan 2023 00:00:00 GMT</lastBuildDate>
<item>
  <title>Packaging your R code</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2023-01-16-minimal-R-package/index.html</link>
  <description><![CDATA[ 



<div class="cell">

</div>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In this tutorial will guide you through the creation your first R package using the <code>{usethis}</code> and <code>{testthat}</code> packages.</p>
<p>We’ll walk through the steps of setting up a new R package, adding functions and documentation, and creating tests to ensure your package is reliable and easy to use. Whether you’re a seasoned R programmer or just getting started, this tutorial will provide you with the tools you need to create your own R package and share your work with others.</p>
</section>
<section id="what-is-a-package" class="level2">
<h2 class="anchored" data-anchor-id="what-is-a-package">What is a package</h2>
<p>An R package is a collection of R functions, data, and documentation that can be easily shared with and installed by others.</p>
<p>Packages let you extending the functionality of the base R system, and are a fundamental unit of reproducible research. They can be created by anyone, and are easily distributable to others through the CRAN or GitHub.</p>
<p>The packages you create can be imported and used across multiple R scripts, making them an ideal way to share and use functions and data across projects. They can also be a good way to organize and structure your code, making it easier to test, document and maintain.</p>
<p>In this session I hope to convince you that if you can write an R function, you can write an R package.</p>
</section>
<section id="principle" class="level2">
<h2 class="anchored" data-anchor-id="principle">20:80 Principle</h2>
<p>Programming and package development are huge topics. In this session we will not even cover 20% of everything there is to know. However, by focusing on the most important and the most common aspects of package development we will rapidly get a minimal package up and running.</p>
<p>These basics will cover ~80% of everything you ever need to do during package development. Resources that were used to develop this tutorial, and which will support that last ~20%, are listed below.</p>
<ul>
<li><p><a href="https://hilaryparker.com/2014/04/29/writing-an-r-package-from-scratch/">Hilary Parker blog post</a></p></li>
<li><p><a href="https://kbroman.org/pkg_primer/">Karl Broman primer</a></p></li>
<li><p><a href="https://www.pipinghotdata.com/posts/2020-10-25-your-first-r-package-in-1-hour/">Shannon Pileggi blog post</a></p></li>
<li><p><a href="https://r-pkgs.org/whole-game.html">R packages</a> by Wickham and Bryan (Ch 2)</p></li>
<li><p><a href="https://cran.r-project.org/doc/manuals/R-exts.html">Writing R extensions</a> CRAN</p></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.zakvarty.com/blog/2023-01-16-minimal-R-package/images/horst-R-over-time.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Artwork by Ailson Horst</figcaption><p></p>
</figure>
</div>
</section>
<section id="tools-to-build-a-minimal-r-package" class="level2">
<h2 class="anchored" data-anchor-id="tools-to-build-a-minimal-r-package">Tools to build a minimal R package</h2>
<p>You will need:</p>
<ul>
<li>R and Rstudio</li>
<li><code>{devtools}</code></li>
<li><code>{usethis}</code></li>
<li><code>{testthat}</code></li>
<li><code>{roxygen2}</code></li>
</ul>
<p>This collection of software and R packages makes it easy to create, develop, document, test, check and share the packages you create.</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>For the “hardcore” folks you can do all of this by hand, but it is an absolute pain. These tools were developed for a reason.</p>
</div>
</div>
</section>
<section id="create-a-template-directory" class="level2">
<h2 class="anchored" data-anchor-id="create-a-template-directory">Create a template directory</h2>
<p>Once per package</p>
<div class="cell" data-filename="Console">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">usethis<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">create_package</span>(<span class="at" style="color: #657422;">path =</span> <span class="st" style="color: #20794D;">"~/path/to_your_package/packageName"</span>)</span></code></pre></div>
</div>
<p>This should be:</p>
<ul>
<li>In your home directory, near where your other projects live;</li>
<li><strong>Not</strong> in an existing project, package or git repo;</li>
<li><strong>Not</strong> your R library where your packages are installed.</li>
</ul>
<p>You can find out where your R packages are installed using <code>.libpaths()</code>. This is where <code>install.packages()</code> saves packages and where <code>library()</code> looks for them by default.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">.libPaths</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "/Users/zakvarty/R_libraries/4.2/cran"                          
[2] "/Users/zakvarty/R_libraries/4.2/github"                        
[3] "/Users/zakvarty/R_libraries/4.2/personal"                      
[4] "/Library/Frameworks/R.framework/Versions/4.2/Resources/library"</code></pre>
</div>
</div>
<p>Note that yours will probably only return one entry. I’ve set things up to keep my R packages separated according to where they came from and so that they save to the CRAN folder by default, because this is where I get most of my packages.</p>
</section>
<section id="what-to-call-your-package" class="level2">
<h2 class="anchored" data-anchor-id="what-to-call-your-package">What to call your package?</h2>
<p>Naming things in hard.</p>
<p>Aim for something short, speakable. Snake, camel and pascal case are all acceptable, but aim for simplicity.</p>
<p>Since packages group code, the package name should describe the group in some way.</p>
<ul>
<li>Personal: <code>zvtools</code>, <code>broman</code>, <code>ralph</code></li>
<li>Colours: <code>rColourBrewer</code>, <code>PrettyCols</code>, <code>wesanderson</code></li>
<li>Data/Analysis type: <code>lubridate</code>, <code>sp</code>, <code>spatstat</code>, <code>ismev</code></li>
</ul>
<p>I’ll follow the inspiration of <code>{ismev}</code> and name my minimal package <code>eds</code>, after the Effective Data Science module.</p>
<div class="cell" data-filename="Console">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">usethis<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">create_package</span>(<span class="at" style="color: #657422;">path =</span> <span class="st" style="color: #20794D;">"~/Work/teaching/2022_data_science/eds"</span>)</span></code></pre></div>
</div>
<p>This will</p>
<ol type="1">
<li>Create a new R project at the specified path,</li>
<li>Creates a template package within that project directory,</li>
<li>Opens the project in a new RStudio session.</li>
</ol>
<p>It will also output something like the following in the console:</p>
<div class="cell" data-filename="Console">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">✔ Creating <span class="st" style="color: #20794D;">'/Users/zakvarty/Work/teaching/2022_data_science/eds/'</span></span>
<span id="cb5-2">✔ Setting active project to <span class="st" style="color: #20794D;">'/Users/zakvarty/Work/teaching/2022_data_science/eds'</span></span>
<span id="cb5-3">✔ Creating <span class="st" style="color: #20794D;">'R/'</span></span>
<span id="cb5-4">✔ Writing <span class="st" style="color: #20794D;">'DESCRIPTION'</span>Package<span class="sc" style="color: #5E5E5E;">:</span> eds</span>
<span id="cb5-5">Title<span class="sc" style="color: #5E5E5E;">:</span> What the Package <span class="fu" style="color: #4758AB;">Does</span> (One Line, Title Case)</span>
<span id="cb5-6">Version<span class="sc" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">0.9000</span></span>
<span id="cb5-7">Authors<span class="sc" style="color: #5E5E5E;">@</span><span class="fu" style="color: #4758AB;">R</span> (parsed)<span class="sc" style="color: #5E5E5E;">:</span></span>
<span id="cb5-8">    <span class="er" style="color: #AD0000;">*</span> First Last <span class="sc" style="color: #5E5E5E;">&lt;</span>first.last<span class="sc" style="color: #5E5E5E;">@</span>example.com<span class="sc" style="color: #5E5E5E;">&gt;</span> [aut, cre] (YOUR<span class="sc" style="color: #5E5E5E;">-</span>ORCID<span class="sc" style="color: #5E5E5E;">-</span>ID)</span>
<span id="cb5-9">Description<span class="sc" style="color: #5E5E5E;">:</span> What the package <span class="fu" style="color: #4758AB;">does</span> (one paragraph).</span>
<span id="cb5-10">License<span class="sc" style="color: #5E5E5E;">:</span> <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">use_mit_license()</span><span class="st" style="color: #20794D;">`</span>, <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">use_gpl3_license()</span><span class="st" style="color: #20794D;">`</span> or friends to</span>
<span id="cb5-11">    pick a license</span>
<span id="cb5-12">Encoding<span class="sc" style="color: #5E5E5E;">:</span> UTF<span class="dv" style="color: #AD0000;">-8</span></span>
<span id="cb5-13">Roxygen<span class="sc" style="color: #5E5E5E;">:</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">markdown =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb5-14">RoxygenNote<span class="sc" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">7</span>.<span class="fl" style="color: #AD0000;">2.3</span></span>
<span id="cb5-15">✔ Writing <span class="st" style="color: #20794D;">'NAMESPACE'</span></span>
<span id="cb5-16">✔ Writing <span class="st" style="color: #20794D;">'eds.Rproj'</span></span>
<span id="cb5-17">✔ Adding <span class="st" style="color: #20794D;">'^eds</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.Rproj
  <category>R</category>
  <category>data science</category>
  <category>tutorial</category>
  <guid>https://www.zakvarty.com/blog/2023-01-16-minimal-R-package/index.html</guid>
  <pubDate>Thu, 19 Jan 2023 00:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2023-01-16-minimal-R-package/horst-amazing-function.png" medium="image" type="image/png" height="89" width="144"/>
</item>
<item>
  <title>Data Wrangling</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2023-01-06-data-wrangling/index.html</link>
  <description><![CDATA[ 



<section id="what-is-data-wrangling" class="level2">
<h2 class="anchored" data-anchor-id="what-is-data-wrangling">What is Data Wrangling?</h2>
<div class="medium_right">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2023-01-06-data-wrangling/horst-wrangle-monsters.jpg" alt="Two happy looking round fuzzy monsters, each holding a similarly shaped wrench with the word “wrangle” on it. Between their tools is held up a rectangular data table labeled “TIDY.”"></p>
</div>
<p>Okay, so you’ve got some data. Great start!</p>
<p>You might have had it handed to you by a collaborator, <a href="https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/">requested it via an API</a> or <a href="https://www.zakvarty.com/blog/2022-12-01-rvest/">scraped it from the raw html of a webpage</a>. In the worst case scenario, you’re an <em>actual</em> scientist (not just a <em>data</em> one) and you spent the last several months of your life painstakingly measuring flower petals or car parts. Now we really want to do something useful with that data.</p>
<p>We’ve seen already how you can load the data into R and pivot between wider and longer formats, but that probably isn’t enough to satisfy your curisity. You want to be able to view your data, manipulate and subset it, create new variables from exisiting ones and cross-reference your dataset with others. All of these are things possible in R and are known under various collective names including data manipulation, data munging and data wrangling.</p>
<p>I’ve decided to use the term data wranging here. That’s because data manipulation sounds boring a.f. and data munging is both unpleasant to say and makes me imagine we are squelching through some sort of information swamp.</p>
<p>In what follows I’ll give a fly-by tour of tools for data wrangling in R, showing some examples along the way. I’ll focus on some of the most common and useful operations and link out to some more extensive guides for wrangling your data in R, that you can refer back to as you need them.</p>
</section>
<section id="example-data-sets" class="level2">
<h2 class="anchored" data-anchor-id="example-data-sets">Example Data Sets</h2>
<p>To demonstrate some standard skills we will use some standard datasets that come built into any R installation. These are the <code>penguins</code> data set from <code>{palmerpenguins}</code> and the <code>mtcars</code> data set.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(palmerpenguins)</span>
<span id="cb1-2">pengins <span class="ot" style="color: #003B4F;">&lt;-</span> palmerpenguins<span class="sc" style="color: #5E5E5E;">::</span>penguins</span>
<span id="cb1-3">cars <span class="ot" style="color: #003B4F;">&lt;-</span> datasets<span class="sc" style="color: #5E5E5E;">::</span>mtcars</span></code></pre></div>
</div>
</section>
<section id="viewing-your-data" class="level2">
<h2 class="anchored" data-anchor-id="viewing-your-data">Viewing Your Data</h2>
<section id="view" class="level3">
<h3 class="anchored" data-anchor-id="view"><code>View()</code></h3>
<p>The <code>View()</code> function can be used to crease a spreadsheet-like view of your data. In RStudio this will open as a new tab.</p>
<p><code>View()</code> will work for any “matrix-like” R object, such as a tibble, data frame, vector or matrix. Note the capital letter - the function is called <code>View()</code>, not <code>view()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">View</span>(penguins)</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.zakvarty.com/blog/2023-01-06-data-wrangling/view-penguins-screenshot.png" class="img-fluid figure-img" style="width:60.0%"></p>
<p></p><figcaption class="figure-caption">Screenshot of RStduio files pane, containg a spreadsheet view of the palmer penguins data set.</figcaption><p></p>
</figure>
</div>
</section>
<section id="head" class="level3">
<h3 class="anchored" data-anchor-id="head"><code>head()</code></h3>
<p>For large data sets, you might not want (or be able to) view it all at once. You can then use <code>head()</code> to view the first few rows. The integer argument <code>n</code> specifies the number of rows you would like to return.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">head</span>(<span class="at" style="color: #657422;">x =</span> pengins, <span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 8
  species island    bill_length_mm bill_depth_mm flipper_l…¹ body_…² sex    year
  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;       &lt;int&gt;   &lt;int&gt; &lt;fct&gt; &lt;int&gt;
1 Adelie  Torgersen           39.1          18.7         181    3750 male   2007
2 Adelie  Torgersen           39.5          17.4         186    3800 fema…  2007
3 Adelie  Torgersen           40.3          18           195    3250 fema…  2007
# … with abbreviated variable names ¹​flipper_length_mm, ²​body_mass_g</code></pre>
</div>
</div>
</section>
<section id="str" class="level3">
<h3 class="anchored" data-anchor-id="str"><code>str()</code></h3>
<p>An alternative way to view the a large data set, or one with a complicated format is to examine its structure with <code>str()</code>. This is a useful way to inspect the structure of list-like objects, particularly when they’ve got a nested structure.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">str</span>(penguins)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tibble [344 × 8] (S3: tbl_df/tbl/data.frame)
 $ species          : Factor w/ 3 levels "Adelie","Chinstrap",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ island           : Factor w/ 3 levels "Biscoe","Dream",..: 3 3 3 3 3 3 3 3 3 3 ...
 $ bill_length_mm   : num [1:344] 39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...
 $ bill_depth_mm    : num [1:344] 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...
 $ flipper_length_mm: int [1:344] 181 186 195 NA 193 190 181 195 193 190 ...
 $ body_mass_g      : int [1:344] 3750 3800 3250 NA 3450 3650 3625 4675 3475 4250 ...
 $ sex              : Factor w/ 2 levels "female","male": 2 1 1 NA 1 2 1 2 NA NA ...
 $ year             : int [1:344] 2007 2007 2007 2007 2007 2007 2007 2007 2007 2007 ...</code></pre>
</div>
</div>
</section>
<section id="names" class="level3">
<h3 class="anchored" data-anchor-id="names"><code>names()</code></h3>
<p>Finally, if you just want to access the variable names you can do so with the <code>names()</code> function from base R.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;">names</span>(penguins)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "species"           "island"            "bill_length_mm"   
[4] "bill_depth_mm"     "flipper_length_mm" "body_mass_g"      
[7] "sex"               "year"             </code></pre>
</div>
</div>
<p>Similarly, you can explicitly access the row and column names of a data frame or tibble using <code>colnames()</code> or <code>rownames()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;">colnames</span>(cars)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "mpg"  "cyl"  "disp" "hp"   "drat" "wt"   "qsec" "vs"   "am"   "gear"
[11] "carb"</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;">rownames</span>(cars)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "Mazda RX4"           "Mazda RX4 Wag"       "Datsun 710"         
 [4] "Hornet 4 Drive"      "Hornet Sportabout"   "Valiant"            
 [7] "Duster 360"          "Merc 240D"           "Merc 230"           
[10] "Merc 280"            "Merc 280C"           "Merc 450SE"         
[13] "Merc 450SL"          "Merc 450SLC"         "Cadillac Fleetwood" 
[16] "Lincoln Continental" "Chrysler Imperial"   "Fiat 128"           
[19] "Honda Civic"         "Toyota Corolla"      "Toyota Corona"      
[22] "Dodge Challenger"    "AMC Javelin"         "Camaro Z28"         
[25] "Pontiac Firebird"    "Fiat X1-9"           "Porsche 914-2"      
[28] "Lotus Europa"        "Ford Pantera L"      "Ferrari Dino"       
[31] "Maserati Bora"       "Volvo 142E"         </code></pre>
</div>
</div>
<p>In the <code>cars</code> data, the car model are stored as the row names. This doesn’t really jive with our idea of tidy data - we’ll see how to fix that shortly.</p>
</section>
</section>
<section id="renaming-variables" class="level2">
<h2 class="anchored" data-anchor-id="renaming-variables">Renaming Variables</h2>
<section id="colnames" class="level3">
<h3 class="anchored" data-anchor-id="colnames"><code>colnames()</code></h3>
<p>The function <code>colnames()</code> can be used to set as well as to retrieve column names.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">cars_renamed <span class="ot" style="color: #003B4F;">&lt;-</span> cars </span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;">colnames</span>(cars_renamed)[<span class="dv" style="color: #AD0000;">1</span>] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"miles_per_gallon"</span></span>
<span id="cb13-3"><span class="fu" style="color: #4758AB;">colnames</span>(cars_renamed)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "miles_per_gallon" "cyl"              "disp"             "hp"              
 [5] "drat"             "wt"               "qsec"             "vs"              
 [9] "am"               "gear"             "carb"            </code></pre>
</div>
</div>
</section>
<section id="dplyrrename" class="level3">
<h3 class="anchored" data-anchor-id="dplyrrename"><code>dplyr::rename()</code></h3>
<p>We can also use functions from <code>{dplyr}</code> to rename columns. Let’s alter the second column name.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'dplyr'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:stats':

    filter, lag</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union</code></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">cars_renamed <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rename</span>(<span class="at" style="color: #657422;">.data =</span> cars_renamed, <span class="at" style="color: #657422;">cylinders =</span> cyl)</span>
<span id="cb19-2"><span class="fu" style="color: #4758AB;">colnames</span>(cars_renamed)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "miles_per_gallon" "cylinders"        "disp"             "hp"              
 [5] "drat"             "wt"               "qsec"             "vs"              
 [9] "am"               "gear"             "carb"            </code></pre>
</div>
</div>
<p>This could be done as part of a pipe, if we were making many alterations.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">cars_renamed <span class="ot" style="color: #003B4F;">&lt;-</span> cars_renamed <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb21-2">  <span class="fu" style="color: #4758AB;">rename</span>(<span class="at" style="color: #657422;">displacement =</span> disp) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb21-3">  <span class="fu" style="color: #4758AB;">rename</span>(<span class="at" style="color: #657422;">horse_power =</span> hp) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb21-4">  <span class="fu" style="color: #4758AB;">rename</span>(<span class="at" style="color: #657422;">rear_axel_ratio =</span> drat)</span>
<span id="cb21-5"></span>
<span id="cb21-6"><span class="fu" style="color: #4758AB;">colnames</span>(cars_renamed)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "miles_per_gallon" "cylinders"        "displacement"     "horse_power"     
 [5] "rear_axel_ratio"  "wt"               "qsec"             "vs"              
 [9] "am"               "gear"             "carb"            </code></pre>
</div>
</div>
<p>When using the dplyr function you have to remember the format <code>new_name = old_name</code>. This matches the format used to create a data frame or tibble, but is the opposite order to the python function of the same name and often catches people out.</p>
<p>In the section (#creating-new-variables) on creating new variables, we will see an alternative way of doing this by copying the column and then deleting the original.</p>
</section>
</section>
<section id="subsetting" class="level2">
<h2 class="anchored" data-anchor-id="subsetting">Subsetting</h2>
<section id="base-r" class="level3">
<h3 class="anchored" data-anchor-id="base-r">Base R</h3>
<p>In base R you can extract rows, columns and combinations thereof using index notation.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="co" style="color: #5E5E5E;"># First row</span></span>
<span id="cb23-2">penguins[<span class="dv" style="color: #AD0000;">1</span>, ]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 8
  species island    bill_length_mm bill_depth_mm flipper_l…¹ body_…² sex    year
  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;       &lt;int&gt;   &lt;int&gt; &lt;fct&gt; &lt;int&gt;
1 Adelie  Torgersen           39.1          18.7         181    3750 male   2007
# … with abbreviated variable names ¹​flipper_length_mm, ²​body_mass_g</code></pre>
</div>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="co" style="color: #5E5E5E;"># First Column </span></span>
<span id="cb25-2">penguins[ , <span class="dv" style="color: #AD0000;">1</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 344 × 1
   species
   &lt;fct&gt;  
 1 Adelie 
 2 Adelie 
 3 Adelie 
 4 Adelie 
 5 Adelie 
 6 Adelie 
 7 Adelie 
 8 Adelie 
 9 Adelie 
10 Adelie 
# … with 334 more rows</code></pre>
</div>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="co" style="color: #5E5E5E;"># Rows 2-3 of columns 1, 2 and 4</span></span>
<span id="cb27-2">penguins[<span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">3</span>, <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">4</span>)]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 3
  species island    bill_depth_mm
  &lt;fct&gt;   &lt;fct&gt;             &lt;dbl&gt;
1 Adelie  Torgersen          17.4
2 Adelie  Torgersen          18  </code></pre>
</div>
</div>
<p>Using negative indexing you can remove rows or columns</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="co" style="color: #5E5E5E;"># Drop all but first row</span></span>
<span id="cb29-2">penguins[<span class="sc" style="color: #5E5E5E;">-</span>(<span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">344</span>), ]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 8
  species island    bill_length_mm bill_depth_mm flipper_l…¹ body_…² sex    year
  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;       &lt;int&gt;   &lt;int&gt; &lt;fct&gt; &lt;int&gt;
1 Adelie  Torgersen           39.1          18.7         181    3750 male   2007
# … with abbreviated variable names ¹​flipper_length_mm, ²​body_mass_g</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="co" style="color: #5E5E5E;"># Drop all but first column </span></span>
<span id="cb31-2">penguins[ , <span class="sc" style="color: #5E5E5E;">-</span>(<span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">8</span>)]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 344 × 1
   species
   &lt;fct&gt;  
 1 Adelie 
 2 Adelie 
 3 Adelie 
 4 Adelie 
 5 Adelie 
 6 Adelie 
 7 Adelie 
 8 Adelie 
 9 Adelie 
10 Adelie 
# … with 334 more rows</code></pre>
</div>
</div>
<p>You can also select rows or columns by their names. This can be done using the bracket syntax (<code>[ ]</code>) or the dollar syntax (<code>$</code>).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">pengins[ , <span class="st" style="color: #20794D;">"species"</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 344 × 1
   species
   &lt;fct&gt;  
 1 Adelie 
 2 Adelie 
 3 Adelie 
 4 Adelie 
 5 Adelie 
 6 Adelie 
 7 Adelie 
 8 Adelie 
 9 Adelie 
10 Adelie 
# … with 334 more rows</code></pre>
</div>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">penguins<span class="sc" style="color: #5E5E5E;">$</span>species</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  [1] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
  [8] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [15] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [22] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [29] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [36] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [43] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [50] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [57] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [64] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [71] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [78] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [85] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [92] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [99] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
[106] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
[113] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
[120] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
[127] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
[134] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
[141] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
[148] Adelie    Adelie    Adelie    Adelie    Adelie    Gentoo    Gentoo   
[155] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[162] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[169] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[176] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[183] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[190] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[197] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[204] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[211] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[218] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[225] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[232] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[239] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[246] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[253] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[260] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[267] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[274] Gentoo    Gentoo    Gentoo    Chinstrap Chinstrap Chinstrap Chinstrap
[281] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap
[288] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap
[295] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap
[302] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap
[309] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap
[316] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap
[323] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap
[330] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap
[337] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap
[344] Chinstrap
Levels: Adelie Chinstrap Gentoo</code></pre>
</div>
</div>
<p>Since <code>penguins</code> is a tibble, these return different types of object. Sub-setting a tibble with bracket syntax will return a tibble, while extracting a column using the dollar syntax returns a vector of values.</p>
</section>
<section id="filter-and-select" class="level3">
<h3 class="anchored" data-anchor-id="filter-and-select"><code>filter()</code> and <code>select()</code></h3>
<p><code>{dplyr}</code> has two functions for subsetting, <code>filter()</code> subsets by rows and <code>select()</code> subsets by column.</p>
<p>In both functions you list what you would like to retain. Filter and select calls can be piped together to subset based on row and column values.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb37-2">  <span class="fu" style="color: #4758AB;">select</span>(species, island,body_mass_g)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 344 × 3
   species island    body_mass_g
   &lt;fct&gt;   &lt;fct&gt;           &lt;int&gt;
 1 Adelie  Torgersen        3750
 2 Adelie  Torgersen        3800
 3 Adelie  Torgersen        3250
 4 Adelie  Torgersen          NA
 5 Adelie  Torgersen        3450
 6 Adelie  Torgersen        3650
 7 Adelie  Torgersen        3625
 8 Adelie  Torgersen        4675
 9 Adelie  Torgersen        3475
10 Adelie  Torgersen        4250
# … with 334 more rows</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb39-2">  <span class="fu" style="color: #4758AB;">select</span>(species, island, body_mass_g) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb39-3">  <span class="fu" style="color: #4758AB;">filter</span>(body_mass_g <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">6000</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 3
  species island body_mass_g
  &lt;fct&gt;   &lt;fct&gt;        &lt;int&gt;
1 Gentoo  Biscoe        6300
2 Gentoo  Biscoe        6050</code></pre>
</div>
</div>
<p>Subsetting rows can be inverted by negating the <code>filter()</code> statement.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb41-2">  <span class="fu" style="color: #4758AB;">select</span>(species, island, body_mass_g) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb41-3">  <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span>(body_mass_g <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">6000</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 340 × 3
   species island    body_mass_g
   &lt;fct&gt;   &lt;fct&gt;           &lt;int&gt;
 1 Adelie  Torgersen        3750
 2 Adelie  Torgersen        3800
 3 Adelie  Torgersen        3250
 4 Adelie  Torgersen        3450
 5 Adelie  Torgersen        3650
 6 Adelie  Torgersen        3625
 7 Adelie  Torgersen        4675
 8 Adelie  Torgersen        3475
 9 Adelie  Torgersen        4250
10 Adelie  Torgersen        3300
# … with 330 more rows</code></pre>
</div>
</div>
<p>and dropping columns can done by selecting all columns except the one(s) you want to drop.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb43-2">  <span class="fu" style="color: #4758AB;">select</span>(species, island, body_mass_g) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb43-3">  <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span>(body_mass_g <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">6000</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb43-4">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">c</span>(species, island))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 340 × 1
   body_mass_g
         &lt;int&gt;
 1        3750
 2        3800
 3        3250
 4        3450
 5        3650
 6        3625
 7        4675
 8        3475
 9        4250
10        3300
# … with 330 more rows</code></pre>
</div>
</div>
</section>
</section>
<section id="creating-new-variables" class="level2">
<h2 class="anchored" data-anchor-id="creating-new-variables">Creating New Variables</h2>
<section id="base-r-1" class="level3">
<h3 class="anchored" data-anchor-id="base-r-1">Base R</h3>
<p>We can create new variables in base R by assigning a vector of the correct length to a new column name.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1">cars_renamed<span class="sc" style="color: #5E5E5E;">$</span>weight <span class="ot" style="color: #003B4F;">&lt;-</span> cars_renamed<span class="sc" style="color: #5E5E5E;">$</span>wt</span></code></pre></div>
</div>
<p>If we then drop the original column from the data frame, this gives us an alternative way of renaming columns.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">cars_renamed <span class="ot" style="color: #003B4F;">&lt;-</span> cars_renamed[ ,<span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">which</span>(<span class="fu" style="color: #4758AB;">names</span>(cars_renamed) <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"wt"</span>)]</span>
<span id="cb46-2"><span class="fu" style="color: #4758AB;">head</span>(cars_renamed, <span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                  miles_per_gallon cylinders displacement horse_power
Mazda RX4                     21.0         6          160         110
Mazda RX4 Wag                 21.0         6          160         110
Datsun 710                    22.8         4          108          93
Hornet 4 Drive                21.4         6          258         110
Hornet Sportabout             18.7         8          360         175
                  rear_axel_ratio  qsec vs am gear carb weight
Mazda RX4                    3.90 16.46  0  1    4    4  2.620
Mazda RX4 Wag                3.90 17.02  0  1    4    4  2.875
Datsun 710                   3.85 18.61  1  1    4    1  2.320
Hornet 4 Drive               3.08 19.44  1  0    3    1  3.215
Hornet Sportabout            3.15 17.02  0  0    3    2  3.440</code></pre>
</div>
</div>
<p>One thing to be aware of is that this operation does not preserve column ordering.</p>
<p>Generally speaking, code that relies on columns being in a specific order is fragile - it breaks easily. If possible, you should try to write your code in another way that’s robust to column reordering. I’ve done that here when removing the <code>wt</code> column by looking up the column index as part of my code, rather than assuming it will always be the fourth column.</p>
</section>
<section id="dplyrmutate" class="level3">
<h3 class="anchored" data-anchor-id="dplyrmutate"><code>dplyr::mutate()</code></h3>
<p>The function from <code>{dplyr}</code> to create new columns is <code>mutate()</code>. Let’s create another column that has the car’s weight in kilogrammes rather than tonnes.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">cars_renamed <span class="ot" style="color: #003B4F;">&lt;-</span> cars_renamed <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb48-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">weight_kg =</span> weight <span class="sc" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">1000</span>)</span>
<span id="cb48-3"></span>
<span id="cb48-4">cars_renamed <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb48-5">  <span class="fu" style="color: #4758AB;">select</span>(miles_per_gallon, cylinders, displacement, weight, weight_kg) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb48-6">  <span class="fu" style="color: #4758AB;">head</span>(<span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                  miles_per_gallon cylinders displacement weight weight_kg
Mazda RX4                     21.0         6          160  2.620      2620
Mazda RX4 Wag                 21.0         6          160  2.875      2875
Datsun 710                    22.8         4          108  2.320      2320
Hornet 4 Drive                21.4         6          258  3.215      3215
Hornet Sportabout             18.7         8          360  3.440      3440</code></pre>
</div>
</div>
<p>You can also create new columns that combine multiple other columns</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1">cars_renamed <span class="ot" style="color: #003B4F;">&lt;-</span> cars_renamed <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb50-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">cylinder_adjusted_mpg =</span> miles_per_gallon <span class="sc" style="color: #5E5E5E;">/</span> cylinders)</span></code></pre></div>
</div>
</section>
<section id="rownames_to_column" class="level3">
<h3 class="anchored" data-anchor-id="rownames_to_column"><code>rownames_to_column()</code></h3>
<p>One useful example of adding an additional row to a data frame is to convert its row names to a column of the data fame.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1">cars <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb51-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">model =</span> <span class="fu" style="color: #4758AB;">rownames</span>(cars_renamed)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb51-3">  <span class="fu" style="color: #4758AB;">select</span>(mpg, cyl, model) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb51-4">  <span class="fu" style="color: #4758AB;">head</span>(<span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                   mpg cyl             model
Mazda RX4         21.0   6         Mazda RX4
Mazda RX4 Wag     21.0   6     Mazda RX4 Wag
Datsun 710        22.8   4        Datsun 710
Hornet 4 Drive    21.4   6    Hornet 4 Drive
Hornet Sportabout 18.7   8 Hornet Sportabout</code></pre>
</div>
</div>
<p>Therea neat function called <code>rownames_to_column()</code> in <code>{tibble}</code> which will add this as the first column and remove the row names all in one step.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1">cars <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb53-2">  tibble<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">rownames_to_column</span>(<span class="at" style="color: #657422;">var =</span> <span class="st" style="color: #20794D;">"model"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb53-3">  <span class="fu" style="color: #4758AB;">head</span>(<span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>              model  mpg cyl disp  hp drat    wt  qsec vs am gear carb
1         Mazda RX4 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
2     Mazda RX4 Wag 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
3        Datsun 710 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
4    Hornet 4 Drive 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
5 Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2</code></pre>
</div>
</div>
</section>
<section id="rowids_to_column" class="level3">
<h3 class="anchored" data-anchor-id="rowids_to_column"><code>rowids_to_column()</code></h3>
<p>Another function from <code>{tibble}</code> adds the row id of each observation as a new column. This is often useful when ordering or combining tables.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1">cars <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb55-2">  tibble<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">rowid_to_column</span>(<span class="at" style="color: #657422;">var =</span> <span class="st" style="color: #20794D;">"row_id"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb55-3">  <span class="fu" style="color: #4758AB;">head</span>(<span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  row_id  mpg cyl disp  hp drat    wt  qsec vs am gear carb
1      1 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
2      2 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
3      3 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
4      4 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
5      5 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2</code></pre>
</div>
</div>
</section>
</section>
<section id="summaries" class="level2">
<h2 class="anchored" data-anchor-id="summaries">Summaries</h2>
<p>The <code>summarise()</code> function allows you to collapse a data frame into a single row, which gives a summary statistic of your choosing.</p>
<p>This can be used to calculate a single summary</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb57-1"><span class="fu" style="color: #4758AB;">summarise</span>(penguins, <span class="at" style="color: #657422;">average_bill_length_mm =</span> <span class="fu" style="color: #4758AB;">mean</span>(bill_length_mm))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 1
  average_bill_length_mm
                   &lt;dbl&gt;
1                     NA</code></pre>
</div>
</div>
<p>Since we have missing values, we might instead want to calculate the mean of the recorded values.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb59-1"><span class="fu" style="color: #4758AB;">summarise</span>(penguins, <span class="at" style="color: #657422;">average_bill_length_mm =</span> <span class="fu" style="color: #4758AB;">mean</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 1
  average_bill_length_mm
                   &lt;dbl&gt;
1                   43.9</code></pre>
</div>
</div>
<p>We can also use <code>summarise()</code> to gather multiple summaries in a single data frame.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb61-1">bill_length_mm_summary <span class="ot" style="color: #003B4F;">&lt;-</span> penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb61-2">  <span class="fu" style="color: #4758AB;">summarise</span>(</span>
<span id="cb61-3">    <span class="at" style="color: #657422;">mean =</span> <span class="fu" style="color: #4758AB;">mean</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb61-4">    <span class="at" style="color: #657422;">median =</span> <span class="fu" style="color: #4758AB;">median</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb61-5">    <span class="at" style="color: #657422;">min =</span> <span class="fu" style="color: #4758AB;">max</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb61-6">    <span class="at" style="color: #657422;">q_0 =</span> <span class="fu" style="color: #4758AB;">min</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb61-7">    <span class="at" style="color: #657422;">q_1 =</span> <span class="fu" style="color: #4758AB;">quantile</span>(bill_length_mm, <span class="at" style="color: #657422;">prob =</span> <span class="fl" style="color: #AD0000;">0.25</span>, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb61-8">    <span class="at" style="color: #657422;">q_2 =</span> <span class="fu" style="color: #4758AB;">median</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb61-9">    <span class="at" style="color: #657422;">q_3 =</span> <span class="fu" style="color: #4758AB;">quantile</span>(bill_length_mm, <span class="at" style="color: #657422;">prob =</span> <span class="fl" style="color: #AD0000;">0.25</span>, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb61-10">    <span class="at" style="color: #657422;">q_4 =</span> <span class="fu" style="color: #4758AB;">max</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>))</span>
<span id="cb61-11"></span>
<span id="cb61-12">bill_length_mm_summary</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 8
   mean median   min   q_0   q_1   q_2   q_3   q_4
  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1  43.9   44.4  59.6  32.1  39.2  44.4  39.2  59.6</code></pre>
</div>
</div>
<p>In all this isn’t overly exciting. You might, rightly, wonder why you’d want to use these <code>summarise()</code> calls when we could just use the simpler base R calls directly.</p>
<p>One benefit is that the summarise calls ensure consistent output. However, the main advantage comes when you want to apply these summaries to distinct subgroups of the data.</p>
</section>
<section id="grouped-operations" class="level2">
<h2 class="anchored" data-anchor-id="grouped-operations">Grouped Operations</h2>
<p>The real benefit of <code>summarise()</code> comes from its combination with <code>group_by()</code>. This allows to you calculate the same summary statistics for each level of a factor with only one additional line of code. Here we’re re-calculating the same set of summary statistics we just found for all penguins, but for each individual species.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb63-1">penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb63-2">  <span class="fu" style="color: #4758AB;">group_by</span>(species) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb63-3">  <span class="fu" style="color: #4758AB;">summarise</span>(</span>
<span id="cb63-4">    <span class="at" style="color: #657422;">mean =</span> <span class="fu" style="color: #4758AB;">mean</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb63-5">    <span class="at" style="color: #657422;">median =</span> <span class="fu" style="color: #4758AB;">median</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb63-6">    <span class="at" style="color: #657422;">min =</span> <span class="fu" style="color: #4758AB;">max</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb63-7">    <span class="at" style="color: #657422;">q_0 =</span> <span class="fu" style="color: #4758AB;">min</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb63-8">    <span class="at" style="color: #657422;">q_1 =</span> <span class="fu" style="color: #4758AB;">quantile</span>(bill_length_mm, <span class="at" style="color: #657422;">prob =</span> <span class="fl" style="color: #AD0000;">0.25</span>, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb63-9">    <span class="at" style="color: #657422;">q_2 =</span> <span class="fu" style="color: #4758AB;">median</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb63-10">    <span class="at" style="color: #657422;">q_3 =</span> <span class="fu" style="color: #4758AB;">quantile</span>(bill_length_mm, <span class="at" style="color: #657422;">prob =</span> <span class="fl" style="color: #AD0000;">0.25</span>, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb63-11">    <span class="at" style="color: #657422;">q_4 =</span> <span class="fu" style="color: #4758AB;">max</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 9
  species    mean median   min   q_0   q_1   q_2   q_3   q_4
  &lt;fct&gt;     &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1 Adelie     38.8   38.8  46    32.1  36.8  38.8  36.8  46  
2 Chinstrap  48.8   49.6  58    40.9  46.3  49.6  46.3  58  
3 Gentoo     47.5   47.3  59.6  40.9  45.3  47.3  45.3  59.6</code></pre>
</div>
</div>
<p>You can group by multiple factors to calculate summaries for each distinct combination of levels within your data set. Here we group by combinations of species and the island to which they belong.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb65-1">penguin_summary_stats <span class="ot" style="color: #003B4F;">&lt;-</span> penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb65-2">  <span class="fu" style="color: #4758AB;">group_by</span>(species, island) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb65-3">  <span class="fu" style="color: #4758AB;">summarise</span>(</span>
<span id="cb65-4">    <span class="at" style="color: #657422;">mean =</span> <span class="fu" style="color: #4758AB;">mean</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb65-5">    <span class="at" style="color: #657422;">median =</span> <span class="fu" style="color: #4758AB;">median</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb65-6">    <span class="at" style="color: #657422;">min =</span> <span class="fu" style="color: #4758AB;">max</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb65-7">    <span class="at" style="color: #657422;">q_0 =</span> <span class="fu" style="color: #4758AB;">min</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb65-8">    <span class="at" style="color: #657422;">q_1 =</span> <span class="fu" style="color: #4758AB;">quantile</span>(bill_length_mm, <span class="at" style="color: #657422;">prob =</span> <span class="fl" style="color: #AD0000;">0.25</span>, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb65-9">    <span class="at" style="color: #657422;">q_2 =</span> <span class="fu" style="color: #4758AB;">median</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb65-10">    <span class="at" style="color: #657422;">q_3 =</span> <span class="fu" style="color: #4758AB;">quantile</span>(bill_length_mm, <span class="at" style="color: #657422;">prob =</span> <span class="fl" style="color: #AD0000;">0.25</span>, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb65-11">    <span class="at" style="color: #657422;">q_4 =</span> <span class="fu" style="color: #4758AB;">max</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`summarise()` has grouped output by 'species'. You can override using the
`.groups` argument.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb67-1">penguin_summary_stats</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 10
# Groups:   species [3]
  species   island     mean median   min   q_0   q_1   q_2   q_3   q_4
  &lt;fct&gt;     &lt;fct&gt;     &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1 Adelie    Biscoe     39.0   38.7  45.6  34.5  37.7  38.7  37.7  45.6
2 Adelie    Dream      38.5   38.6  44.1  32.1  36.8  38.6  36.8  44.1
3 Adelie    Torgersen  39.0   38.9  46    33.5  36.7  38.9  36.7  46  
4 Chinstrap Dream      48.8   49.6  58    40.9  46.3  49.6  46.3  58  
5 Gentoo    Biscoe     47.5   47.3  59.6  40.9  45.3  47.3  45.3  59.6</code></pre>
</div>
</div>
<section id="ungrouping" class="level3">
<h3 class="anchored" data-anchor-id="ungrouping">Ungrouping</h3>
<p>By default, each call to <code>summarise()</code> will undo one level of grouping. This means that our previous result was still grouped by species.</p>
<p>(We can see this by examining the structure of the returned data frame. The first line tells us that this this is an S3 object of class “grouped_df”, which inherits its properties from a “tbl_df”, whose properties in turn come from “tbl” and “data.frame” objects.)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb69-1"><span class="fu" style="color: #4758AB;">class</span>(penguin_summary_stats)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "grouped_df" "tbl_df"     "tbl"        "data.frame"</code></pre>
</div>
</div>
<p>Since we have grouped by two variables, R expects us to use two summaries before returning a data frame (or tibble) that is not grouped. One way to satisfy this is to use apply a second summary at the species level of grouping.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb71-1">penguin_summary_stats <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb71-2">  <span class="fu" style="color: #4758AB;">summarise_all</span>(mean, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in mean.default(island, na.rm = TRUE): argument is not numeric or
logical: returning NA

Warning in mean.default(island, na.rm = TRUE): argument is not numeric or
logical: returning NA

Warning in mean.default(island, na.rm = TRUE): argument is not numeric or
logical: returning NA</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 10
  species   island  mean median   min   q_0   q_1   q_2   q_3   q_4
  &lt;fct&gt;      &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1 Adelie        NA  38.8   38.7  45.2  33.4  37.0  38.7  37.0  45.2
2 Chinstrap     NA  48.8   49.6  58    40.9  46.3  49.6  46.3  58  
3 Gentoo        NA  47.5   47.3  59.6  40.9  45.3  47.3  45.3  59.6</code></pre>
</div>
</div>
<p>However, we won’t always want to do apply another summary. In that case, we can undo the grouping using <code>ungroup()</code>. Remembering to ungroup is a gotcha and cause of confusion when working with multiple-group summaries.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb74-1"><span class="fu" style="color: #4758AB;">ungroup</span>(penguin_summary_stats)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 10
  species   island     mean median   min   q_0   q_1   q_2   q_3   q_4
  &lt;fct&gt;     &lt;fct&gt;     &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1 Adelie    Biscoe     39.0   38.7  45.6  34.5  37.7  38.7  37.7  45.6
2 Adelie    Dream      38.5   38.6  44.1  32.1  36.8  38.6  36.8  44.1
3 Adelie    Torgersen  39.0   38.9  46    33.5  36.7  38.9  36.7  46  
4 Chinstrap Dream      48.8   49.6  58    40.9  46.3  49.6  46.3  58  
5 Gentoo    Biscoe     47.5   47.3  59.6  40.9  45.3  47.3  45.3  59.6</code></pre>
</div>
</div>
<p>There’s an alternative method to achieve the same thing in a single step when using <code>{dplyr}</code> versions 1.0.0 and above. This is to to set the <code>.groups</code> parameter of the <code>summarise()</code> function call, which determines the grouping of the returned data frame.</p>
<p>The <code>.groups</code> parameter and can take 4 possible values:</p>
<ul>
<li><p>“drop_last”: dropping the last level of grouping (The only option before v1.0.0);</p></li>
<li><p>“drop”: All levels of grouping are dropped;</p></li>
<li><p>“keep”: Same grouping structure as <code>.data</code>;</p></li>
<li><p>“rowwise”: Each row is its own group.</p></li>
</ul>
<p>By default, “drop_last” is used if all the results have 1 row and “keep” is used otherwise.</p>
</section>
<section id="reordering-factors" class="level3">
<h3 class="anchored" data-anchor-id="reordering-factors">Reordering Factors</h3>
<p>R stored factors as integer values, which it then maps to a set of labels. Only factor levels that appear in your data will be assigned a coded integer value and the mapping between factor levels and integers will depend on the order that the labels appear in your data.</p>
<p>This can be annoying, particularly when your factor levels relate to properties that aren’t numerical but do have an inherent ordering to them. In the example below, we have the t-shirt size of twelve people.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb76-1">tshirts <span class="ot" style="color: #003B4F;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb76-2">  <span class="at" style="color: #657422;">id =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">12</span>, </span>
<span id="cb76-3">  <span class="at" style="color: #657422;">size =</span> <span class="fu" style="color: #4758AB;">as.factor</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"L"</span>, <span class="cn" style="color: #8f5902;">NA</span>, <span class="st" style="color: #20794D;">"M"</span>, <span class="st" style="color: #20794D;">"S"</span>, <span class="st" style="color: #20794D;">"XS"</span>, <span class="st" style="color: #20794D;">"M"</span>, <span class="st" style="color: #20794D;">"XXL"</span>, <span class="st" style="color: #20794D;">"L"</span>, <span class="st" style="color: #20794D;">"XS"</span>, <span class="st" style="color: #20794D;">"M"</span>, <span class="st" style="color: #20794D;">"L"</span>, <span class="st" style="color: #20794D;">"S"</span>))</span>
<span id="cb76-4">)</span>
<span id="cb76-5"></span>
<span id="cb76-6"><span class="fu" style="color: #4758AB;">levels</span>(tshirts<span class="sc" style="color: #5E5E5E;">$</span>size)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "L"   "M"   "S"   "XS"  "XXL"</code></pre>
</div>
</div>
<p>Annoyingly, the sizes aren’t in order and extra large is not included because it is not included in the sample. This leads to awkward summary tables (and plots).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb78-1">tshirts <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">group_by</span>(size) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">count =</span> <span class="fu" style="color: #4758AB;">n</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 2
  size  count
  &lt;fct&gt; &lt;int&gt;
1 L         3
2 M         3
3 S         2
4 XS        2
5 XXL       1
6 &lt;NA&gt;      1</code></pre>
</div>
</div>
<p>We can fix this by creating a new variable with the factors explicitly coded in the correct order. We also need to sepecify that we should not drop empty groups as part of <code>group_by()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb80-1">tidy_tshirt_levels <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"XS"</span>, <span class="st" style="color: #20794D;">"S"</span>, <span class="st" style="color: #20794D;">"M"</span>, <span class="st" style="color: #20794D;">"L"</span>, <span class="st" style="color: #20794D;">"XL"</span>, <span class="st" style="color: #20794D;">"XXL"</span>, <span class="cn" style="color: #8f5902;">NA</span>)</span>
<span id="cb80-2"></span>
<span id="cb80-3">tshirts <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb80-4">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">size_tidy =</span> <span class="fu" style="color: #4758AB;">factor</span>(size, <span class="at" style="color: #657422;">levels =</span> tidy_tshirt_levels)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb80-5">  <span class="fu" style="color: #4758AB;">group_by</span>(size_tidy, <span class="at" style="color: #657422;">.drop =</span> <span class="cn" style="color: #8f5902;">FALSE</span> ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb80-6">  <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">count =</span> <span class="fu" style="color: #4758AB;">n</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 7 × 2
  size_tidy count
  &lt;fct&gt;     &lt;int&gt;
1 XS            2
2 S             2
3 M             3
4 L             3
5 XL            0
6 XXL           1
7 &lt;NA&gt;          1</code></pre>
</div>
</div>
</section>
</section>
<section id="be-aware-factors" class="level2">
<h2 class="anchored" data-anchor-id="be-aware-factors">Be Aware: Factors</h2>
<p>As we have seen a little already, categorical variables can cause issues when wrangling and presenting data in R. All of these problems are solvable using base R techniques but the <code>{forcats}</code> package provides tools for the most common of these problems. This includes functions for changing the order of factor levels or the values with which they are associated.</p>
<p>Some examples functions from the package include:</p>
<ul>
<li><code>fct_reorder()</code>: Reordering a factor by another variable.</li>
<li><code>fct_infreq()</code>: Reordering a factor by the frequency of values.</li>
<li><code>fct_relevel()</code>: Changing the order of a factor by hand.</li>
<li><code>fct_lump()</code>: Collapsing the least/most frequent values of a factor into “other”.</li>
</ul>
<p>Examples of each of these can be found in the <a href="https://forcats.tidyverse.org/articles/forcats.html">forcats vignette</a> or the <a href="(https://r4ds.had.co.nz/factors.html)">factors chapter</a> of R for data science.</p>
</section>
<section id="be-aware-strings" class="level2">
<h2 class="anchored" data-anchor-id="be-aware-strings">Be Aware: Strings</h2>
<p>Working with and analysing text data is a skill unto itself. However, it is useful to be able to do some basic manipulation of character strings programatically.</p>
<p>Because R was developed as a statistical programming language, it is well suited to the computational and modelling aspects of working with text data but the base R string manipulation functions can be a bit unwieldy at times.</p>
<p>The <code>{stringr}</code> package aims to combat this by providing useful helper functions for a range of text management problems. Even when not analysing text data these can be useful, for example to remove prefixes on a lot of column names.</p>
<div class="cell">
<div class="cell-output cell-output-stderr">
<pre><code>Warning: `as_data_frame()` was deprecated in tibble 2.0.0.
ℹ Please use `as_tibble()` instead.
ℹ The signature and semantics have changed, see `?as_tibble`.</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if
`.name_repair` is omitted as of tibble 2.0.0.
ℹ Using compatibility `.name_repair`.
ℹ The deprecated feature was likely used in the tibble package.
  Please report the issue at &lt;]8;;https://github.com/tidyverse/tibble/issueshttps://github.com/tidyverse/tibble/issues]8;;&gt;.</code></pre>
</div>
</div>
<p>Suppose we wanted to keep only the text following an underscore in these column names. We could do that by using a regular expression to extract lower-case or upper-case letters which follow an underscore.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb84-1"><span class="fu" style="color: #4758AB;">head</span>(poorly_named_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 11
  observatio…¹   V1_A   V2_B   V3_C    V4_D    V5_E   V6_F   V7_G   V8_H    V9_I
         &lt;int&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;
1            1 -0.199 -0.729  1.14   0.0205 -0.714  -1.14  0.786  -0.926 -0.740 
2            2 -0.956 -1.71  -0.184  1.44   -1.97   -0.470 0.0393  1.42  -2.49  
3            3  0.585 -1.06  -1.43   0.361   0.0141  0.585 1.01   -1.90  -0.0825
4            4  0.624  1.17   0.263  1.72   -0.0808  0.707 1.93   -0.675  0.448 
5            5  0.425 -0.190 -0.360 -0.443   0.134  -0.339 0.0577  1.21  -1.38  
6            6  0.169  1.40   1.82  -0.999   1.14   -0.377 0.471   0.934  0.604 
# … with 1 more variable: V10_J &lt;dbl&gt;, and abbreviated variable name
#   ¹​observation_id</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb86-1">stringr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">str_extract</span>(<span class="fu" style="color: #4758AB;">names</span>(poorly_named_df), <span class="at" style="color: #657422;">pattern =</span> <span class="st" style="color: #20794D;">"(?&lt;=_)([a-zA-Z]+)"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "id" "A"  "B"  "C"  "D"  "E"  "F"  "G"  "H"  "I"  "J" </code></pre>
</div>
</div>
<p>Alternatively, can avoid using regular expressions. We can split each column name at the underscore and keep only the second part of each string.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb88-1"><span class="co" style="color: #5E5E5E;"># split column names at underscores and inspect structure of resuting object</span></span>
<span id="cb88-2">split_strings <span class="ot" style="color: #003B4F;">&lt;-</span> stringr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">str_split</span>(<span class="fu" style="color: #4758AB;">names</span>(poorly_named_df), <span class="at" style="color: #657422;">pattern =</span> <span class="st" style="color: #20794D;">"_"</span>)</span>
<span id="cb88-3"><span class="fu" style="color: #4758AB;">str</span>(split_strings)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>List of 11
 $ : chr [1:2] "observation" "id"
 $ : chr [1:2] "V1" "A"
 $ : chr [1:2] "V2" "B"
 $ : chr [1:2] "V3" "C"
 $ : chr [1:2] "V4" "D"
 $ : chr [1:2] "V5" "E"
 $ : chr [1:2] "V6" "F"
 $ : chr [1:2] "V7" "G"
 $ : chr [1:2] "V8" "H"
 $ : chr [1:2] "V9" "I"
 $ : chr [1:2] "V10" "J"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb90-1"><span class="co" style="color: #5E5E5E;"># keep only the second element of each character vector in the list</span></span>
<span id="cb90-2">purrr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">map_chr</span>(split_strings, <span class="cf" style="color: #003B4F;">function</span>(x){x[<span class="dv" style="color: #AD0000;">2</span>]})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "id" "A"  "B"  "C"  "D"  "E"  "F"  "G"  "H"  "I"  "J" </code></pre>
</div>
</div>
<p>Again, unless you plan to work extensively with text data, I would recommend that you look up such string manipulations as you need them. The <a href="https://r4ds.had.co.nz/strings.html#strings">strings</a> section of R for Data Science is a useful starting point.</p>
</section>
<section id="be-aware-date-times" class="level2">
<h2 class="anchored" data-anchor-id="be-aware-date-times">Be Aware: Date-Times</h2>
<p>Remember all the fuss we made about storing dates in the ISO standard format? That was because dates and times are complicated enough to work with before adding extra ambiguity.</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Ctext%7BYYYY%7D%20-%20%5Ctext%7BMM%7D%20-%20%5Ctext%7BDD%7D"></p>
<p>Dates, times and time intervals have to reconcile two factors: the physical orbit of the Earth around the sun and the social and geopolitical mechanisms that determine how we measure and record the passing of time. This makes the history of date and time records fascinating and can make working with this type of data complicated.</p>
<p>Moving from larger to smaller time spans: leap years alter the number of days in a year, months are of variable length (with February’s length changing from year to year). If your data are measured in a place that uses daylight saving, then one day a year will be 23 hours long and another will be 25 hours long. To make things worse, the dates and the hour at which the clocks change are not uniform across countries, which might be in distinct time zones that themselves change over time.</p>
<p>Even at the level of minutes and seconds we aren’t safe - since the Earth’s orbit is gradually slowing down a leap second is added approximately every 21 months. Nor are things any better when looking at longer time scales or across cultures, where we might have to account for different calendars: months are added removed and altered over time, other calendar systems still take different approaches to measuring time and using different units and origin points.</p>
<p>With all of these issues you have to be very careful when working with date and time data. Functions to help you with this can be found in the <code>{lubridate}</code> package, with examples in the <a href="https://r4ds.had.co.nz/dates-and-times.html#dates-and-times">dates and times</a> chapter of R for data science.</p>
<!--
- How many days are there in a year? (365-366)
- How many months days are there in a month? (28-31)
- How many hours are there in a day? (23-25)
- How many seconds are there in a minute? (60-61)
- What calendar are you using?
  - How many months are there in the year? 
  - When does a year begin?
-->
</section>
<section id="be-aware-relational-data" class="level2">
<h2 class="anchored" data-anchor-id="be-aware-relational-data">Be Aware: Relational Data</h2>
<p>When the data you need are stored across two or more data frames you need to be able to cross-reference those and match up values for observational unit. This sort of data is know as relational data, and is used extensively in data science.</p>
<p>The variables you use to match observational units across data frames are known as <em>keys</em>. The primary key belongs to the first table and the foreign key belongs to the secondary table. There are various ways to join these data frames, depending on if you want to retain.</p>
<section id="join-types" class="level4">
<h4 class="anchored" data-anchor-id="join-types">Join types</h4>
<p>You might want to keep only observational units that have key variables values in both data frames, this is known as an inner join.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.zakvarty.com/blog/2023-01-06-data-wrangling/join-inner.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Inner join diagram. Source: R for Data Science</figcaption><p></p>
</figure>
</div>
<p>You might instead want to keep all units from the primary table but pad with NAs where there is not a corresponding foreign key in the second table. This results in an <strong>(outer) left-join</strong>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.zakvarty.com/blog/2023-01-06-data-wrangling/join-left-right-full.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Diagram for left, right and outer joins. Source: R for Data Science</figcaption><p></p>
</figure>
</div>
<p>Conversely, you might keep all units from the second table but pad with NAs where there is not a corresponding foreign key in the primary table. This is imaginatively named an <strong>(outer) right-join</strong>.</p>
<p>The final common join type is an outer join, in which all observational units from either table are retained and all missing values are padded with NAs. This is known as an <strong>(outer) full join</strong>.</p>
<p>Things get more complicated when keys do not uniquely identify observational units in one or both tables. I’d recommend you start exploring these ideas with the <a href="">relational data</a> chapter of R for Data Science.</p>
</section>
<section id="why-and-where-to-learn-more" class="level4">
<h4 class="anchored" data-anchor-id="why-and-where-to-learn-more">Why and where to learn more</h4>
<p>Working with relational data is essential to getting any data science up and running out in the wilds of reality. This is because businesses and companies don’t store all of their data in a huge single csv file. For one this isn’t very efficient, because most cells would be empty. Secondly, it’s not a very secure approach, since you can’t grant partial access to the data. That’s why information is usually stored in many data frames (more generically known as tables) within one or more databases.</p>
<p>These data silos are created, maintained, accessed and destroyed using a relational data base management system. These management systems use code to manage and access the stored data, just like we have seen in the dplyr commands above. You might well have heard of the SQL programming language (and its many variants), which is a popular language for data base management and is the inspiration for the dplyr package and verbs.</p>
<p>If you’d like to learn more then there are many excellent introductory SQL books and courses, I’d recommend picking one that focuses on data analysis or data science unless you really want to dig into efficient storage and querying of databases.</p>
</section>
</section>
<section id="wrapping-up" class="level2">
<h2 class="anchored" data-anchor-id="wrapping-up">Wrapping up</h2>
<p>We have:</p>
<ul>
<li><p>Learned how to wrangle tabular data in R with <code>{dplyr}</code></p></li>
<li><p>Met the idea of relational data and <code>{dplyr}</code>’s relationship to SQL</p></li>
<li><p>Become aware of some tricky data types and packages that can help.</p></li>
</ul>


</section>

<div id="quarto-appendix"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{varty2023,
  author = {Zak Varty},
  title = {Data {Wrangling}},
  date = {2023-01-06},
  url = {https://www.zakvarty.com/blog/2023-01-06-data-wrangling},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-varty2023" class="csl-entry quarto-appendix-citeas">
Zak Varty. 2023. <span>“Data Wrangling.”</span> January 6, 2023. <a href="https://www.zakvarty.com/blog/2023-01-06-data-wrangling">https://www.zakvarty.com/blog/2023-01-06-data-wrangling</a>.
</div></div></section></div> ]]></description>
  <category>data science</category>
  <category>data wrangling</category>
  <category>tutorial</category>
  <guid>https://www.zakvarty.com/blog/2023-01-06-data-wrangling/index.html</guid>
  <pubDate>Fri, 06 Jan 2023 00:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2023-01-06-data-wrangling/horst-wrangle-monsters.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Aquiring Data via an API</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/index.html</link>
  <description><![CDATA[ 



<section id="aquiring-data-part-2---using-apis" class="level2">
<h2 class="anchored" data-anchor-id="aquiring-data-part-2---using-apis">Aquiring Data: Part 2 - Using APIs</h2>
<div class="medium_right">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/apis-and-httr.png" alt="The text APIs and httr, written on a black hexagon."></p>
</div>
<p>You can’t always rely on tidy, tabular data to land on your desk. Sometimes you are going to have to go out and gather data for yourself.</p>
<p>I’m not suggesting you will need to do this manually, but you will likely need to get data from the internet that’s been made publicly or privately available to you.</p>
<p>This might be information from a webpage that you gather yourself, or data shared with you by a collaborator using an API.</p>
<p>In this second blog post we will cover the basics of obtaining data via an API. This material draws together the <a href="https://zapier.com/learn/apis/">Introduction to APIs</a> book by Brian Cooksey and the <a href="https://stat545.com/diy-web-data.html#interacting-with-an-api">DIY web data</a> section of STAT545 at the University of British Columbia.</p>
</section>
<section id="why-do-i-need-to-know-about-apis" class="level2">
<h2 class="anchored" data-anchor-id="why-do-i-need-to-know-about-apis">Why do I need to know about APIs?</h2>
<blockquote class="blockquote">
<p>An API, or application programming interface, is a set of rules that allows different software applications to communicate with each other.</p>
</blockquote>
<p>As a data scientist, you will often need to access data that is stored on remote servers or in cloud-based services. APIs provide a convenient way for data scientists to programmatically retrieve this data, without having to manually download data sets or and process them locally on their own computer.</p>
<p>This has multiple benefits including automation and standardisation of data sharing.</p>
<ul>
<li><p><strong>Automation:</strong> It is much faster for a machine to process a data request than a human. Having a machine handling data requests also scales much better as either the number or the complexity of data requests grows. Additionally, there is a lower risk of introducing human error. For example, a human might accidentally share the wrong data, which can have serious legal repercussions.</p></li>
<li><p><strong>Standardisation:</strong> Having a machine process data requests requires the format of these requests and the associated responses to be standardised. This allows data sharing and retrieval to become a reproducible and programmatic aspect of our work.</p></li>
</ul>
</section>
<section id="what-is-an-api" class="level2">
<h2 class="anchored" data-anchor-id="what-is-an-api">What is an API?</h2>
<p>So then, if APIs are so great, what exactly are they?</p>
<p>In human-to-human communication, the set of rules governing acceptable behaviour is known as etiquette. Depending on when or where you live, social etiquette can be rather strict. The rules for computer-to-computer communication take this to a whole new level, because with machines there can be no room left for interpretation.</p>
<p>The set of rules governing interactions between computers or programmes is known as a <strong>protocol</strong>.</p>
<p>APIs provide a standard protocol for different programs to interact with one another. This makes it easier for developers to build complex systems by leveraging the functionality of existing services and platforms. The benefits of working in a standardised and modular way apply equally well to sharing data as they do to writing code or organising files.</p>
<p>There are two sides to communication and when <em>machines</em> communicate these are known as the <strong>server</strong> and the <strong>client</strong>.</p>
<div class="medium_right">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/server-schematic.png" alt="Schematic diagram representing a computer server. Text above reads 'Servers: don't fear a computer with no screen'."></p>
</div>
<p>Servers can seem intimidating, because unlike your laptop or mobile phone they don’t have their own input and output devices; they have no keyboard, no monitor, and no a mouse. Despite this, servers are just regular computers that are designed to store data and run programmes. Servers don’t have their own input or output devices because they are intended to be used <em>remotely</em>, via another computer. There is no need for a screen or a mouse if the user is miles away. Nothing scary going on here!</p>
<p>People often find clients much less intimidating - they are simply any other computer or application that might contact the sever.</p>
</section>
<section id="http" class="level2">
<h2 class="anchored" data-anchor-id="http">HTTP</h2>
<p>This leads us one step further down the rabbit-hole. An API is a protocol that defines the rules of how applications communicate with one another. But how does this communication happen?</p>
<p>HTTP (Hypertext Transfer Protocol) is the dominant mode communication on the World Wide Web. You can see the secure version of HTTP, HTTPS, at the start of most web addresses up at the top of your browser. For example:</p>
<pre class="http"><code>https://www.zakvarty.com/blog</code></pre>
<p>HTTP is the foundation of data communication on the web and is used to transfer files (such as text, images, and videos) between web servers and clients.</p>
<div class="medium_left">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/request-response.png" alt="Schematic diagram showing a request being sent from a client to a server, which returns a response."></p>
</div>
<p>To understand HTTP communications, I find it helpful to imagine the client and the server as being a customer and a waiter at a restaurant. The client makes some request to the server, which then tries to comply before giving a response. The server might respond to confirm that the request was completed successfully. Alternatively, the server might respond with an error message, which is (hopefully) informative about why the request could not be completed.</p>
<p>This request-response model is the basis for HTTP, the communication system used by the majority of APIs.</p>
</section>
<section id="http-requests" class="level2">
<h2 class="anchored" data-anchor-id="http-requests">HTTP Requests</h2>
<p>An HTML request consists of:</p>
<ul>
<li>Uniform Resource Locator (URL) [unique identifier for a thing]</li>
<li>Method [tells server the type of action requested by client]</li>
<li>Headers [meta-information about request, e.g.&nbsp;device type]</li>
<li>Body [Data the client wants to send to the server]</li>
</ul>
<div class="medium_right">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/html-request.png" alt="Schematic diagram showing the structure of an HTML request, composed of: a URL, method, headers and body."></p>
</div>
<section id="url" class="level3">
<h3 class="anchored" data-anchor-id="url">URL</h3>
<p>The URL in a HTTP request specifies where that request is going to be made, for example <code>http://example.com</code>.</p>
</section>
<section id="method" class="level3">
<h3 class="anchored" data-anchor-id="method">Method</h3>
<p>The action that the client wants to take is indicated by a set of well-defined methods or HTTP verbs. The most common HTTP verbs are <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>PATCH</code>, and <code>DELETE</code>.</p>
<p>The <code>GET</code> verb is used to retrieve a resource from the server, such as a web page or an image. The <code>POST</code> verb is used to send data to the server, such as when submitting a form or uploading a file. The <code>PUT</code> verb is used to replace a resource on the server with a new one, while the <code>PATCH</code> verb is used to update a resource on the server without replacing it entirely. Finally, the <code>DELETE</code> verb is used to delete a resource from the server.</p>
<p>In addition to these common HTTP verbs, there are also several less frequently used verbs. These are used for specialized purposes, such as requesting only the headers of a resource, or testing the connectivity between the client and the server.</p>
</section>
<section id="header" class="level3">
<h3 class="anchored" data-anchor-id="header">Header</h3>
<p>The request headers contain meta-information about the request. This is where information about the device type would be included within the request.</p>
</section>
<section id="body" class="level3">
<h3 class="anchored" data-anchor-id="body">Body</h3>
<p>Finally, the body of the request contains the data that the client is providing to the server.</p>
</section>
</section>
<section id="http-responses" class="level2">
<h2 class="anchored" data-anchor-id="http-responses">HTTP Responses</h2>
<p>When the server receives a request it will attempt to fulfil it and then send a response back to the client.</p>
<div class="medium_left">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/html-response.png" alt="Schematic diagram showing the structure of an HTML response, composed of: a status code, headers and body."></p>
</div>
<p>A response has a similar structure to a request apart from:</p>
<ul>
<li>responses <strong>do not have</strong> a URL,</li>
<li>responses <strong>do not have</strong> a method,</li>
<li>responses <strong>have</strong> a status code.</li>
</ul>
<section id="status-codes" class="level3">
<h3 class="anchored" data-anchor-id="status-codes">Status Codes</h3>
<p>The status code is a 3 digit number, each of which has a specific meaning. Some common error codes that you might (already have) come across are:</p>
<ul>
<li>200: Success,</li>
<li>404: Page not found (all 400s are errors),</li>
<li>503: Page down.</li>
</ul>
<p>In a data science context, a successful response will return the requested data within the data field. This will most likely be given in JSON or XML format.</p>
</section>
</section>
<section id="authentication" class="level2">
<h2 class="anchored" data-anchor-id="authentication">Authentication</h2>
<p>Now that we know <em>how</em> applications communicate, you might ask how we can control who has access to the API and what types of request they can make. This can be done by the server setting appropriate permissions for each client. But then how does the server verify that the client is really who is claims to be?</p>
<p><strong>Authentication</strong> is a way to ensure that only authorized clients are able to access an API. This is typically done by the server requiring each client to provide some secret information that uniquely identifies them, whenever they make requests to the API. This information allows the API server to validate the authenticity this user before it authorises the request.</p>
<section id="basic-authentication" class="level3">
<h3 class="anchored" data-anchor-id="basic-authentication">Basic Authentication</h3>
<p>There are various ways to implement API authentication.</p>
<p>Basic authentication involves each legitimate client having a username and password. An encrypted version of these is included in the <code>Authorization</code> header of the HTTP request. If the hear matches with the server’s records then the request is processed. If not, then a special status code (401) is returned to the client.</p>
<p>Basic authentication is dangerous because it does not put any restrictions on what a client can do once they are authorised. Additional, individualised restrictions can be added by using an alternative authentication scheme.</p>
</section>
<section id="api-key-authentication" class="level3">
<h3 class="anchored" data-anchor-id="api-key-authentication">API Key Authentication</h3>
<p>An API key is long, random string of letters and numbers that is assigned to each authorised user. An API key is distinct from the user’s password and keys are typically issued by the service that provides an API. Using keys rather than basic authentication allows the API provider to track and limit the usage of their API.</p>
<p>For example, a provider may issue a unique API key to each developer or organization that wants to use the API. The provider can then limit access to certain data. They could also limit the number of requests that each key can make in a given time period or prevent access to certain administrative functions, like changing passwords or deleting accounts.</p>
<p>Unlike Basic Authentication, there is no standard way of a client sharing a key with the server. Depending on the API this might be in the <code>Authorization</code> field of the header, at the end of the URL (<code>http://example.com?api_key=my_secret_key</code>), or within the body of the data.</p>
</section>
</section>
<section id="api-wrappers" class="level2">
<h2 class="anchored" data-anchor-id="api-wrappers">API wrappers</h2>
<p>We’ve learned a lot about how the internet works. Fortunately, a lot of the time we won’t have to worry about all of that new information other than for debugging purposes.</p>
<p>In the best case scenario, a very kind developer has written a “wrapper” function for the API. These wrappers are functions in R that will construct the HTML request for you. If you are particularly lucky, the API wrapper will also format the response for you, converting it from XML or JSON back into an R object that is ready for immediate use.</p>
</section>
<section id="geonames-wrapper" class="level2">
<h2 class="anchored" data-anchor-id="geonames-wrapper"><code>{geonames}</code> wrapper</h2>
<p><a href="https://ropensci.org/">rOpenSci</a> has a curated list of many wrappers for accessing scientific data using R. We will focus on the <a href="https://www.geonames.org/">GeoNames API</a>, which gives open access to a geographical database. To access this data, we will use wrapper functions provided by the <code>{geonames}</code> <a href="https://docs.ropensci.org/geonames/">package</a>.</p>
<p>The aim here is to illustrate the important steps of getting started with a new API.</p>
<section id="set-up" class="level3">
<h3 class="anchored" data-anchor-id="set-up">Set up</h3>
<p>Before we can get any data from the GeoNames API, we first need to do a little bit of set up.</p>
<ol type="1">
<li>Install and load <code>{geonames}</code> from CRAN</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;">#install.packages("geonames")</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">library</span>(geonames)</span></code></pre></div>
</div>
<ol start="2" type="1">
<li>Create a user account for the GeoNames API</li>
</ol>
<p><img style="border-radius: 0%;" src="https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/sign-up.png" alt="Screenshot of the GeoNames login page. Example text has been added in the fields to create a new user account."></p>
<ol start="3" type="1">
<li>Activate the account (see activation email)</li>
</ol>
<p><img style="border-radius: 0%;" src="https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/confirmation-email.png" alt="Screenshot of the GeoNames confirmation email, which gives a link to click in order to confirm the new account."></p>
<ol start="4" type="1">
<li><p>Enable the free web services for your GeoNames account by logging in at this <a href="http://www.geonames.org/enablefreewebservice">link</a>.</p></li>
<li><p>Tell R your credentials for GeoNames.</p></li>
</ol>
<div class="callout-warning callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>We could use the following code to tell R our credentials, but we absolutely should not.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">options</span>(<span class="at" style="color: #657422;">geonamesUsername=</span><span class="st" style="color: #20794D;">"example_username"</span>)</span></code></pre></div>
</div>
<p>This would save our username as an environment variable, but it <em>also</em> puts our API credentials directly into the script. If we share the script with our others (internally, externally or publicly) we would be sharing our credentials too. Not good!</p>
</div>
</div>
</section>
</section>
<section id="keep-it-secret-keep-it-safe" class="level2">
<h2 class="anchored" data-anchor-id="keep-it-secret-keep-it-safe">Keep it Secret, Keep it Safe</h2>
<p>The solution to this problem is to add our credentials as environment variables in our <code>.Rprofile</code> rather than in this script. The <code>.Rprofile</code> is an R script that is run at the start of every session. IT can be created and edited directly, but can also be created and edited from within R.</p>
<p>To make/open your <code>.Rprofile</code> use the <code>edit_r_profile()</code> function from the <code>{usethis}</code> package.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">library</span>(usethis)</span>
<span id="cb4-2">usethis<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">edit_r_profile</span>()</span></code></pre></div>
</div>
<p>Within this file, add <code>options(geonamesUsername="example_username")</code> on a new line, remembering to replace <code>example_username</code> with your own GeoNames username.</p>
<p>The final step is to <strong>check this this file ends with a blank line</strong>, save it and restart R. Then we are all set to start using <code>{geonames}</code>.</p>
<p>This set up procedure is indicative of most API wrappers, but of course the details will vary between each API. This is why good documentation is important!</p>
</section>
<section id="using-geonames" class="level2">
<h2 class="anchored" data-anchor-id="using-geonames">Using <code>{geonames}</code></h2>
<p>GeoNames has a whole host of <a href="http://www.geonames.org/export/ws-overview.html">different geo-datasets</a> that you can explore. As a first example, let’s get all of the geo-tagged wikipedia articles that are within 1km of Imperial College London.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">imperial_coords <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">lat =</span> <span class="fl" style="color: #AD0000;">51.49876</span>, <span class="at" style="color: #657422;">lon =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.1749</span>)</span>
<span id="cb5-2">search_radius_km <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb5-3"></span>
<span id="cb5-4">imperial_neighbours <span class="ot" style="color: #003B4F;">&lt;-</span> geonames<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">GNfindNearbyWikipedia</span>(</span>
<span id="cb5-5">  <span class="at" style="color: #657422;">lat =</span> imperial_coords<span class="sc" style="color: #5E5E5E;">$</span>lat,</span>
<span id="cb5-6">  <span class="at" style="color: #657422;">lng =</span> imperial_coords<span class="sc" style="color: #5E5E5E;">$</span>lon, </span>
<span id="cb5-7">  <span class="at" style="color: #657422;">radius =</span> search_radius_km,</span>
<span id="cb5-8">  <span class="at" style="color: #657422;">lang =</span> <span class="st" style="color: #20794D;">"en"</span>,                <span class="co" style="color: #5E5E5E;"># english language articles</span></span>
<span id="cb5-9">  <span class="at" style="color: #657422;">maxRows =</span> <span class="dv" style="color: #AD0000;">500</span>              <span class="co" style="color: #5E5E5E;"># maximum number of results to return </span></span>
<span id="cb5-10">)</span></code></pre></div>
</div>
<p>Looking at the structure of <code>imperial_neighbours</code> we can see that it is a data frame with one row per geo-tagged wikipedia article.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">str</span>(imperial_neighbours)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   204 obs. of  13 variables:
 $ summary     : chr  "The Department of Mechanical Engineering is responsible for teaching and research in mechanical engineering at "| __truncated__ "Imperial College Business School is a global business school located in London. The business school was opened "| __truncated__ "Exhibition Road is a street in South Kensington, London which is home to several major museums and academic est"| __truncated__ "Imperial College School of Medicine (ICSM) is the medical school of Imperial College London in England, and one"| __truncated__ ...
 $ elevation   : chr  "20" "18" "19" "24" ...
 $ feature     : chr  "edu" "edu" "landmark" "edu" ...
 $ lng         : chr  "-0.1746" "-0.1748" "-0.17425" "-0.1757" ...
 $ distance    : chr  "0.0335" "0.0494" "0.0508" "0.0558" ...
 $ rank        : chr  "81" "91" "90" "96" ...
 $ lang        : chr  "en" "en" "en" "en" ...
 $ title       : chr  "Department of Mechanical Engineering, Imperial College London" "Imperial College Business School" "Exhibition Road" "Imperial College School of Medicine" ...
 $ lat         : chr  "51.498524" "51.4992" "51.4989722222222" "51.4987" ...
 $ wikipediaUrl: chr  "en.wikipedia.org/wiki/Department_of_Mechanical_Engineering%2C_Imperial_College_London" "en.wikipedia.org/wiki/Imperial_College_Business_School" "en.wikipedia.org/wiki/Exhibition_Road" "en.wikipedia.org/wiki/Imperial_College_School_of_Medicine" ...
 $ countryCode : chr  NA "AE" NA "GB" ...
 $ thumbnailImg: chr  NA NA NA NA ...
 $ geoNameId   : chr  NA NA NA NA ...</code></pre>
</div>
</div>
<p>To confirm we have the correct location we can inspect the title of the first five neighbours.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">imperial_neighbours<span class="sc" style="color: #5E5E5E;">$</span>title[<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Department of Mechanical Engineering, Imperial College London"             
[2] "Imperial College Business School"                                          
[3] "Exhibition Road"                                                           
[4] "Imperial College School of Medicine"                                       
[5] "Department of Civil and Environmental Engineering, Imperial College London"</code></pre>
</div>
</div>
<p>Nothing too surprising here, mainly departments of the college and Exhibition Road, which runs along one side of the campus. These sorts of check are important - I initially forgot the minus in the longitude and was getting results in East London!</p>
</section>
<section id="what-if-there-is-no-wrapper" class="level2">
<h2 class="anchored" data-anchor-id="what-if-there-is-no-wrapper">What if there is no wrapper?</h2>
<p>If there is not a wrapper function, we can still access APIs fairly easilty using the <code>{httr}</code> package.</p>
<p>We will look at an example using <a href="http://www.omdbapi.com/">OMDb</a>, which is an open source version of <a href="https://www.imdb.com/">IMDb</a>, to get information about the movie Mean Girls.</p>
<p>To use the OMDB API you will once again need to <a href="http://www.omdbapi.com/apikey.aspx">request a free API key</a>, follow a verification link and add your API key to your <code>.Rprofile</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># Add this to .Rprofile, pasting in your own API key</span></span>
<span id="cb10-2"><span class="fu" style="color: #4758AB;">options</span>(<span class="at" style="color: #657422;">OMDB_API_Key =</span> <span class="st" style="color: #20794D;">"PASTE YOUR KEY HERE"</span>)</span></code></pre></div>
</div>
<p>You can then restart R and safely access your API key from within your R session.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># Load your API key into the current R session,</span></span>
<span id="cb11-2">ombd_api_key <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">getOption</span>(<span class="st" style="color: #20794D;">"OMDB_API_Key"</span>)</span></code></pre></div>
</div>
<p>Using the documentation for the API, requests have URLs of the following form, where terms in angular brackets should be replaced by you.</p>
<pre><code>http://www.omdbapi.com/?t=&lt;TITLE&gt;&amp;y=&lt;YEAR&gt;&amp;plot=&lt;LENGTH&gt;&amp;r=&lt;FORMAT&gt;&amp;apikey=&lt;API_KEY&gt;</code></pre>
<p>With a little bit of effort, we can write a function that composes this type of request URL for us. We will using the <code>{glue}</code> package to help us join strings together.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;">#' Compose search requests for the OMBD API</span></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;">#'</span></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;">#' @param title String defining title to search for. Words are separated by "+".</span></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;">#' @param year String defining release year to search for</span></span>
<span id="cb13-5"><span class="co" style="color: #5E5E5E;">#' @param plot String defining whether "short" or "full" plot is returned</span></span>
<span id="cb13-6"><span class="co" style="color: #5E5E5E;">#' @param format String defining return format. One of "json" or "xml"</span></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;">#' @param api_key String defining your OMDb API key.</span></span>
<span id="cb13-8"><span class="co" style="color: #5E5E5E;">#'</span></span>
<span id="cb13-9"><span class="co" style="color: #5E5E5E;">#' @return String giving a OMBD search request URL</span></span>
<span id="cb13-10"><span class="co" style="color: #5E5E5E;">#'</span></span>
<span id="cb13-11"><span class="co" style="color: #5E5E5E;">#' @examples </span></span>
<span id="cb13-12"><span class="co" style="color: #5E5E5E;">#' omdb_url("mean+girls", "2004", "short", "json", getOption(OMBD_API_Key))</span></span>
<span id="cb13-13"><span class="co" style="color: #5E5E5E;">#' </span></span>
<span id="cb13-14">omdb_url <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(title, year, plot, format, api_key) {</span>
<span id="cb13-15">  glue<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">glue</span>(<span class="st" style="color: #20794D;">"http://www.omdbapi.com/?t={title}&amp;y={year}&amp;plot={plot}&amp;r={format}&amp;apikey={api_key}"</span>)</span>
<span id="cb13-16">}</span></code></pre></div>
</div>
<p>Running the example we get:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">mean_girls_request <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">omdb_url</span>(</span>
<span id="cb14-2">  <span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"mean+girls"</span>,</span>
<span id="cb14-3">  <span class="at" style="color: #657422;">year =</span>  <span class="st" style="color: #20794D;">"2004"</span>,</span>
<span id="cb14-4">  <span class="at" style="color: #657422;">plot =</span> <span class="st" style="color: #20794D;">"short"</span>,</span>
<span id="cb14-5">  <span class="at" style="color: #657422;">format =</span>  <span class="st" style="color: #20794D;">"json"</span>,</span>
<span id="cb14-6">  <span class="at" style="color: #657422;">api_key =</span>  <span class="fu" style="color: #4758AB;">getOption</span>(<span class="st" style="color: #20794D;">"OMDB_API_Key"</span>))</span></code></pre></div>
</div>
<p>We can then use the <code>{httr}</code> package to construct our request and store the response we get.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">response <span class="ot" style="color: #003B4F;">&lt;-</span> httr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">GET</span>(<span class="at" style="color: #657422;">url =</span> mean_girls_request)</span>
<span id="cb15-2">httr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">status_code</span>(response)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 200</code></pre>
</div>
</div>
<p>Thankfully it was a success! If you get a 401 error code here, check that you have clicked the activation link for your API key.</p>
<p>The full structure of the response is quite complicated, but we can easily extract the requested data using <code>content()</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">httr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">content</span>(response)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$Title
[1] "Mean Girls"

$Year
[1] "2004"

$Rated
[1] "PG-13"

$Released
[1] "30 Apr 2004"

$Runtime
[1] "97 min"

$Genre
[1] "Comedy"

$Director
[1] "Mark Waters"

$Writer
[1] "Rosalind Wiseman, Tina Fey"

$Actors
[1] "Lindsay Lohan, Jonathan Bennett, Rachel McAdams"

$Plot
[1] "Cady Heron is a hit with The Plastics, the A-list girl clique at her new school, until she makes the mistake of falling for Aaron Samuels, the ex-boyfriend of alpha Plastic Regina George."

$Language
[1] "English, German, Vietnamese, Swahili"

$Country
[1] "United States, Canada"

$Awards
[1] "7 wins &amp; 25 nominations"

$Poster
[1] "https://m.media-amazon.com/images/M/MV5BMjE1MDQ4MjI1OV5BMl5BanBnXkFtZTcwNzcwODAzMw@@._V1_SX300.jpg"

$Ratings
$Ratings[[1]]
$Ratings[[1]]$Source
[1] "Internet Movie Database"

$Ratings[[1]]$Value
[1] "7.1/10"


$Ratings[[2]]
$Ratings[[2]]$Source
[1] "Rotten Tomatoes"

$Ratings[[2]]$Value
[1] "84%"


$Ratings[[3]]
$Ratings[[3]]$Source
[1] "Metacritic"

$Ratings[[3]]$Value
[1] "66/100"



$Metascore
[1] "66"

$imdbRating
[1] "7.1"

$imdbVotes
[1] "385,107"

$imdbID
[1] "tt0377092"

$Type
[1] "movie"

$DVD
[1] "21 Sep 2004"

$BoxOffice
[1] "$86,058,055"

$Production
[1] "N/A"

$Website
[1] "N/A"

$Response
[1] "True"</code></pre>
</div>
</div>
</section>
<section id="wrapping-up" class="level2">
<h2 class="anchored" data-anchor-id="wrapping-up">Wrapping up</h2>
<p>We have learned a bit more about how the internet works, the benefits of using an API to share data and how to request data from Open APIs.</p>
<p>When obtaining data from the internet it’s vital that you keep your credentials safe, and that don’t do more work than is needed.</p>
<ul>
<li><p>Keep your API keys out of your code. Store them in your <code>.Rprofile</code> (and make sure this is not under version control!)</p></li>
<li><p>Scraping is always a last resort. Is there an API already?</p></li>
<li><p>Writing your own code to access an API can be more painful than necessary.</p></li>
<li><p>Don’t repeat other people, if a suitable wrapper exists then use it.</p></li>
</ul>


</section>

<div id="quarto-appendix"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{varty2022,
  author = {Zak Varty},
  title = {Aquiring {Data} via an {API}},
  date = {2022-12-14},
  url = {https://www.zakvarty.com/blog/2022-12-14-apis-and-httr},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-varty2022" class="csl-entry quarto-appendix-citeas">
Zak Varty. 2022. <span>“Aquiring Data via an API.”</span> December 14,
2022. <a href="https://www.zakvarty.com/blog/2022-12-14-apis-and-httr">https://www.zakvarty.com/blog/2022-12-14-apis-and-httr</a>.
</div></div></section></div> ]]></description>
  <category>data science</category>
  <category>data acquisition</category>
  <category>tutorial</category>
  <guid>https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/index.html</guid>
  <pubDate>Wed, 14 Dec 2022 00:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/apis-and-httr.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Git: putting your new feature out into the world.</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2022-12-13-git-remote-branches/index.html</link>
  <description><![CDATA[ 



<div class="small_left">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2022-12-13-git-remote-branches/git-logo.png" alt="git logo. This is a red-orange square with rounded corners, it is rotated by 45 degrees so that it is standing on one corner and has a cut-out design representing a branching graph."></p>
</div>
<p>So you’ve added a new feature to your project. You were responsible and didn’t do this in the <code>main</code> branch. Congrats on being responsible, have some brownie points.</p>
<p>Now how the heck to you get everything moved across and delete your <code>new-feature</code> branch?</p>
<section id="check-that-your-local-main-is-up-to-date." class="level2">
<h2 class="anchored" data-anchor-id="check-that-your-local-main-is-up-to-date.">1. Check that your local <code>main</code> is up to date.</h2>
<p>Be in the <code>main</code> branch and pull any changes to the remote <code>main</code> branch.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;">git</span> checkout main </span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">git</span> pull origin main</span></code></pre></div>
<p>This might require you to resolve some merge conflicts, but these should be pretty straightforward if you are following a branch-and-merge workflow.</p>
</section>
<section id="check-that-you-remote-new-feature-is-up-to-date." class="level2">
<h2 class="anchored" data-anchor-id="check-that-you-remote-new-feature-is-up-to-date.">2. Check that you remote <code>new-feature</code> is up to date.</h2>
<p>We might mess things up while merging. Let’s make sure that if that happens we can get back to this good position with our new feature.</p>
<pre><code>git checkout new-feature
git status</code></pre>
<p>If needed: <code>add</code>, <code>commit</code> and <code>push</code>.</p>
</section>
<section id="merge-any-changes-to-main-into-your-local-new-feature-branch" class="level2">
<h2 class="anchored" data-anchor-id="merge-any-changes-to-main-into-your-local-new-feature-branch">3. Merge any changes to <code>main</code> into your local <code>new-feature</code> branch</h2>
<p>Next, we will make sure we have any changes to <code>main</code> moved across to our local <code>new-feature</code> branch.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="fu" style="color: #4758AB;">git</span> merge main</span></code></pre></div>
<p>This might again require resolving some merge conflicts. Keep calm and take tea breaks are required.</p>
</section>
<section id="commit-and-push-to-remote." class="level2">
<h2 class="anchored" data-anchor-id="commit-and-push-to-remote.">4. Commit and push to remote.</h2>
<p>Now that we have our local <code>new-feature</code> branch compatible with the remote <code>main</code> branch, lets push that to the remote.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="fu" style="color: #4758AB;">git</span> add <span class="op" style="color: #5E5E5E;">&lt;</span>YOUR_FILES_TO_COMMIT<span class="op" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;">git</span> commit <span class="at" style="color: #657422;">-m</span> <span class="st" style="color: #20794D;">"merge changes to main in preparation for PR"</span></span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;">git</span> push</span></code></pre></div>
</section>
<section id="open-a-pull-request-on-github" class="level2">
<h2 class="anchored" data-anchor-id="open-a-pull-request-on-github">5. Open a pull request on Github</h2>
<p>Wait for someone to review approve your new feature (or wait a few hours/days and do it yourself for a solo project).</p>
</section>
<section id="delete-the-local-branch" class="level2">
<h2 class="anchored" data-anchor-id="delete-the-local-branch">6. Delete the local branch</h2>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="fu" style="color: #4758AB;">git</span> checkout main</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;">git</span> branch <span class="at" style="color: #657422;">--delete</span> new-feature</span></code></pre></div>
</section>
<section id="delete-the-remote-branch" class="level2">
<h2 class="anchored" data-anchor-id="delete-the-remote-branch">7. Delete the remote branch</h2>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="fu" style="color: #4758AB;">git</span> push origin <span class="at" style="color: #657422;">--delete</span> new-feature</span></code></pre></div>
<p>On older versions of git (&lt; 1.7.0) you might need to use the alternative syntax below. This is effectively pushing nothing to the new-feature branch of origin.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="fu" style="color: #4758AB;">git</span> push origin :new-feature</span></code></pre></div>
<p>Bam! You did it! Your <code>new-feature</code> is out there in the wild, making the world a marginally better place.</p>


</section>

 ]]></description>
  <category>workflows</category>
  <category>git</category>
  <guid>https://www.zakvarty.com/blog/2022-12-13-git-remote-branches/index.html</guid>
  <pubDate>Tue, 13 Dec 2022 00:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2022-12-13-git-remote-branches/git-logo.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Web Scraping with {rvest}</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2022-12-01-rvest/index.html</link>
  <description><![CDATA[ 



<section id="aquiring-data-part-1---scraping-webpage-data-using-rvest" class="level2">
<h2 class="anchored" data-anchor-id="aquiring-data-part-1---scraping-webpage-data-using-rvest">Aquiring Data: Part 1 - Scraping webpage data using {rvest}</h2>
<div class="medium_right">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2022-12-01-rvest/rvest-logo.png" alt="Hexagonal logo of the rvest package; a sickle cutting wheat on a red background."></p>
</div>
<p>You can’t always rely on tidy, tabular data to land on your desk. Sometimes you are going to have to go out and gather data for yourself.</p>
<p>I’m not suggesting you will need to do this manually, but you will likely need to get data from the internet that’s been made publicly or privately available to you.</p>
<p>This might be information from a webpage that you gather yourself, or data shared with you by a collaborator using an API.</p>
<p>In this first blog post we will cover the basics of scraping webpages, following the <a href="https://cran.r-project.org/web/packages/rvest/vignettes/rvest.html#fnref3">vignette</a> for the {rvest} package.</p>
</section>
<section id="what-is-a-webpage" class="level2">
<h2 class="anchored" data-anchor-id="what-is-a-webpage">What is a webpage?</h2>
<p>Before we can even hope to get data from a webpage, we first need to understand <em>what</em> a webpage is.</p>
<p>Webpages are written in a similar way to LaTeX: the content and styling of webpages are handled separately and are coded using plain text files.</p>
<p>In fact, websites go one step further than LaTeX. The content and styling of websites are written in different files and in different languages. HTML (HyperText Markup Language) is used to write the content and then CSS (Cascading Style Sheets) are used to control the appearance of that content when it’s displayed to the user.</p>
</section>
<section id="html" class="level2">
<h2 class="anchored" data-anchor-id="html">HTML</h2>
<p>A basic HTML page with no styling applied might look something like this:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb1-1"><span class="kw" style="color: #003B4F;">&lt;html&gt;</span></span>
<span id="cb1-2"><span class="kw" style="color: #003B4F;">&lt;head&gt;</span></span>
<span id="cb1-3">  <span class="kw" style="color: #003B4F;">&lt;title&gt;</span>Page title<span class="kw" style="color: #003B4F;">&lt;/title&gt;</span></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;">&lt;/head&gt;</span></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;">&lt;body&gt;</span></span>
<span id="cb1-6">  <span class="kw" style="color: #003B4F;">&lt;h1</span> <span class="er" style="color: #AD0000;">id</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">'first'</span><span class="kw" style="color: #003B4F;">&gt;</span>A level 1 heading<span class="kw" style="color: #003B4F;">&lt;/h1&gt;</span></span>
<span id="cb1-7">  <span class="kw" style="color: #003B4F;">&lt;p&gt;</span>Hello World!<span class="kw" style="color: #003B4F;">&lt;/p&gt;</span></span>
<span id="cb1-8">  <span class="kw" style="color: #003B4F;">&lt;p&gt;</span>Here is some plain text <span class="dv" style="color: #AD0000;">&amp;amp;</span> <span class="kw" style="color: #003B4F;">&lt;b&gt;</span>some bold text.<span class="kw" style="color: #003B4F;">&lt;/b&gt;&lt;/p&gt;</span></span>
<span id="cb1-9">  <span class="kw" style="color: #003B4F;">&lt;img</span> <span class="er" style="color: #AD0000;">src</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">'myimg.png'</span> <span class="er" style="color: #AD0000;">width</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">'100'</span> <span class="er" style="color: #AD0000;">height</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">'100'</span><span class="kw" style="color: #003B4F;">&gt;</span></span>
<span id="cb1-10"><span class="kw" style="color: #003B4F;">&lt;/body&gt;</span></span></code></pre></div>
<section id="html-elements" class="level3">
<h3 class="anchored" data-anchor-id="html-elements">HTML elements</h3>
<!-- for presentation 
```{.html}
#| code-line-numbers: "3"
<html>
<head>
  <title>Page title</title>
</head>
<body>
  <h1 id='first'>A level 1 heading</h1>
  <p>Hello World!</p>
  <p>Here is some plain text &amp; <b>some bold text.</b></p>
  <img src='myimg.png' width='100' height='100'>
</body>
```
-->
<p>Just like XML data files, HTML has a hierarchical structure. This structure is crafted using HTML elements. Each HTML element is made up of of a start tag, optional attributes, an end tag.</p>
<p>We can see each of these in the first level header, where <code>&lt;h1&gt;</code> is the opening tag, <code>id='first'</code> is an additional attribute and <code>&lt;/h1&gt;</code> is the closing tag. Everything between the opening and closing tag are the contents of that element. There are also some special elements that consist of only a single tag and its optional attributes. An example of this is the <code>&lt;img&gt;</code> tag.</p>
<p>Since <code>&lt;</code> and <code>&gt;</code> are used for start and end tags, you can’t write them directly in an HTML document. Instead, you have to use escape characters. This sounds fancy, but it’s just an alternative way to write characters that serve some special function within a language.</p>
<p>You can write greater than <code>&amp;gt;</code> and less than as <code>&amp;lt;</code>. You might notice that those escapes use an ampersand (&amp;). This means that if you want a literal ampersand on your webpage, you have to escape too using <code>&amp;amp;</code>.</p>
<p>There are a wide range of possible HTML tags and escapes. We’ll cover the most common tags in this lecture and you don’t need to worry about escapes too much because <code>{rvest}</code> will automatically handle them for you.</p>
</section>
<section id="important-html-elements" class="level3">
<h3 class="anchored" data-anchor-id="important-html-elements">Important HTML Elements</h3>
<p>In all, there are in excess of 100 HTML elements. The most important ones for you to know about are:</p>
<ul>
<li><p>The <code>&lt;html&gt;</code> element, that must enclose every HTML page. The <code>&lt;html&gt;</code> element must have two child elements within it. The <code>&lt;head&gt;</code> element contains metadata about the document, like the page title that is shown in the browser tab and the CSS style sheet that should be applied. The <code>&lt;body&gt;</code> element then contains all of the content that you see in the browser.</p></li>
<li><p>Block elements are used to give structure to the page. These are elements like headings, sub-headings and so on from <code>&lt;h1&gt;</code> all the way down to <code>&lt;h6&gt;</code>. This category also contains paragraph elements <code>&lt;p&gt;</code>, ordered lists <code>&lt;ol&gt;</code> unordered lists <code>&lt;ul&gt;</code>.</p></li>
<li><p>Finally, inline tags like <code>&lt;b&gt;</code> for bold, <code>&lt;i&gt;</code> for italics, and <code>&lt;a&gt;</code> for hyperlinks are used to format text inside block elements.</p></li>
</ul>
<p>When you come across a tag that you’ve never seen before, you can find out what it does with just a little bit of googling. A good resource here is the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML">MDN Web Docs</a> which are produced by Mozilla, the company that makes the Firefox web browser. The <a href="https://www.w3schools.com/html/default.asp">W3schools website</a> is another great resource for web development and coding resources more generally.</p>
</section>
</section>
<section id="html-attributes" class="level2">
<h2 class="anchored" data-anchor-id="html-attributes">HTML Attributes</h2>
<p>We’ve seen one example of a header with an additional attribute. More generally, all tags can have named attributes. These attributes are contained within the opening tag and look something like:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb2-1"><span class="kw" style="color: #003B4F;">&lt;tag</span> <span class="er" style="color: #AD0000;">attribute1</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">'value1'</span> <span class="er" style="color: #AD0000;">attribute2</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">'value2'</span><span class="kw" style="color: #003B4F;">&gt;</span>element contents<span class="kw" style="color: #003B4F;">&lt;/tag&gt;</span></span></code></pre></div>
<p>Two of the most important attributes are <code>id</code> and <code>class</code>. These attributes are used in conjunction with the CSS file to control the visual appearance of the page. These are often very useful to identify the elements that you are interested in when scraping data off a page.</p>
</section>
<section id="css-selectors" class="level2">
<h2 class="anchored" data-anchor-id="css-selectors">CSS Selectors</h2>
<p>The Cascading Style Sheet is used to describe how your HTML content will be displayed. To do this, CSS has it’s own system for selecting elements of a webpage, called CSS selectors.</p>
<p>CSS selectors define patterns for locating the HTML elements that a particular style should be applied to. A happy side-effect of this is that they can sometimes be very useful for scraping, because they provide a concise way of describing which elements you want to extract.</p>
<p>CSS Selectors can work on the level of an element type, a class, or a tag and these can be used in a nested (or <em>cascading</em>) way.</p>
<ul>
<li><p>The <code>p</code> selector will select all paragraph <code>&lt;p&gt;</code> elements.</p></li>
<li><p>The <code>.title</code> selector will select all elements with class <code>“title”</code>.</p></li>
<li><p>The <code>p.special</code> selector will select all<code>&lt;p&gt;</code> elements with class <code>“special”</code>.</p></li>
<li><p>The <code>#title</code> selector will select the element with the id attribute <code>“title”</code>.</p></li>
</ul>
<p>When you want to select a single element <code>id</code> attributes are particularly useful because that <em>must</em> be unique within a html document. Unfortunately, this is only helpful if the developer added an <code>id</code> attribute to the element(s) you want to scrape!</p>
<p>If you want to learn more CSS selectors I recommend starting with the fun <a href="https://flukeout.github.io/">CSS dinner tutorial</a> to build a base of knowledge and then using the <a href="https://www.w3schools.com/css/default.asp">W3schools resources</a> as a reference to explore more webpages in the wild.</p>
</section>
<section id="which-attributes-and-selectors-do-you-need" class="level2">
<h2 class="anchored" data-anchor-id="which-attributes-and-selectors-do-you-need">Which Attributes and Selectors Do You Need?</h2>
<p>To scrape data from a webpage, you first have to identify the tag and attribute combinations that you are interested in gathering.</p>
<p>To find your elements of interest, you have three options. These go from hardest to easiest but also from most to least robust.</p>
<ul>
<li>right click + “inspect page source” (F12)</li>
<li>right click + “inspect”</li>
<li>Rvest <a href="https://rvest.tidyverse.org/articles/selectorgadget.html">Selector Gadget</a> (very useful but fallible)</li>
</ul>
<p>Inspecting the source of some familiar websites can be a useful way to get your head around these concepts. Beware though that sophisticated webpages can be quite intimidating. A good place to start is with simpler, static websites such as personal websites, rather than the dynamic webpages of online retailers or social media platforms.</p>
</section>
<section id="reading-html-with-rvest" class="level2">
<h2 class="anchored" data-anchor-id="reading-html-with-rvest">Reading HTML with <code>{rvest}</code></h2>
<p>With <code>{rvest}</code>, reading a html page can be as simple as loading in tabular data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">html <span class="ot" style="color: #003B4F;">&lt;-</span> rvest<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">read_html</span>(<span class="st" style="color: #20794D;">"https://www.zakvarty.com/professional/teaching.html"</span>)</span></code></pre></div>
</div>
<p>The <code>class</code> of the resulting object is an <code>xml_document</code>. This type of object is from the low-level package <code>{xml2}</code>, which allows you to read xml files into R.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">class</span>(html)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "xml_document" "xml_node"    </code></pre>
</div>
</div>
<p>We can see that this object is split into several components: first is some metadata on the type of document we have scraped, followed by the head and then the body of that html document.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">html</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{html_document}
&lt;html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en"&gt;
[1] &lt;head&gt;\n&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8 ...
[2] &lt;body class="nav-fixed"&gt;\n\n&lt;div id="quarto-search-results"&gt;&lt;/div&gt;\n  &lt;he ...</code></pre>
</div>
</div>
<p>We have several possible approaches to extracting information from this document.</p>
</section>
<section id="extracting-html-elements" class="level2">
<h2 class="anchored" data-anchor-id="extracting-html-elements">Extracting HTML elements</h2>
<p>In <code>{rvest}</code> you can extract a single element with <code>html_element()</code>, or all matching elements with <code>html_elements()</code>. Both functions take a document object and one or more CSS selectors as inputs.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;">library</span>(rvest)</span>
<span id="cb8-2">html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_elements</span>(<span class="st" style="color: #20794D;">"h1"</span>)</span>
<span id="cb8-3"><span class="do" style="color: #5E5E5E;
font-style: italic;">## {xml_nodeset (1)}</span></span>
<span id="cb8-4"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [1] &lt;h1&gt;Teaching&lt;/h1&gt;</span></span>
<span id="cb8-5">html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_elements</span>(<span class="st" style="color: #20794D;">"h2"</span>)</span>
<span id="cb8-6"><span class="do" style="color: #5E5E5E;
font-style: italic;">## {xml_nodeset (2)}</span></span>
<span id="cb8-7"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [1] &lt;h2 id="toc-title"&gt;On this page&lt;/h2&gt;</span></span>
<span id="cb8-8"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [2] &lt;h2 class="anchored" data-anchor-id="course-history"&gt;Course History&lt;/h2&gt;</span></span>
<span id="cb8-9">html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_elements</span>(<span class="st" style="color: #20794D;">"p"</span>)</span>
<span id="cb8-10"><span class="do" style="color: #5E5E5E;
font-style: italic;">## {xml_nodeset (2)}</span></span>
<span id="cb8-11"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [1] &lt;p&gt;I am fortunate to have had the opportunity to teach in a variety of ro ...</span></span>
<span id="cb8-12"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [2] &lt;p&gt;I am an associate fellow of the Higher Education Academy, which you ca ...</span></span></code></pre></div>
</div>
<p>You can also combine and nest these selectors. For example you might want to extract all links that are within paragraphs <em>and</em> all second level headers.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_elements</span>(<span class="st" style="color: #20794D;">"p a,h2"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{xml_nodeset (3)}
[1] &lt;h2 id="toc-title"&gt;On this page&lt;/h2&gt;
[2] &lt;a href="https://www.advance-he.ac.uk/fellowship/associate-fellowship"&gt;he ...
[3] &lt;h2 class="anchored" data-anchor-id="course-history"&gt;Course History&lt;/h2&gt;</code></pre>
</div>
</div>
</section>
<section id="extracting-data-from-html-elements" class="level2">
<h2 class="anchored" data-anchor-id="extracting-data-from-html-elements">Extracting Data From HTML Elements</h2>
<p>Now that we’ve got the elements we care about extracted from the complete document. But how do we get the data we need out of those elements?</p>
<p>You’ll usually get the data from either the contents of the HTML element or else from one of it’s attributes. If you’re really lucky, the data you need will already be formatted for you as a HTML table or list.</p>
<section id="extracting-text" class="level3">
<h3 class="anchored" data-anchor-id="extracting-text">Extracting text</h3>
<p>The functions <code>rvest::html_text()</code> and <code>rvest::html_text2()</code> can be used to extract the plain text contents of an HTML element.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;">html_elements</span>(<span class="st" style="color: #20794D;">"#teaching li"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;">html_text2</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "one-to-one tuition for high school students;"                                   
[2] "running workshops and computer labs for undergraduate and postgraduate modules;"
[3] "delivering short courses on scientific communication and LaTeX;"                
[4] "supervising an undergraduate research project;"                                 
[5] "developing and lecturing postgraduate modules in statistics and data science."  </code></pre>
</div>
</div>
<p>The difference between <code>html_text()</code> and <code>html_text2()</code> is in how they handle whitespace. In HTML whitespace and line breaks have very little influence over how the code is interpreted by the computer (this is similar to R but very different from Python). <code>html_text()</code> will extract the text as it is in the raw html, while <code>html_text2()</code> will do its best to extract the text in a way that gives you something similar to what you’d see in the browser.</p>
</section>
<section id="extracting-attributes" class="level3">
<h3 class="anchored" data-anchor-id="extracting-attributes">Extracting Attributes</h3>
<p>Attributes are also used to record information that you might like to collect. For example, the destination of links are stored in the <code>href</code> attribute and the source of images is stored in the <code>src</code> attribute.</p>
<p>As an example of this, consider trying to extract the twitter link from the icon in the page footer. This is quite tricky to locate in the html source, so I used the <a href="https://rvest.tidyverse.org/articles/selectorgadget.html">Selector Gadget</a> to help find the correct combination of elements.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_element</span>(<span class="st" style="color: #20794D;">".compact:nth-child(1) .nav-link"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{html_node}
&lt;a class="nav-link" href="https://www.twitter.com/zakvarty"&gt;
[1] &lt;i class="bi bi-twitter" role="img"&gt;\n&lt;/i&gt;</code></pre>
</div>
</div>
<p>To extract the <code>href</code> attribute from the scraped element, we use the <code>rvest::html_attr()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-2">  <span class="fu" style="color: #4758AB;">html_elements</span>(<span class="st" style="color: #20794D;">".compact:nth-child(1) .nav-link"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-3">  <span class="fu" style="color: #4758AB;">html_attr</span>(<span class="st" style="color: #20794D;">"href"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "https://www.twitter.com/zakvarty"</code></pre>
</div>
</div>
<p><strong>Note:</strong> <code>rvest::html_attr()</code> will always return a character string (or list of character strings). If you are extracting an attribute that describes a quantity, such as the width of an image, you’ll need to convert this from a string to your required data type. For example, of the width is measures in pixels you might use <code>as.integer()</code>.</p>
</section>
<section id="extracting-tables" class="level3">
<h3 class="anchored" data-anchor-id="extracting-tables">Extracting tables</h3>
<p>HTML tables are composed in a similar, nested manner to LaTeX tables.</p>
<p>There are four main elements to know about that make up an HTML table:</p>
<ul>
<li><code>&lt;table&gt;</code>,</li>
<li><code>&lt;tr&gt;</code> (table row),</li>
<li><code>&lt;th&gt;</code> (table heading),</li>
<li><code>&lt;td&gt;</code> (table data).</li>
</ul>
<p>Here’s our simple example data, formatted as an HTML table:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">html_2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">minimal_html</span>(<span class="st" style="color: #20794D;">"</span></span>
<span id="cb17-2"><span class="st" style="color: #20794D;">  &lt;table&gt;</span></span>
<span id="cb17-3"><span class="st" style="color: #20794D;">    &lt;tr&gt;</span></span>
<span id="cb17-4"><span class="st" style="color: #20794D;">      &lt;th&gt;Name&lt;/th&gt;</span></span>
<span id="cb17-5"><span class="st" style="color: #20794D;">      &lt;th&gt;Number&lt;/th&gt;</span></span>
<span id="cb17-6"><span class="st" style="color: #20794D;">    &lt;/tr&gt;</span></span>
<span id="cb17-7"><span class="st" style="color: #20794D;">    &lt;tr&gt;</span></span>
<span id="cb17-8"><span class="st" style="color: #20794D;">      &lt;td&gt;A&lt;/td&gt;</span></span>
<span id="cb17-9"><span class="st" style="color: #20794D;">      &lt;td&gt;1&lt;/td&gt;</span></span>
<span id="cb17-10"><span class="st" style="color: #20794D;">    &lt;/tr&gt;</span></span>
<span id="cb17-11"><span class="st" style="color: #20794D;">    &lt;tr&gt;</span></span>
<span id="cb17-12"><span class="st" style="color: #20794D;">      &lt;td&gt;B&lt;/td&gt;</span></span>
<span id="cb17-13"><span class="st" style="color: #20794D;">      &lt;td&gt;2&lt;/td&gt;</span></span>
<span id="cb17-14"><span class="st" style="color: #20794D;">    &lt;/tr&gt;</span></span>
<span id="cb17-15"><span class="st" style="color: #20794D;">    &lt;tr&gt;</span></span>
<span id="cb17-16"><span class="st" style="color: #20794D;">      &lt;td&gt;C&lt;/td&gt;</span></span>
<span id="cb17-17"><span class="st" style="color: #20794D;">      &lt;td&gt;3&lt;/td&gt;</span></span>
<span id="cb17-18"><span class="st" style="color: #20794D;">    &lt;/tr&gt;</span></span>
<span id="cb17-19"><span class="st" style="color: #20794D;">  &lt;/table&gt;</span></span>
<span id="cb17-20"><span class="st" style="color: #20794D;">  "</span>)</span></code></pre></div>
</div>
<p>Since tables are a common way to store data, <code>{rvest}</code> includes a useful function <code>html_table()</code> that converts directly from an HTML table into a tibble.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">html_2 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;">html_element</span>(<span class="st" style="color: #20794D;">"table"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-3">  <span class="fu" style="color: #4758AB;">html_table</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 2
  Name  Number
  &lt;chr&gt;  &lt;int&gt;
1 A          1
2 B          2
3 C          3</code></pre>
</div>
</div>
<p>Applying this to our real scraped data we can easily extract the table of taught courses.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;">html_element</span>(<span class="st" style="color: #20794D;">"table"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-3">  <span class="fu" style="color: #4758AB;">html_table</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 25 × 3
   Year      Course                                   Role                      
   &lt;chr&gt;     &lt;chr&gt;                                    &lt;chr&gt;                     
 1 "2021-22" Supervised Learning                      Lecturer                  
 2 ""        Ethics in Data Science I                 Lecturer                  
 3 ""        Ethics in Data Science II                Lecturer                  
 4 "—"       —                                        —                         
 5 "2020-21" MATH562/582: Extreme Value Theory        Lecturer                  
 6 ""        MATH331: Bayesian Inference              Graduate teaching assista…
 7 ""        MATH330: Likelihood Inference            Graduate teaching assista…
 8 "2019-20" DSCI485: Introduction to LaTeX           Co-leading short course   
 9 ""        MATH566: Longitudinal Data Analysis      Graduate teaching assista…
10 "2018-19" STOR-i Internship: Introduction to LaTeX Co-leading short course   
# … with 15 more rows</code></pre>
</div>
</div>
</section>
</section>
<section id="tip-for-building-tibbles" class="level2">
<h2 class="anchored" data-anchor-id="tip-for-building-tibbles">Tip for Building Tibbles</h2>
<p>When scraping data from a webpage, your end-goal is typically going to be constructing a data.frame or a tibble.</p>
<p>If you are following our description of tidy data, you’ll want each row to correspond some repeated unit on the HTML page. In this case, you should</p>
<ol type="1">
<li>Use <code>html_elements()</code> to select the elements that contain each observation unit;</li>
<li>Use <code>html_element()</code> to extract the variables from each of those observations.</li>
</ol>
<p>Taking this approach guarantees that you’ll get the same number of values for each variable, because <code>html_element()</code> always returns the same number of outputs as inputs. This is vital when you have missing data - when not every observation unit has a value for every variable of interest.</p>
<p>As an example, consider this extract of text about the <a href="https://dplyr.tidyverse.org/reference/starwars.html#ref-examples">starwars dataset</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">starwars_html <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">minimal_html</span>(<span class="st" style="color: #20794D;">"</span></span>
<span id="cb22-2"><span class="st" style="color: #20794D;">  &lt;ul&gt;</span></span>
<span id="cb22-3"><span class="st" style="color: #20794D;">    &lt;li&gt;&lt;b&gt;C-3PO&lt;/b&gt; is a &lt;i&gt;droid&lt;/i&gt; that weighs &lt;span class='weight'&gt;167 kg&lt;/span&gt;&lt;/li&gt;</span></span>
<span id="cb22-4"><span class="st" style="color: #20794D;">    &lt;li&gt;&lt;b&gt;R2-D2&lt;/b&gt; is a &lt;i&gt;droid&lt;/i&gt; that weighs &lt;span class='weight'&gt;96 kg&lt;/span&gt;&lt;/li&gt;</span></span>
<span id="cb22-5"><span class="st" style="color: #20794D;">    &lt;li&gt;&lt;b&gt;Yoda&lt;/b&gt; weighs &lt;span class='weight'&gt;66 kg&lt;/span&gt;&lt;/li&gt;</span></span>
<span id="cb22-6"><span class="st" style="color: #20794D;">    &lt;li&gt;&lt;b&gt;R4-P17&lt;/b&gt; is a &lt;i&gt;droid&lt;/i&gt;&lt;/li&gt;</span></span>
<span id="cb22-7"><span class="st" style="color: #20794D;">  &lt;/ul&gt;</span></span>
<span id="cb22-8"><span class="st" style="color: #20794D;">  "</span>)</span></code></pre></div>
</div>
<p>This is an unordered list where each list item corresponds to one observational unit (one character from the starwars universe). The name of the character is given in bold, the character species is specified in italics and the weight of the character is denoted by the <code>.weight</code> class. However, some characters have only a subset of these variables defined: for example Yoda has no species entry.</p>
<p>If we try to extract each element directly, our vectors of variable values are of different lengths. We don’t know where the missing values should be, so we can’t line them back up to make a tibble.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">starwars_html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_elements</span>(<span class="st" style="color: #20794D;">"b"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_text2</span>()</span>
<span id="cb23-2"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [1] "C-3PO"  "R2-D2"  "Yoda"   "R4-P17"</span></span>
<span id="cb23-3">starwars_html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_elements</span>(<span class="st" style="color: #20794D;">"i"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_text2</span>()</span>
<span id="cb23-4"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [1] "droid" "droid" "droid"</span></span>
<span id="cb23-5">starwars_html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_elements</span>(<span class="st" style="color: #20794D;">".weight"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_text2</span>()</span>
<span id="cb23-6"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [1] "167 kg" "96 kg"  "66 kg"</span></span></code></pre></div>
</div>
<p>What we should do instead is start by extracting all of the list item elements using <code>html_elements()</code>. Once we have done this, we can then use <code>html_element()</code> to extract each variable for all characters. This will pad with NAs, so that we can collate them into a tibble.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">starwars_characters <span class="ot" style="color: #003B4F;">&lt;-</span> starwars_html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_elements</span>(<span class="st" style="color: #20794D;">"li"</span>)</span>
<span id="cb24-2"></span>
<span id="cb24-3">starwars_characters <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_element</span>(<span class="st" style="color: #20794D;">"b"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_text2</span>()</span>
<span id="cb24-4"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [1] "C-3PO"  "R2-D2"  "Yoda"   "R4-P17"</span></span>
<span id="cb24-5">starwars_characters <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_element</span>(<span class="st" style="color: #20794D;">"i"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_text2</span>()</span>
<span id="cb24-6"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [1] "droid" "droid" NA      "droid"</span></span>
<span id="cb24-7">starwars_characters <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_element</span>(<span class="st" style="color: #20794D;">".weight"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_text2</span>()</span>
<span id="cb24-8"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [1] "167 kg" "96 kg"  "66 kg"  NA</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">tibble<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb25-2">  <span class="at" style="color: #657422;">name =</span> starwars_characters <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_element</span>(<span class="st" style="color: #20794D;">"b"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_text2</span>(),</span>
<span id="cb25-3">  <span class="at" style="color: #657422;">species =</span> starwars_characters <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_element</span>(<span class="st" style="color: #20794D;">"i"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_text2</span>(),</span>
<span id="cb25-4">  <span class="at" style="color: #657422;">weight =</span> starwars_characters <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_element</span>(<span class="st" style="color: #20794D;">".weight"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_text2</span>()</span>
<span id="cb25-5">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 3
  name   species weight
  &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt; 
1 C-3PO  droid   167 kg
2 R2-D2  droid   96 kg 
3 Yoda   &lt;NA&gt;    66 kg 
4 R4-P17 droid   &lt;NA&gt;  </code></pre>
</div>
</div>


</section>

<div id="quarto-appendix"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{varty2022,
  author = {Zak Varty},
  title = {Web {Scraping} with `\{Rvest\}`},
  date = {2022-12-01},
  url = {https://www.zakvarty.com/blog/2022-12-01-rvest},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-varty2022" class="csl-entry quarto-appendix-citeas">
Zak Varty. 2022. <span>“Web Scraping with `{Rvest}`.”</span> December 1,
2022. <a href="https://www.zakvarty.com/blog/2022-12-01-rvest">https://www.zakvarty.com/blog/2022-12-01-rvest</a>.
</div></div></section></div> ]]></description>
  <category>data science</category>
  <category>data acquisition</category>
  <category>tutorial</category>
  <guid>https://www.zakvarty.com/blog/2022-12-01-rvest/index.html</guid>
  <pubDate>Thu, 01 Dec 2022 00:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2022-12-01-rvest/rvest-logo.png" medium="image" type="image/png" height="167" width="144"/>
</item>
<item>
  <title>Good Enough Practices in Scientific Computing</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2022-10-19-good-enough-practices-in-scientific-computing/index.html</link>
  <description><![CDATA[ 



<!--Photo by <a href="https://unsplash.com/@qwitka?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Maksym Kaharlytskyi</a> on <a href="https://unsplash.com/s/photos/filing-cabinet?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a> -->
<section id="reading-summary" class="level2">
<h2 class="anchored" data-anchor-id="reading-summary">Reading Summary</h2>
<p><code>wilson2017good</code></p>
<p><strong>Title:</strong> <em>Good Enough Practices in Scientific Computing. {PLOS Computational Biology, 2017} (20 pages).</em></p>
<p><strong>Authors:</strong> <em>Greg Wilson, Jennifer Bryan, Karen Cranston, Justin Kitzes, Lex Nederbragt and Tracy K. Teal.</em></p>
<p><strong>Key words:</strong> <em>computing</em>, <em>research skills</em>, <em>reproducibilty</em>, <em>guides</em>.</p>
<p>In this paper by <span class="citation" data-cites="wilson2017good">Wilson et al. (2017)</span>, a collection of experienced researchers and instructors give simple ways to implement good computing practices during a research project. They do this by providing a list of concrete recommendations that every researcher can adopt, regardless of their current computational skills. This is important to help the transition toward open, documented and reproducible research. The article is aimed specifically at people who are new to computational research but also contains useful guidance for more experienced researchers.</p>
</section>
<section id="notes" class="level2">
<h2 class="anchored" data-anchor-id="notes">Notes</h2>
<p>This article describes some of the best-practices in software development and how those ideas can be implemented in a reasearch project. This focus here is on implementing these approaches without requiring reseachers to learn how to use lots of peripheral technologies (for example git and LaTeX / markdown).</p>
<p>An earlier paper “Best Practices for Scientifc Computing” <span class="citation" data-cites="wilson2014best">(Wilson et al. 2014)</span>, is aimed at those who have or would like to develop such peripheral skills.</p>
</section>
<section id="suggested-best-practices" class="level2">
<h2 class="anchored" data-anchor-id="suggested-best-practices">Suggested Best Practices</h2>
<p>Best practices are grouped into 6 main themes.</p>
<section id="data-management" class="level3">
<h3 class="anchored" data-anchor-id="data-management">1. Data Management</h3>
<section id="create-the-data-you-wish-to-see-in-the-world" class="level4">
<h4 class="anchored" data-anchor-id="create-the-data-you-wish-to-see-in-the-world">Create the data you wish to see in the world</h4>
<p>Raw data should be created in a format that is ammenable to analysis and where multiple tables are used, a unique identifer used to link each record across these tables.</p>
</section>
<section id="keep-it-backed-up-keep-it-intact" class="level4">
<h4 class="anchored" data-anchor-id="keep-it-backed-up-keep-it-intact">Keep it backed up, keep it intact</h4>
<p>This raw data should be backed up in more than one location and preserved during the analysis (i.e.&nbsp;<strong>not</strong> directly edited). When cleaning, handling and modelling the data keep a record of all steps used.</p>
</section>
<section id="share-the-data" class="level4">
<h4 class="anchored" data-anchor-id="share-the-data">Share the data</h4>
<p>To allow your future self (and others) to access and cite your hard won data, submit it to a reputable DOI-issuing repository.</p>
</section>
</section>
<section id="software" class="level3">
<h3 class="anchored" data-anchor-id="software">2. Software</h3>
<section id="script-files" class="level4">
<h4 class="anchored" data-anchor-id="script-files">Script files</h4>
<p>Start each script with a brief explanatory comment of its purpose and a description of any dependencies.</p>
<p>Within scripts, ruthlessly eliminate duplication. Do this by creating functions for any repeated operations and provide simple examples of how those functions work.</p>
<p>When making functions and variables, give them meaningful names. As rule of thumb: fuctions are verbs, variables are nouns.</p>
<p>If you need your script to perform different actions, control this behaviour programmatically rather than by commenting/uncommenting sections of code.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Uncomment for weekly reports</span></span>
<span id="cb1-2">output_dir <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"weekly_reports/"</span>,year,<span class="st" style="color: #20794D;">"/"</span>,week_of_year,<span class="st" style="color: #20794D;">"/"</span>)</span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;"># Uncomment for annual reports</span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;">#output_dir &lt;- paste0("annual_reports/",year,"/")</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">report_type <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"weekly"</span></span>
<span id="cb2-2">year <span class="ot" style="color: #003B4F;">=</span> <span class="dv" style="color: #AD0000;">2022</span></span>
<span id="cb2-3">week_of_year <span class="ot" style="color: #003B4F;">=</span> <span class="dv" style="color: #AD0000;">21</span></span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="cf" style="color: #003B4F;">if</span> (report_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"weekly"</span>) {</span>
<span id="cb2-6">  output_dir <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"weekly_reports/"</span>,year,<span class="st" style="color: #20794D;">"/"</span>,week_of_year,<span class="st" style="color: #20794D;">"/"</span>)</span>
<span id="cb2-7">} <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (report_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"annual"</span>) {</span>
<span id="cb2-8">  output_dir <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"annual_reports/"</span>,year,<span class="st" style="color: #20794D;">"/"</span>)</span>
<span id="cb2-9">} <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb2-10">  <span class="fu" style="color: #4758AB;">stop</span>(<span class="st" style="color: #20794D;">"report_type should be 'weekly' or 'annual'."</span>)</span>
<span id="cb2-11">}</span></code></pre></div>
</div>
<p>Submit the final code for your research project to to a reputable DOI-issuing repository.</p>
</section>
<section id="external-code" class="level4">
<h4 class="anchored" data-anchor-id="external-code">External Code</h4>
<p>Before writing your own code, check if someone else got there first. Are there well-maintained software libraries that already do what you need?</p>
<p>If so, test the code (extensively!) before relying on it. Keep a record of what you have tested and add to this as you find awkward edge cases.</p>
</section>
</section>
<section id="collaboration" class="level3">
<h3 class="anchored" data-anchor-id="collaboration">3. Collaboration</h3>
<section id="collaborating-within-your-team" class="level4">
<h4 class="anchored" data-anchor-id="collaborating-within-your-team">Collaborating within your team</h4>
<p>Create a single file called <code>README</code> giving an overview of your project. This should describe aim of the project and how to get started working with the data/code/writing. A good rule of thumb is to write this as though it were for either a new-starter on your team. Future you will thank you!</p>
<p>Create a shared to-do list for the project in a file called <code>TODO</code> and decide on how you will communicate during the project. For example, what channels will you use for group meetings, quick questions, assigning tasks and setting deadlines?</p>
</section>
<section id="opening-up-to-the-wider-world" class="level4">
<h4 class="anchored" data-anchor-id="opening-up-to-the-wider-world">Opening up to the wider world</h4>
<p>Add another file called <code>LICENSE</code> giving the licensing information for the project. This says who can use it and for what purposes. No license implies you are keeping all rights and nobody is allowed to reuse or modify the materials. For more information on licenses see <a href="choosealicense.com">choosealicense.com</a> or <a href="https://opensource.guide/legal/#which-open-source-license-is-appropriate-for-my-project">The Open Source Guide</a>. Consult your company’s legal folks as needed.</p>
<p>Create a final file called <code>CITATION</code> letting other people know how they should give proper attribution to your work if they use it.</p>
</section>
</section>
<section id="project-organisation" class="level3">
<h3 class="anchored" data-anchor-id="project-organisation">4. Project Organisation</h3>
<p>Each project should be self-contained in its own directory (folder) and this directory should be named after the project.</p>
<p>Create subdirectories called:</p>
<ul>
<li><code>docs/</code> for all text documents associated with the project</li>
<li><code>data/raw/</code> for all raw data and metadata</li>
<li><code>data/derived/</code> for all data files during cleanup and analysis</li>
<li><code>src</code> for all code you write as part of this project</li>
<li><code>bin</code> for all external code or compiled programs that you use in this project</li>
</ul>
<p>When adding files and subdirectories within this structure, name these to clearly reflect their content or function.</p>
</section>
<section id="tracking-changes" class="level3">
<h3 class="anchored" data-anchor-id="tracking-changes">5. Tracking Changes</h3>
<p>As soon as any file is created by a human, back it up in multiple locations. If you make a huge file, then consult your IT folks about how to store and back it up.</p>
<p>Add a file called <code>CHANGELOG</code> to the docs subfolder. Use this to track all changes made within the project by all contributers, describing when the changes happened and why they were made.</p>
<p>Keep these changes as small as possible and share among collaborators frequently to avoid getting out of sync.</p>
<p>Make a Copy the entire project whenever a significant change has been made.</p>
<p>Better yet, use a dedicated version control system such as git if that is a realistic option.</p>
</section>
<section id="manuscripts" class="level3">
<h3 class="anchored" data-anchor-id="manuscripts">6. Manuscripts</h3>
<p>Pick one and stick to it within each project. The former has a much lower bar to entry and has most of the benefits of the latter (other than manuscripts being stored in the same place as everything else).</p>
<ol type="1">
<li><p>Write the manuscript using online tools with rich formatting, change tracking and reference management. (e.g.&nbsp;Overleaf, Google Docs)</p></li>
<li><p>Write the manuscript in plain text format the permits version control (e.g.&nbsp;tex + git or markdown + git)</p></li>
</ol>



</section>
</section>

<div id="quarto-appendix"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-wilson2014best" class="csl-entry">
Wilson, Greg, D. A. Aruliah, C. Titus Brown, Neil P. Chue Hong, Matt Davis, Richard T. Guy, Steven H. D. Haddock, et al. 2014. <span>“Best Practices for Scientific Computing.”</span> <em>PLOS Biology</em> 12 (January): 1–7. <a href="https://doi.org/10.1371/journal.pbio.1001745">https://doi.org/10.1371/journal.pbio.1001745</a>.
</div>
<div id="ref-wilson2017good" class="csl-entry">
Wilson, Greg, Jennifer Bryan, Karen Cranston, Justin Kitzes, Lex Nederbragt, and Tracy K Teal. 2017. <span>“Good Enough Practices in Scientific Computing.”</span> <em>PLoS Computational Biology</em> 13 (June): 1–20. <a href="https://doi.org/10.1371/journal.pcbi.1005510">https://doi.org/10.1371/journal.pcbi.1005510</a>.
</div>
</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section></div> ]]></description>
  <category>academic skills</category>
  <category>computing</category>
  <category>reproducible research</category>
  <category>reading summary</category>
  <guid>https://www.zakvarty.com/blog/2022-10-19-good-enough-practices-in-scientific-computing/index.html</guid>
  <pubDate>Tue, 18 Oct 2022 23:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2022-10-19-good-enough-practices-in-scientific-computing/gepisc-image.png" medium="image" type="image/png" height="68" width="144"/>
</item>
<item>
  <title>Data Journalism: Recreating a Professional Plot</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2022-10-15-BBC-temperature-plot/index.html</link>
  <description><![CDATA[ 



<section id="bbc-temperature-records" class="level1">
<h1>BBC Temperature Records</h1>
<p>On Friday 2022-10-14, the BBC Data Journalism Team released this excellent <a href="https://www.bbc.co.uk/news/science-environment-63244353">article</a> about the record temperatures in the UK during this summer’s heatwave. The article has some amazing data visualisations, and draws on a recent Met Office report.</p>
<p>I wanted to try and recreate one of the plots to test the limits of my ggplot knowledge. Since I had already tackled a stacked bar plot, I figured I might have a go at their dumbbell plot that shows the weather stations which exceeded their previous records largest margins.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.zakvarty.com/blog/2022-10-15-BBC-temperature-plot/bbc-temperature-records.png.webp" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">bbc temperature records dumbbell plot</figcaption><p></p>
</figure>
</div>
<p>I couldn’t find the data source, so spent <strong>far</strong> too long with a printed copy of the original figure to make my own version of the data set.</p>
<p>It took a while, but I got most of the way there with it and am happy with the final result.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.zakvarty.com/blog/2022-10-15-BBC-temperature-plot/zdv-temperature-records.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">my attempt at recreating the same plot</figcaption><p></p>
</figure>
</div>
<p>There were a few things that still have me stumped, that I might revisit at some later date:</p>
<ul class="task-list">
<li><input type="checkbox" disabled="" checked="">
Left aligning title and caption (Thanks to Jack Davison for this!)</li>
<li><input type="checkbox" disabled="">
Using gradients on multiple parts of the plot</li>
<li><input type="checkbox" disabled="">
Using the YeOrRd gradient, rather than default blues</li>
<li><input type="checkbox" disabled="">
Adding a non-BBC logo to the bottom right.</li>
</ul>
<p>If anyone with superior ggplot skills would like to help with those or give pointers, then I would be most grateful!</p>
<p>Code and figure down below ↓</p>
<div class="cell" data-fig.dpi="100">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Load packages ----</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(bbplot)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(showtext)</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;"># Import fonts ----</span></span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;">font_add_google</span>(<span class="at" style="color: #657422;">name =</span> <span class="st" style="color: #20794D;">"Roboto Slab"</span>, <span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">"roboto-slab"</span>)</span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;">font_add_google</span>(<span class="at" style="color: #657422;">name =</span> <span class="st" style="color: #20794D;">"Roboto"</span>, <span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">"roboto"</span>)</span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;">showtext_auto</span>()</span>
<span id="cb1-10">title_font <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"roboto-slab"</span></span>
<span id="cb1-11">font <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"roboto"</span></span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;"># Input data (estimated values from article) ---</span></span>
<span id="cb1-14">temperatures <span class="ot" style="color: #003B4F;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">tribble</span>(</span>
<span id="cb1-15">  <span class="sc" style="color: #5E5E5E;">~</span>location, <span class="sc" style="color: #5E5E5E;">~</span>max_prev, <span class="sc" style="color: #5E5E5E;">~</span>max_2022,</span>
<span id="cb1-16">  <span class="st" style="color: #20794D;">"Cranwell"</span>, <span class="fl" style="color: #AD0000;">36.6</span>, <span class="fl" style="color: #AD0000;">39.9</span>,</span>
<span id="cb1-17">  <span class="st" style="color: #20794D;">"Nottingham"</span>, <span class="fl" style="color: #AD0000;">36.0</span>, <span class="fl" style="color: #AD0000;">39.8</span>,</span>
<span id="cb1-18">  <span class="st" style="color: #20794D;">"Bramham"</span>, <span class="fl" style="color: #AD0000;">33.5</span>, <span class="fl" style="color: #AD0000;">39.8</span>,</span>
<span id="cb1-19">  <span class="st" style="color: #20794D;">"Sutton Boningon"</span>, <span class="fl" style="color: #AD0000;">35.9</span>, <span class="fl" style="color: #AD0000;">39.4</span>,</span>
<span id="cb1-20">  <span class="st" style="color: #20794D;">"Sheffield"</span>, <span class="fl" style="color: #AD0000;">35.6</span>, <span class="fl" style="color: #AD0000;">39.4</span>,</span>
<span id="cb1-21">  <span class="st" style="color: #20794D;">"Leeming"</span>, <span class="fl" style="color: #AD0000;">34.4</span>, <span class="fl" style="color: #AD0000;">38.7</span>,</span>
<span id="cb1-22">  <span class="st" style="color: #20794D;">"Goudhurst"</span>, <span class="fl" style="color: #AD0000;">34.7</span>, <span class="fl" style="color: #AD0000;">37.9</span>,</span>
<span id="cb1-23">  <span class="st" style="color: #20794D;">"Whitby"</span>, <span class="fl" style="color: #AD0000;">33.1</span>, <span class="fl" style="color: #AD0000;">37.8</span>,</span>
<span id="cb1-24">  <span class="st" style="color: #20794D;">"Bradford"</span>, <span class="fl" style="color: #AD0000;">33.9</span>, <span class="fl" style="color: #AD0000;">37.8</span>,</span>
<span id="cb1-25">  <span class="st" style="color: #20794D;">"High Mowthorpe"</span>, <span class="fl" style="color: #AD0000;">33.1</span>, <span class="fl" style="color: #AD0000;">37.2</span>,</span>
<span id="cb1-26">  <span class="st" style="color: #20794D;">"Blackpool"</span>, <span class="fl" style="color: #AD0000;">33.6</span>, <span class="fl" style="color: #AD0000;">37.2</span>,</span>
<span id="cb1-27">  <span class="st" style="color: #20794D;">"Durham"</span>, <span class="fl" style="color: #AD0000;">32.9</span>, <span class="fl" style="color: #AD0000;">36.9</span>,</span>
<span id="cb1-28">  <span class="st" style="color: #20794D;">"Preston"</span>, <span class="fl" style="color: #AD0000;">33.1</span>, <span class="fl" style="color: #AD0000;">36.5</span>,</span>
<span id="cb1-29">  <span class="st" style="color: #20794D;">"Morecambe"</span>, <span class="fl" style="color: #AD0000;">32.7</span>, <span class="fl" style="color: #AD0000;">36.4</span>,</span>
<span id="cb1-30">  <span class="st" style="color: #20794D;">"Stonyhurst"</span>, <span class="fl" style="color: #AD0000;">32.6</span>, <span class="fl" style="color: #AD0000;">36.3</span>,</span>
<span id="cb1-31">  <span class="st" style="color: #20794D;">"Keele"</span>, <span class="fl" style="color: #AD0000;">32.9</span>, <span class="fl" style="color: #AD0000;">36.2</span>,</span>
<span id="cb1-32">  <span class="st" style="color: #20794D;">"Bude"</span>, <span class="fl" style="color: #AD0000;">32.2</span>, <span class="fl" style="color: #AD0000;">36.1</span>,</span>
<span id="cb1-33">  <span class="st" style="color: #20794D;">"Buxton"</span>, <span class="fl" style="color: #AD0000;">32.7</span>, <span class="fl" style="color: #AD0000;">36.0</span>,</span>
<span id="cb1-34">  <span class="st" style="color: #20794D;">"Kielder Castle"</span>, <span class="fl" style="color: #AD0000;">29.6</span>, <span class="fl" style="color: #AD0000;">35.0</span>,</span>
<span id="cb1-35">  <span class="st" style="color: #20794D;">"Bala"</span>, <span class="fl" style="color: #AD0000;">31.9</span>, <span class="fl" style="color: #AD0000;">34.9</span></span>
<span id="cb1-36">)</span>
<span id="cb1-37"></span>
<span id="cb1-38"><span class="co" style="color: #5E5E5E;"># Data preparation ----</span></span>
<span id="cb1-39"></span>
<span id="cb1-40"><span class="do" style="color: #5E5E5E;
font-style: italic;">## For the points ----</span></span>
<span id="cb1-41">temperatures <span class="ot" style="color: #003B4F;">&lt;-</span> temperatures <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb1-42">  dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">max_ever =</span> <span class="fu" style="color: #4758AB;">pmax</span>(max_2022, max_prev))</span>
<span id="cb1-43"></span>
<span id="cb1-44">temperatures<span class="sc" style="color: #5E5E5E;">$</span>location <span class="ot" style="color: #003B4F;">&lt;-</span> forcats<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">fct_reorder</span>(<span class="fu" style="color: #4758AB;">as.factor</span>(temperatures<span class="sc" style="color: #5E5E5E;">$</span>location), <span class="at" style="color: #657422;">.x =</span> temperatures<span class="sc" style="color: #5E5E5E;">$</span>max_ever)</span>
<span id="cb1-45"></span>
<span id="cb1-46">temp_long <span class="ot" style="color: #003B4F;">&lt;-</span> tidyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">pivot_longer</span>(temperatures, <span class="at" style="color: #657422;">cols =</span> <span class="fu" style="color: #4758AB;">c</span>(max_2022, max_prev), <span class="at" style="color: #657422;">names_to =</span> <span class="st" style="color: #20794D;">"year"</span>,<span class="at" style="color: #657422;">values_to =</span> <span class="st" style="color: #20794D;">"temperature"</span>)</span>
<span id="cb1-47"></span>
<span id="cb1-48"><span class="do" style="color: #5E5E5E;
font-style: italic;">## For the bars ----</span></span>
<span id="cb1-49">n_interp <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">501</span></span>
<span id="cb1-50">temp_interpolated <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tibble</span>(<span class="fu" style="color: #4758AB;">rep</span>(<span class="cn" style="color: #8f5902;">NA</span>, n_interp<span class="sc" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">20</span>))</span>
<span id="cb1-51">temp_interpolated[[<span class="dv" style="color: #AD0000;">1</span>]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rep</span>(temperatures<span class="sc" style="color: #5E5E5E;">$</span>location, <span class="at" style="color: #657422;">each =</span> n_interp)</span>
<span id="cb1-52">temp_interpolated[[<span class="dv" style="color: #AD0000;">2</span>]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rep</span>(<span class="cn" style="color: #8f5902;">NA_real_</span>, n_interp<span class="sc" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">20</span>)</span>
<span id="cb1-53"><span class="fu" style="color: #4758AB;">names</span>(temp_interpolated) <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"location"</span>, <span class="st" style="color: #20794D;">"interp_value"</span>)</span>
<span id="cb1-54"><span class="cf" style="color: #003B4F;">for</span> (i <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">20</span>) {</span>
<span id="cb1-55">  temp_interpolated<span class="sc" style="color: #5E5E5E;">$</span>interp_value[(<span class="dv" style="color: #AD0000;">1</span> <span class="sc" style="color: #5E5E5E;">+</span> n_interp <span class="sc" style="color: #5E5E5E;">*</span> (i <span class="sc" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>))<span class="sc" style="color: #5E5E5E;">:</span>(n_interp<span class="sc" style="color: #5E5E5E;">*</span>i)] <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb1-56">    <span class="fu" style="color: #4758AB;">seq</span>(temperatures<span class="sc" style="color: #5E5E5E;">$</span>max_prev[i], temperatures<span class="sc" style="color: #5E5E5E;">$</span>max_2022[i], <span class="at" style="color: #657422;">length.out =</span> n_interp)</span>
<span id="cb1-57">}</span>
<span id="cb1-58"></span>
<span id="cb1-59">str_wrap_break <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x, break_limit) {</span>
<span id="cb1-60">  <span class="co" style="color: #5E5E5E;"># Function from {usefunc} by N Rennie (https://github.com/nrennie/usefunc)</span></span>
<span id="cb1-61">  <span class="fu" style="color: #4758AB;">sapply</span>(<span class="fu" style="color: #4758AB;">strwrap</span>(x, break_limit, <span class="at" style="color: #657422;">simplify =</span> <span class="cn" style="color: #8f5902;">FALSE</span>), paste, <span class="at" style="color: #657422;">collapse =</span> <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">"</span>)</span>
<span id="cb1-62">}</span>
<span id="cb1-63"></span>
<span id="cb1-64">title_string <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"Huge breaks from previous records in 2022"</span></span>
<span id="cb1-65">subtitle_string <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">str_wrap_break</span>(<span class="st" style="color: #20794D;">"Stations with largest gaps between previous and new records, ordered by highest new temperature"</span>,<span class="dv" style="color: #AD0000;">60</span>)</span>
<span id="cb1-66">caption_string <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"Only includes active weather stations with at least 50 years of observations"</span></span>
<span id="cb1-67"></span>
<span id="cb1-68"></span>
<span id="cb1-69"></span>
<span id="cb1-70"></span>
<span id="cb1-71"></span>
<span id="cb1-72">p <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-73">  <span class="fu" style="color: #4758AB;">geom_line</span>(<span class="at" style="color: #657422;">data =</span> temp_interpolated, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> interp_value, <span class="at" style="color: #657422;">y =</span> location, <span class="at" style="color: #657422;">color =</span> interp_value), <span class="at" style="color: #657422;">lwd =</span> <span class="dv" style="color: #AD0000;">3</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-74">  <span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb1-75">  <span class="fu" style="color: #4758AB;">geom_label</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"2022 record"</span>, <span class="at" style="color: #657422;">x =</span> <span class="fl" style="color: #AD0000;">38.7</span>, <span class="at" style="color: #657422;">y =</span> <span class="fl" style="color: #AD0000;">7.2</span>), <span class="at" style="color: #657422;">family =</span> font, <span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">6.5</span>, <span class="at" style="color: #657422;">label.size =</span> <span class="cn" style="color: #8f5902;">NA</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-76">  <span class="fu" style="color: #4758AB;">geom_curve</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">38</span>, <span class="at" style="color: #657422;">y =</span> <span class="fl" style="color: #AD0000;">7.9</span>, <span class="at" style="color: #657422;">xend =</span> <span class="fl" style="color: #AD0000;">36.9</span>, <span class="at" style="color: #657422;">yend =</span> <span class="fl" style="color: #AD0000;">8.9</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-77">  <span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb1-78">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Previous </span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;"> record"</span>, <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">31</span>, <span class="at" style="color: #657422;">y =</span> <span class="dv" style="color: #AD0000;">11</span>), <span class="at" style="color: #657422;">family =</span> font, <span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">6.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-79">  <span class="fu" style="color: #4758AB;">geom_curve</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">xend =</span> <span class="dv" style="color: #AD0000;">32</span>, <span class="at" style="color: #657422;">yend =</span> <span class="dv" style="color: #AD0000;">11</span>, <span class="at" style="color: #657422;">x =</span> <span class="fl" style="color: #AD0000;">32.9</span>, <span class="at" style="color: #657422;">y =</span> <span class="fl" style="color: #AD0000;">8.9</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-80">  <span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb1-81">  <span class="fu" style="color: #4758AB;">geom_label</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Biggest leap"</span>, <span class="at" style="color: #657422;">x =</span> <span class="fl" style="color: #AD0000;">33.7</span>, <span class="at" style="color: #657422;">y =</span> <span class="dv" style="color: #AD0000;">20</span>), <span class="at" style="color: #657422;">family =</span> font, <span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">6.5</span>, <span class="at" style="color: #657422;">label.size =</span> <span class="cn" style="color: #8f5902;">NA</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-82">  <span class="fu" style="color: #4758AB;">geom_label</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"6.3C"</span>, <span class="at" style="color: #657422;">x =</span> <span class="fl" style="color: #AD0000;">34.0</span>, <span class="at" style="color: #657422;">y =</span> <span class="dv" style="color: #AD0000;">19</span>), <span class="at" style="color: #657422;">family =</span> font, <span class="at" style="color: #657422;">fontface=</span><span class="st" style="color: #20794D;">"bold"</span>, <span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">6.5</span>, <span class="at" style="color: #657422;">label.size =</span> <span class="cn" style="color: #8f5902;">NA</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-83">  <span class="fu" style="color: #4758AB;">geom_curve</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">xend =</span> <span class="fl" style="color: #AD0000;">34.7</span>, <span class="at" style="color: #657422;">yend =</span> <span class="fl" style="color: #AD0000;">19.5</span>, <span class="at" style="color: #657422;">x =</span> <span class="fl" style="color: #AD0000;">35.7</span>, <span class="at" style="color: #657422;">y =</span> <span class="dv" style="color: #AD0000;">18</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-84">  <span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb1-85">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">data =</span> temp_long, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> temperature, <span class="at" style="color: #657422;">y =</span> location, <span class="at" style="color: #657422;">fill =</span> temperature), <span class="at" style="color: #657422;">shape =</span> <span class="dv" style="color: #AD0000;">21</span>, <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"black"</span>, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">6</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-86">  <span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb1-87">  <span class="fu" style="color: #4758AB;">scale_x_continuous</span>(<span class="at" style="color: #657422;">breaks =</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="dv" style="color: #AD0000;">30</span>, <span class="dv" style="color: #AD0000;">40</span>, <span class="at" style="color: #657422;">by =</span> <span class="fl" style="color: #AD0000;">2.5</span>),<span class="at" style="color: #657422;">labels =</span> <span class="fu" style="color: #4758AB;">paste0</span>(<span class="fu" style="color: #4758AB;">seq</span>(<span class="dv" style="color: #AD0000;">30</span>, <span class="dv" style="color: #AD0000;">40</span>, <span class="at" style="color: #657422;">by =</span> <span class="fl" style="color: #AD0000;">2.5</span>),<span class="st" style="color: #20794D;">"C"</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-88">  <span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb1-89">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> title_string,</span>
<span id="cb1-90">       <span class="at" style="color: #657422;">subtitle =</span> subtitle_string,</span>
<span id="cb1-91">       <span class="at" style="color: #657422;">caption =</span> caption_string) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-92">  <span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb1-93">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">plot.title =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">family=</span>title_font,</span>
<span id="cb1-94">                                  <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">28</span>,</span>
<span id="cb1-95">                                  <span class="at" style="color: #657422;">face=</span><span class="st" style="color: #20794D;">"bold"</span>,</span>
<span id="cb1-96">                                  <span class="at" style="color: #657422;">color=</span><span class="st" style="color: #20794D;">"#222222"</span>),</span>
<span id="cb1-97">        <span class="at" style="color: #657422;">plot.subtitle =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">family=</span>font,</span>
<span id="cb1-98">                                     <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">18</span>,</span>
<span id="cb1-99">                                     <span class="at" style="color: #657422;">margin=</span>ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">margin</span>(<span class="dv" style="color: #AD0000;">9</span>,<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">9</span>,<span class="dv" style="color: #AD0000;">0</span>)),</span>
<span id="cb1-100">        <span class="at" style="color: #657422;">plot.caption =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">family =</span> font, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">14</span>,<span class="at" style="color: #657422;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span>),</span>
<span id="cb1-101">        <span class="at" style="color: #657422;">plot.title.position =</span> <span class="st" style="color: #20794D;">'plot'</span>,</span>
<span id="cb1-102">        <span class="at" style="color: #657422;">plot.caption.position =</span> <span class="st" style="color: #20794D;">'plot'</span>,</span>
<span id="cb1-103">        <span class="at" style="color: #657422;">axis.title =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb1-104">        <span class="at" style="color: #657422;">axis.text =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">family=</span>font,</span>
<span id="cb1-105">                                          <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">18</span>,</span>
<span id="cb1-106">                                          <span class="at" style="color: #657422;">color=</span><span class="st" style="color: #20794D;">"grey47"</span>),</span>
<span id="cb1-107">        <span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"none"</span>,</span>
<span id="cb1-108">        <span class="at" style="color: #657422;">title =</span> <span class="fu" style="color: #4758AB;">element_text</span>(),</span>
<span id="cb1-109">        <span class="at" style="color: #657422;">axis.line.x =</span> <span class="fu" style="color: #4758AB;">element_line</span>(<span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">0.7</span>, <span class="at" style="color: #657422;">linetype =</span> <span class="st" style="color: #20794D;">"solid"</span>),</span>
<span id="cb1-110">        <span class="at" style="color: #657422;">axis.ticks.y =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb1-111">        <span class="at" style="color: #657422;">axis.ticks.length.x =</span> <span class="fu" style="color: #4758AB;">unit</span>(<span class="dv" style="color: #AD0000;">7</span>, <span class="at" style="color: #657422;">units =</span> <span class="st" style="color: #20794D;">"points"</span> ),</span>
<span id="cb1-112">        <span class="at" style="color: #657422;">axis.text.x =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">margin=</span><span class="fu" style="color: #4758AB;">margin</span>(<span class="at" style="color: #657422;">t =</span> <span class="dv" style="color: #AD0000;">15</span>, <span class="at" style="color: #657422;">b =</span> <span class="dv" style="color: #AD0000;">10</span>)),</span>
<span id="cb1-113">        <span class="at" style="color: #657422;">panel.grid.minor =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb1-114">        <span class="at" style="color: #657422;">panel.grid.major.y =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_line</span>(<span class="at" style="color: #657422;">color=</span><span class="st" style="color: #20794D;">"#cbcbcb"</span>),</span>
<span id="cb1-115">        <span class="at" style="color: #657422;">panel.grid.major.x =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb1-116">        <span class="at" style="color: #657422;">panel.background =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb1-117">  )</span>
<span id="cb1-118"></span>
<span id="cb1-119">p</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://www.zakvarty.com/blog/2022-10-15-BBC-temperature-plot/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid" alt="My dumbbell plot showing stations with the largest gaps between previous and new records, ordered by the highest new temperature." width="960"></p>
</div>
</div>


</section>

 ]]></description>
  <category>data visualisation</category>
  <guid>https://www.zakvarty.com/blog/2022-10-15-BBC-temperature-plot/index.html</guid>
  <pubDate>Fri, 14 Oct 2022 23:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2022-10-15-BBC-temperature-plot/zdv-temperature-records.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Tidy Tuesday: Ravelry Yarn</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2022-10-11-ravelry-tidy-tuesday/index.html</link>
  <description><![CDATA[ 



<p>For my first Tidy Tuesday I kept things simple with a stacked bar chart.</p>
<p>I have made several plots using <code>{ggplot2}</code> before, but this was my first attempt at making one aesthetically pleasing (forgive the pun).</p>
<p>When making this plot I learned about using custom font, colours, annotations and arrows from a lot of <a href="https://twitter.com/nrennie" title="Nicola Rennie - Twitter">@nrennie</a>’s past examples.</p>
<p>Code and figure down below ↓</p>
<div class="cell" data-fig.dpi="100">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Load Packages ----</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(tidyr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">library</span>(forcats)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;">library</span>(showtext)</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;"># Load Fonts ----</span></span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;">font_add_google</span>(<span class="at" style="color: #657422;">name =</span> <span class="st" style="color: #20794D;">"Indie Flower"</span>, <span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">"indie-flower"</span>)</span>
<span id="cb1-10"><span class="fu" style="color: #4758AB;">font_add_google</span>(<span class="at" style="color: #657422;">name =</span> <span class="st" style="color: #20794D;">"Permanent Marker"</span>, <span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">"marker"</span>)</span>
<span id="cb1-11"><span class="fu" style="color: #4758AB;">showtext_auto</span>()</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;"># Load Data ----</span></span>
<span id="cb1-14">url <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"https://github.com/rfordatascience/tidytuesday/raw/master/data/2022/2022-10-11/yarn.csv"</span></span>
<span id="cb1-15">yarn <span class="ot" style="color: #003B4F;">&lt;-</span> readr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">read_csv</span>(<span class="at" style="color: #657422;">file =</span> url)</span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;"># Data Handling ----</span></span>
<span id="cb1-18"></span>
<span id="cb1-19">other_weight_names <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb1-20">  <span class="st" style="color: #20794D;">"Thread"</span>,</span>
<span id="cb1-21">  <span class="st" style="color: #20794D;">"Cobweb"</span>,</span>
<span id="cb1-22">  <span class="st" style="color: #20794D;">"Jumbo"</span>,</span>
<span id="cb1-23">  <span class="st" style="color: #20794D;">"DK / Sport"</span>,</span>
<span id="cb1-24">  <span class="st" style="color: #20794D;">"Aran / Worsted"</span>,</span>
<span id="cb1-25">  <span class="st" style="color: #20794D;">"No weight specified"</span>)</span>
<span id="cb1-26"></span>
<span id="cb1-27">yarn_data <span class="ot" style="color: #003B4F;">&lt;-</span> yarn <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-28">  <span class="fu" style="color: #4758AB;">select</span>(yarn_weight_name) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-29">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">yarn_weight_name =</span> <span class="fu" style="color: #4758AB;">as.character</span>(yarn_weight_name)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-30">  <span class="fu" style="color: #4758AB;">mutate_at</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"yarn_weight_name"</span>), <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">replace_na</span>(.,<span class="st" style="color: #20794D;">"Missing"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-31">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">name =</span> <span class="fu" style="color: #4758AB;">fct_collapse</span>(yarn_weight_name, <span class="at" style="color: #657422;">Other =</span> other_weight_names)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-32">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">name =</span> <span class="fu" style="color: #4758AB;">fct_collapse</span>(name, <span class="st" style="color: #20794D;">"Double Knit"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"DK"</span>))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-33">  <span class="fu" style="color: #4758AB;">group_by</span>(name) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-34">  <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">value =</span> <span class="fu" style="color: #4758AB;">n</span>())</span>
<span id="cb1-35"></span>
<span id="cb1-36"><span class="co" style="color: #5E5E5E;"># Helper data frames for adding arrows to plot</span></span>
<span id="cb1-37">arrow_df_1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">x1 =</span> <span class="dv" style="color: #AD0000;">27000</span>, <span class="at" style="color: #657422;">x2 =</span> <span class="dv" style="color: #AD0000;">27000</span>, <span class="at" style="color: #657422;">y1 =</span> <span class="fl" style="color: #AD0000;">7.5</span>, <span class="at" style="color: #657422;">y2 =</span> <span class="fl" style="color: #AD0000;">10.4</span>)</span>
<span id="cb1-38">arrow_df_2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">x1 =</span> <span class="dv" style="color: #AD0000;">27000</span>, <span class="at" style="color: #657422;">x2 =</span> <span class="dv" style="color: #AD0000;">19000</span>, <span class="at" style="color: #657422;">y1 =</span> <span class="fl" style="color: #AD0000;">7.5</span>, <span class="at" style="color: #657422;">y2 =</span> <span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb1-39"></span>
<span id="cb1-40"><span class="co" style="color: #5E5E5E;"># Making Plot ----</span></span>
<span id="cb1-41"></span>
<span id="cb1-42">bar_colour <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"#483248"</span></span>
<span id="cb1-43">bg_colour <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"#FEFBEA"</span></span>
<span id="cb1-44">title_font <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"marker"</span></span>
<span id="cb1-45">main_font <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"indie-flower"</span></span>
<span id="cb1-46"></span>
<span id="cb1-47">yarn_plot <span class="ot" style="color: #003B4F;">&lt;-</span> yarn_data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-48">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">reorder</span>(name, value), <span class="at" style="color: #657422;">x =</span> value)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-49">  <span class="fu" style="color: #4758AB;">geom_bar</span>(<span class="at" style="color: #657422;">stat =</span> <span class="st" style="color: #20794D;">"identity"</span>, <span class="at" style="color: #657422;">fill =</span> bar_colour) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-50">  <span class="fu" style="color: #4758AB;">theme_void</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-51">  <span class="fu" style="color: #4758AB;">ggtitle</span>(<span class="st" style="color: #20794D;">" </span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;"> Yarn weights on Ravelry, ordered by frequency"</span>,<span class="at" style="color: #657422;">subtitle =</span> <span class="st" style="color: #20794D;">" "</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-52">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">axis.title =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb1-53">        <span class="at" style="color: #657422;">axis.text =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb1-54">        <span class="at" style="color: #657422;">axis.ticks =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb1-55">        <span class="at" style="color: #657422;">text =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">family =</span> main_font),</span>
<span id="cb1-56">        <span class="at" style="color: #657422;">plot.background =</span> <span class="fu" style="color: #4758AB;">element_rect</span>(<span class="at" style="color: #657422;">fill =</span> bg_colour, <span class="at" style="color: #657422;">colour =</span> bg_colour),</span>
<span id="cb1-57">        <span class="at" style="color: #657422;">panel.background =</span> <span class="fu" style="color: #4758AB;">element_rect</span>(<span class="at" style="color: #657422;">fill =</span> bg_colour, <span class="at" style="color: #657422;">colour =</span> bg_colour),</span>
<span id="cb1-58">        <span class="at" style="color: #657422;">plot.title =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">family =</span> title_font, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">22</span>, <span class="at" style="color: #657422;">hjust =</span> <span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb1-59">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-60">  <span class="fu" style="color: #4758AB;">lims</span>(<span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">28000</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-61">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> name, <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">200</span>),</span>
<span id="cb1-62">            <span class="at" style="color: #657422;">color =</span> bg_colour,</span>
<span id="cb1-63">            <span class="at" style="color: #657422;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb1-64">            <span class="at" style="color: #657422;">family =</span> main_font,</span>
<span id="cb1-65">            <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-66">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> value),</span>
<span id="cb1-67">            <span class="at" style="color: #657422;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb1-68">            <span class="at" style="color: #657422;">nudge_x =</span> <span class="dv" style="color: #AD0000;">200</span>,</span>
<span id="cb1-69">            <span class="at" style="color: #657422;">color =</span> bar_colour,</span>
<span id="cb1-70">            <span class="at" style="color: #657422;">family =</span> main_font,</span>
<span id="cb1-71">            <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">6</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-72">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"The most popular yarn weights </span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">  are 'Fingering' and 'Double Knit'"</span>,</span>
<span id="cb1-73">                <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">20000</span>,</span>
<span id="cb1-74">                <span class="at" style="color: #657422;">y =</span> <span class="fl" style="color: #AD0000;">6.7</span>),</span>
<span id="cb1-75">            <span class="at" style="color: #657422;">family =</span> main_font,</span>
<span id="cb1-76">            <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">7</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-77">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"There were more missing yarn weights </span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;"> than in all remaining categories combined"</span>,</span>
<span id="cb1-78">                <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">18000</span>,</span>
<span id="cb1-79">                <span class="at" style="color: #657422;">y =</span> <span class="fl" style="color: #AD0000;">1.6</span>),</span>
<span id="cb1-80">            <span class="at" style="color: #657422;">family =</span> main_font,</span>
<span id="cb1-81">            <span class="at" style="color: #657422;">size  =</span> <span class="dv" style="color: #AD0000;">7</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-82">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"}"</span>),</span>
<span id="cb1-83">            <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">7000</span>,</span>
<span id="cb1-84">            <span class="at" style="color: #657422;">y =</span> <span class="fl" style="color: #AD0000;">1.5</span>,</span>
<span id="cb1-85">            <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">19</span>,</span>
<span id="cb1-86">            <span class="at" style="color: #657422;">family =</span> main_font) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-87">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Tidy Tuesday 11 Oct 2022 | Data: Ravelry |  @zakvarty"</span>),</span>
<span id="cb1-88">            <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">29000</span>,</span>
<span id="cb1-89">            <span class="at" style="color: #657422;">y =</span> <span class="fl" style="color: #AD0000;">4.5</span>,</span>
<span id="cb1-90">            <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">5</span>,</span>
<span id="cb1-91">            <span class="at" style="color: #657422;">family =</span> main_font,</span>
<span id="cb1-92">            <span class="at" style="color: #657422;">angle =</span> <span class="dv" style="color: #AD0000;">270</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-93">  <span class="fu" style="color: #4758AB;">geom_curve</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> x1, <span class="at" style="color: #657422;">y =</span> y1, <span class="at" style="color: #657422;">xend =</span> x2, <span class="at" style="color: #657422;">yend =</span> y2),</span>
<span id="cb1-94">             <span class="at" style="color: #657422;">data =</span> arrow_df_1,</span>
<span id="cb1-95">             <span class="at" style="color: #657422;">arrow =</span> <span class="fu" style="color: #4758AB;">arrow</span>(<span class="at" style="color: #657422;">length =</span> <span class="fu" style="color: #4758AB;">unit</span>(<span class="fl" style="color: #AD0000;">0.03</span>, <span class="st" style="color: #20794D;">"npc"</span>))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-96">  <span class="fu" style="color: #4758AB;">geom_curve</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> x1, <span class="at" style="color: #657422;">y =</span> y1, <span class="at" style="color: #657422;">xend =</span> x2, <span class="at" style="color: #657422;">yend =</span> y2),</span>
<span id="cb1-97">             <span class="at" style="color: #657422;">data =</span> arrow_df_2,</span>
<span id="cb1-98">             <span class="at" style="color: #657422;">arrow =</span> <span class="fu" style="color: #4758AB;">arrow</span>(<span class="at" style="color: #657422;">length =</span> <span class="fu" style="color: #4758AB;">unit</span>(<span class="fl" style="color: #AD0000;">0.03</span>, <span class="st" style="color: #20794D;">"npc"</span>)))</span>
<span id="cb1-99"></span>
<span id="cb1-100">yarn_plot</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://www.zakvarty.com/blog/2022-10-11-ravelry-tidy-tuesday/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid" alt="Stacked bar chart of yarn weights on Ravelry. Bars are descending order by their frequency, with yarn-type labels written within the bars and count values to the right of the bars. Annotations indicate that the most popular yarn weights are 'Fingering' and 'Double Knit', and that there were more missing yarn weights than in all remaining categories combined." width="768"></p>
</div>
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Exported as 8x8 inch pdf and 800x700 png</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;"># (next time start by setting canvas size!)</span></span></code></pre></div>
</details>
</div>



 ]]></description>
  <category>data visualisation</category>
  <category>tidy tuesday</category>
  <guid>https://www.zakvarty.com/blog/2022-10-11-ravelry-tidy-tuesday/index.html</guid>
  <pubDate>Tue, 11 Oct 2022 23:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2022-10-11-ravelry-tidy-tuesday/2022-10-11-tidy-tuesday-ravelry.png" medium="image" type="image/png" height="126" width="144"/>
</item>
<item>
  <title>Recommended Statistics Books</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2022-10-10-statistics-books/index.html</link>
  <description><![CDATA[ 



<section id="statistics-and-statistical-inference-books" class="level2">
<h2 class="anchored" data-anchor-id="statistics-and-statistical-inference-books">Statistics and Statistical Inference Books</h2>
<div class="medium_right">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2022-10-10-statistics-books/blackwells-maths-section.jpg" alt="Photograph of the mathematics section of Blackwell's book shop in Oxford."></p>
</div>
<p>While teaching a course on supervised learning last year, several students asked about what books I would recommended on statistical inference and modelling.</p>
<p>For context, the students on this course are all highly numerate and studying at the postgraduate level. What makes this request challenging is the broad range of student backgrounds, some students had a maths degree but the majority are trained and work as engineers, physicists or computer scientists.</p>
<p>This variety in backgrounds and exposure to undergraduate level statistics made recommending a single book difficult. Instead, I compiled a list of books that I have enjoyed or found useful. For each book I tried to give some guidance on whether it might match with their current statistical knowledge and what they are trying to achieve. I gave a brief description of the level and target audience of each text, which I reproduce below.</p>
<p>When evaluating whether these resources might suit your current needs, I find it helpful to skim through a section on a topic that you already know (such as linear regression). This is usually the fastest and most reliable way to assess if the book is going to be a good fit for you.</p>
<p>This list is by no means exhaustive. If you know of any gems that I have not included in this list, please do let me know!</p>
<section id="mathematical-statistics-and-data-analysis---john-a.-rice" class="level3">
<h3 class="anchored" data-anchor-id="mathematical-statistics-and-data-analysis---john-a.-rice">Mathematical Statistics and Data Analysis - John A. Rice</h3>
<p><br></p>
<div class="small_left">
<p><img style="border-radius: 2%;" src="https://www.zakvarty.com/blog/2022-10-10-statistics-books/rice.jpg" alt="Cover of Mathematical Statistics and Data Analysis by John A. Rice."></p>
</div>
<p><span class="citation" data-cites="rice2007mathematical">Rice (2007)</span> covers the basics of probability and statistics usually contained in the first couple of undergraduate statistics courses. Generally the first university courses are a bit dry, building up the required knowledge to do interesting things. This book is slightly better than the average treatment in terms of readability and is fairly comprehensive, making it well suited as a reference text. This is a book full of all the stuff you might once have known but have now forgotten, or never studied before.</p>
<p><br></p>
</section>
<section id="essential-medical-statistics---betty-kirkwood-and-jonathan-sterne" class="level3">
<h3 class="anchored" data-anchor-id="essential-medical-statistics---betty-kirkwood-and-jonathan-sterne">Essential Medical Statistics - Betty Kirkwood and Jonathan Sterne</h3>
<div class="small_left">
<p><img style="border-radius: 2%;" src="https://www.zakvarty.com/blog/2022-10-10-statistics-books/kirkwood.jpg" alt="Cover of Essential Medical Statistics by Betty Kirkwood and Jonathan Sterne."></p>
</div>
<p><br></p>
<p><span class="citation" data-cites="kirkwood2010essential">Kirkwood and Sterne (2010)</span> focuses on more advanced topics in statistics, such as inference, hypothesis testing and modelling. However, it approaches these from an applications perspective. While all of the applications it uses are from medical statistics, the authors give sufficient context that you do not need to be familiar with this area before reading. This is a very readable book, with a moderate amount of mathematical detail. I find myself revisiting it quite often.</p>
<p><br></p>
</section>
<section id="core-statistics---simon-wood" class="level3">
<h3 class="anchored" data-anchor-id="core-statistics---simon-wood">Core Statistics - Simon Wood</h3>
<div class="small_left">
<p><img style="border-radius: 2%;" src="https://www.zakvarty.com/blog/2022-10-10-statistics-books/wood.jpg" alt="Cover of Core Statistics by Simon Wood."></p>
</div>
<p><span class="citation" data-cites="wood2015core">Wood (2015)</span> gives an introduction to the core topics in statistics aimed at new graduate-level students. It is mathematically dense but written in an approachable manner and (unsurprisingly) covers all the core ideas of statistics. This means that is often a good source to get an overview of a topic and to cover the key points in that area quickly. It is probably wise to supplement this with a more applied text to see worked examples and to a more detailed text for topics that you need to explore in greater detail.</p>
<p><br></p>
</section>
<section id="in-all-likelihood---yudi-pawitan" class="level3">
<h3 class="anchored" data-anchor-id="in-all-likelihood---yudi-pawitan">In All Likelihood - Yudi Pawitan</h3>
<div class="small_left">
<p><img style="border-radius: 2%;" src="https://www.zakvarty.com/blog/2022-10-10-statistics-books/pawitan.jpg" alt="Cover of In All Likelihood by Yudi Pawitan."></p>
</div>
<p><br></p>
<p><span class="citation" data-cites="pawitan2001all">Pawitan (2001)</span> focuses entirely on likelihood inference and covers both theory and applications in a great deal of detail. I highly recommend this to supplement frequentist topics covered in core statistics and the elements of statistical learning. It builds up from very little assumed knowledge but also goes on to cover some very advanced topics in later chapters.</p>
<p><br> <br></p>
</section>
<section id="kendalls-advanced-theory-of-statistics---alan-stuart-et-al." class="level3">
<h3 class="anchored" data-anchor-id="kendalls-advanced-theory-of-statistics---alan-stuart-et-al.">Kendall’s Advanced Theory of Statistics - Alan Stuart et al.</h3>
<div class="small_left">
<p><img style="border-radius: 2%;" src="https://www.zakvarty.com/blog/2022-10-10-statistics-books/kendall-1.webp" alt="Cover of Kendall's Advanced Theory of Statistics."></p>
</div>
<p><br></p>
<p><span class="citation" data-cites="kendall1987kendall">Kendall, Stuart, and Ord (1987)</span> is an alternative to In All Likelihood, aimed at a similar audience and level. Split over several volumes this is good to do a deep-dive into a particular topic but probably not one to try and read cover to cover!</p>
<p><br> <br> <br> <br></p>
</section>
</section>
<section id="bayesian-statistics" class="level2">
<h2 class="anchored" data-anchor-id="bayesian-statistics">Bayesian Statistics</h2>
<p>We only consider frequentist approaches to inference in this course. However, I would be remiss to not include some Bayesian texts and leave you with the impression that classical or frequentist approaches to statistics are the only option.</p>
<p>Many of the topics we cover in supervised learning can be considered from a Bayesian perspective. A Bayesian statistician does not treat our model parameters as fixed but unknown quantities, instead they consider the parameters as random variables and use probability distributions to describe their (or our) beliefs about the parameter values.</p>
<p>You might find the following books useful, either during or after the Bayesian inference course. The former is more theoretical, while the latter has a more applied focus.</p>
<p><em>Kendall’s advanced theory of statistics. Vol. 2B, Bayesian inference.</em> <span class="citation" data-cites="ohagan2004kendall">(O’Hagan and Forster 2004)</span></p>
<p><em>Bayesian Data Analysis - Gelman et al.</em> <span class="citation" data-cites="gelman2013bayesian">(Gelman et al. 2013)</span></p>



</section>

<div id="quarto-appendix"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-gelman2013bayesian" class="csl-entry">
Gelman, Andrew, John B Carlin, Hal S. Stern, David B Dunson, Aki Vehtari, and Donald B Rubin. 2013. <em>Bayesian Data Analysis</em>. 3rd ed. <span>Chapman and Hall</span>.
</div>
<div id="ref-kendall1987kendall" class="csl-entry">
Kendall, Maurice George, Alan Stuart, and J Keith Ord. 1987. <em>Kendall’s Advanced Theory of Statistics</em>. Oxford University Press.
</div>
<div id="ref-kirkwood2010essential" class="csl-entry">
Kirkwood, Betty R, and Jonathan AC Sterne. 2010. <em>Essential Medical Statistics</em>. John Wiley &amp; Sons.
</div>
<div id="ref-ohagan2004kendall" class="csl-entry">
O’Hagan, Anthony, and Jonathan J Forster. 2004. <em>Kendall’s Advanced Theory of Statistics, Volume 2b: Bayesian Inference</em>. Vol. 2b. Arnold.
</div>
<div id="ref-pawitan2001all" class="csl-entry">
Pawitan, Yudi. 2001. <em>In All Likelihood: Statistical Modelling and Inference Using Likelihood</em>. Oxford University Press.
</div>
<div id="ref-rice2007mathematical" class="csl-entry">
Rice, John A. 2007. <em>Mathematical Statistics and Data Analysis</em>. Thomson.
</div>
<div id="ref-wood2015core" class="csl-entry">
Wood, Simon N. 2015. <em>Core Statistics</em>. Cambridge University Press.
</div>
</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{varty2022,
  author = {Zak Varty},
  title = {Recommended {Statistics} {Books}},
  date = {2022-10-10},
  url = {https://www.zakvarty.com/blog/2022-10-10-statistics-books},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-varty2022" class="csl-entry quarto-appendix-citeas">
Zak Varty. 2022. <span>“Recommended Statistics Books.”</span> October
10, 2022. <a href="https://www.zakvarty.com/blog/2022-10-10-statistics-books">https://www.zakvarty.com/blog/2022-10-10-statistics-books</a>.
</div></div></section></div> ]]></description>
  <category>academic skills</category>
  <category>reading</category>
  <guid>https://www.zakvarty.com/blog/2022-10-10-statistics-books/index.html</guid>
  <pubDate>Sun, 09 Oct 2022 23:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2022-10-10-statistics-books/blackwells-maths-section.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Writing a rhetorical précis</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2022-10-07-rhetorical-precis/index.html</link>
  <description><![CDATA[ 



<p>Photo by <a href="https://unsplash.com/@qwitka?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Maksym Kaharlytskyi</a> on <a href="https://unsplash.com/s/photos/filing-cabinet?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a></p>
<section id="what-is-a-rhetorical-precis" class="level2">
<h2 class="anchored" data-anchor-id="what-is-a-rhetorical-precis">What is a rhetorical precis?</h2>
<div class="medium_right">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2022-10-07-rhetorical-precis/maksym-kaharlytskyi-Q9y3LRuuxmg-unsplash.jpg" alt="Photograph of a filing cabinet filled with library index cards."></p>
</div>
<p>A rhetorical precis is a short summary and analysis of a piece of writing, which considers both the content and the delivery of the piece.</p>
<p>A rhetorical precis serves to summarise and analyse the text through:</p>
<ul>
<li>an accurate bibliographic reference to the text,</li>
<li>a list of keywords relating to the text,</li>
<li>a highly structured four-sentence paragraph providing a summary and analysis of the text.</li>
</ul>
</section>
<section id="why-write-one" class="level2">
<h2 class="anchored" data-anchor-id="why-write-one">Why write one?</h2>
<p>Keeping a rhetorical precis for each text that you read is a fantasitc way to build the skills of active reading and succinct writing. A rhetorical precis is more informative than a bib entry and more easily reviewed <em>(read: waded through)</em> than a stack of annotated papers.</p>
<p>Taken collectively, a set of rhetorical precis summaries provide a reading record that can be a tremendously useful when trying to recall the contents of a paper or book long after you originally read it.</p>
</section>
<section id="how-to-store-them" class="level2">
<h2 class="anchored" data-anchor-id="how-to-store-them">How to store them?</h2>
<p>Writing and storing these reading summaries electronically can make them even more useful. This allows you to search for topics, target audiences or keywords.</p>
<p>For this reason it can be helpful to keep them all together in one word document or plain text file. Alternatively, having a single folder with each summary as a plain text or markdown file works well if you are comfortable with searching at the command line. The same can be achieved by writing these summaries within a reference manager, if that is something you are invested in already.</p>
</section>
<section id="definition" class="level2">
<h2 class="anchored" data-anchor-id="definition">Definition</h2>
<p>Just to prove that I’m not making all this up:</p>
<blockquote class="blockquote">
<p>A rhetorical precis analyzes both the content (the what) and the delivery (the how) of a unit of spoken or written discourse. It is a highly structured four-sentence paragraph blending summary and analysis. Each of the four sentences requires specific information; students are expected to use brief quotations (to convey a sense of the author’s style and tone) and to include a terminal bibliographic reference. Practicing this sort of writing fosters precision in both reading and writing, forcing a writer to employ a variety of sentence structures and to develop a discerning eye for connotative shades of meaning. <br> <strong>Attribution:</strong> <a href="https://courses.lumenlearning.com/englishcomp2kscopex92x2/chapter/rhetorical-precis/">lumenlearning.com</a></p>
</blockquote>
</section>
<section id="format" class="level2">
<h2 class="anchored" data-anchor-id="format">Format</h2>
<p>Four sentences summarising the aim of the work, how this is addressed, why it is important and a description of the target audience.</p>
<ol type="1">
<li>Name of author, [optional phrase describing author], genre and title of work, date in parentheses (additional publishing information in parentheses); a rhetorically accurate verb (such as “asserts,” “argues,” suggests,” “implies,” claims,” etc.); a THAT clause containing the major assertion or thesis statement of the work.</li>
<li>An explanation of <em>how</em> the author develops and/or supports the thesis, usually in chronological order.</li>
<li>A statement of the author’s purpose followed by an “in order to” phrase.</li>
<li>A description of the intended audience and/or the essay’s tone</li>
</ol>
</section>
<section id="a-self-indulgent-example" class="level2">
<h2 class="anchored" data-anchor-id="a-self-indulgent-example">A (self-indulgent) example</h2>
<p>Here is a rather self-indulgent example of a rhetorical precis.</p>
<hr>
<p><code>varty2021inference</code></p>
<p><strong>Title:</strong> <em>Inference for extreme earthquake magnitudes accounting for a time-varying measurement process. {ArXiV preprint, 2021} (20 pages).</em></p>
<p><strong>Authors:</strong> <em>Zak Varty, Jonathan Tawn, Peter Atkinson and Stijn Bierman.</em></p>
<p><strong>Key words:</strong> <em>extreme value</em>, <em>earthquake</em>, <em>threshold selection</em>, <em>magnitude of completion</em>, <em>seismology</em>, <em>bootstrap.</em></p>
<p>In this paper, Varty et al (2021) propose a new threshold selection method for modelling earthquake catalogues, where the magnitude distribution is stationary but detection of small events improves over time. The paper generalises the Gutenberg-Richter law to the GPD and uses metrics based on PP and QQ plots to balance between bias and variance when selecting a time-varying threshold. This procedure more than doubles the usable catalogue size for Groningen earthquakes and gives the first emprircal evidence that the magnitude distribution in this region has a finite upper end point. The paper is targeted at applied and research statisticians with an interest in EVT but would also be accessible to a statistically-minded seismologist.</p>
<hr>
</section>
<section id="a-template-for-new-entries" class="level2">
<h2 class="anchored" data-anchor-id="a-template-for-new-entries">A template for new entries</h2>
<hr>
<p><code>firstauthorYYYYkeyword</code></p>
<p><strong>Title:</strong> <em>Title goes here. {Journal, YYYY} (NN pages).</em></p>
<p><strong>Authors:</strong> <em>Author One, Author Two and Author Three. (optional affiliations)</em></p>
<p><strong>Key words:</strong> <em>key word 1</em>, <em>key word 2</em>, <em>key work 3</em>.</p>
<ol type="1">
<li><em>What</em> is the document and <em>what</em> does it say?</li>
<li><em>How</em> do they do / show this?</li>
<li><em>Why</em> are they bothering to do this in the first place?</li>
<li><em>Who</em> is the intended audience for this work?</li>
</ol>
<p>In this DOC_TYPE, AUTHOUR VERB that THESIS_STATEMENT. They DO/SHOW this by ACTIONS. This is important to PEOPLE because REASONS. This work would be useful when PEOPLE are doing ACTIVITY.</p>
<hr>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb1-1"><span class="in" style="color: #5E5E5E;">`firstauthorYYYYkeyword`</span></span>
<span id="cb1-2"></span>
<span id="cb1-3">**Title:** _Title goes here. {Journal, YYYY} (NN pages)._</span>
<span id="cb1-4"></span>
<span id="cb1-5">**Authors:** _Author One, Author Two and Author Three. (optional affiliations)_</span>
<span id="cb1-6"></span>
<span id="cb1-7">**Key words:** _key word 1_, _key word 2_, _key work 3_. </span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="ss" style="color: #20794D;">1. </span>_What_ is the document and _what_ does it say? </span>
<span id="cb1-10"><span class="ss" style="color: #20794D;">2. </span>_How_ do they do / show this?</span>
<span id="cb1-11"><span class="ss" style="color: #20794D;">3. </span>_Why_ are they bothering to do this in the first place?</span>
<span id="cb1-12"><span class="ss" style="color: #20794D;">4. </span>_Who_ is the intended audience for this work?</span>
<span id="cb1-13"></span>
<span id="cb1-14">In this DOC_TYPE, AUTHOUR VERB that THESIS<span class="sc" style="color: #5E5E5E;">\_</span>STATEMENT.</span>
<span id="cb1-15">They DO/SHOW this by ACTIONS. </span>
<span id="cb1-16">This is important to PEOPLE because REASONS. </span>
<span id="cb1-17">This work would be useful when PEOPLE are doing ACTIVITY.</span></code></pre></div>
<hr>


</section>

<div id="quarto-appendix"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{varty2022,
  author = {Zak Varty},
  title = {Writing a Rhetorical Précis},
  date = {2022-10-07},
  url = {https://www.zakvarty.com/blog/2022-10-07-rhetorical-precis},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-varty2022" class="csl-entry quarto-appendix-citeas">
Zak Varty. 2022. <span>“Writing a Rhetorical Précis.”</span> October 7,
2022. <a href="https://www.zakvarty.com/blog/2022-10-07-rhetorical-precis">https://www.zakvarty.com/blog/2022-10-07-rhetorical-precis</a>.
</div></div></section></div> ]]></description>
  <category>academic skills</category>
  <category>writing</category>
  <category>reading</category>
  <guid>https://www.zakvarty.com/blog/2022-10-07-rhetorical-precis/index.html</guid>
  <pubDate>Thu, 06 Oct 2022 23:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2022-10-07-rhetorical-precis/maksym-kaharlytskyi-Q9y3LRuuxmg-unsplash.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Setting up a quarto blog</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2022-09-26-adding-a-quarto-blog/index.html</link>
  <description><![CDATA[ 



<section id="what-am-i-trying-to-do" class="level1">
<h1>What am I trying to do?</h1>
<div class="medium_right">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2022-09-26-adding-a-quarto-blog/florian-klauer-mk7D-4UCfmg-unsplash.jpg" alt="Mechanical typewriter on white background"></p>
</div>
<p>My aim here is to set up a blog within an existing quarto website. I want the blog to be a sub-domain of the main site (<code>zakvarty.com/blog</code>) and for it to inherit the styling of that site.</p>
<p>It probably would have been easier to make the blog a sub domain (<code>blog.zakvarty.com</code>) and use two separate but matching style files to make those sites look coherent. However, I wanted to make the most of the built in search features on quarto websites and am a glutton for punishment.</p>
<p>Credit to <a href="https://ddimmery.com/">Drew Dimmery</a>, whose website I used alongside the <a href="https://quarto.org/docs/guide/">quarto docs</a> to work out how to get all these pieces working together.</p>
</section>
<section id="steps" class="level1">
<h1>Steps</h1>
<ol type="1">
<li>Create a subdirectory of the website called <code>blog/</code>. This has sub-folders for each blog post and will contain the files of metadata that are common to all blog posts (e.g.&nbsp;default settings for YAML headers information and a bibliography file). <!-- --></li>
<li>Create a <a href="https://quarto.org/docs/websites/website-listings.html">listing page</a> called <code>blog.qmd</code> in the root directory. This will become the blog “landing page” and what we will point to from the website header. <!-- --></li>
<li>Add a “Blog” header item to the <code>_quarto.yml</code> file for the website and set the <code>link:</code> for this to be <code>blog.qmd</code> <!-- --></li>
<li>Added a simple example post to the <code>blog/</code> directory. See for example my <a href="https://www.github.com/zakvarty/quarto-website/blog/hello-world/">hello-world</a> post. <!-- --></li>
<li>Adjust the default YAML parameters for the blog posts by making the file <code>blog/_metadata.yml</code>. These default values can be overwritten by specifying them again in the YAML header at the top of any individual post. For examples of what you might want to include see <a href="https://www.github.com/zakvarty/quarto-website/blog/_metadata.yml">my file</a> or the <a href="https://quarto.org/docs/projects/quarto-projects.html">projects section</a> of the quarto docs. <!-- --></li>
<li>Add a simple bibliography file, called <code>library.bib</code> or similar to the <code>blog/</code> directory. Set this as the default bibliography file for each blog post by adding <code>bibliography: ../library.bib</code> to <code>blog/_metadata.yml</code>. <!-- --></li>
<li>(optional) Create a post template so that you don’t have to memorise header fields. <!-- --></li>
<li>Set your “Hello, World!” and template posts to have <code>draft: true</code> in their headers. This will prevent them from showing up on your website. <!-- --></li>
<li>Set your “Hello, World!” and template posts to have <code>freeze: true</code> in their headers. This will prevent any code in them from re-running each time the website is rendered.</li>
</ol>
<p>Freezing the code within posts will improve the build speed, as well as make the website more stable and portable. See the quarto docs on <a href="https://quarto.org/docs/websites/website-blog.html#freezing-posts">freezing posts</a> for more details. My current plan is to have this as <code>false</code> by default and change to <code>true</code> on publication of each post.</p>
</section>
<section id="checking-that-references-work" class="level1">
<h1>Checking that references work</h1>
<p>I have set up a single bibtex file in which to store references for all posts. This lives in the <code>blog/</code> directory and is set as the default <code>bibliography</code> parameter for each post in the file <code>blog/_metadata.yml</code>.</p>
<p>This is an in-line reference to <span class="citation" data-cites="wan2020network">Wan et al. (2020)</span> written as <code>@citationkey</code>. Parenthetical references, such as <span class="citation" data-cites="wan2020network">(Wan et al. 2020)</span>, are written using <code>[@citationkey]</code>. These can be strung together by separating each citation key with a semicolon, for example <span class="citation" data-cites="wan2020network wan2020network">(Wan et al. 2020, 2020)</span>.</p>
<p>To let people know the license your work is under and how they should cite your blog posts you can use the <code>appendix-style</code> argument. This can be added to the YAML header of individual blog posts or you can specify a default value in <code>blog/_metadata.yml</code>. There are three options for this parameter:</p>
<ul>
<li><code>default</code> does some nice formatting and makes the text a bit smaller than the rest of the article;</li>
<li><code>plain</code> matches the style of the rest of your post;</li>
<li><code>none</code> does not add any citation details to the end of your post.</li>
</ul>
<p>I’m currently using some pretty hacky CSS to style this website so am limited to the latter two options for now. In the process of writing this article I stumbled across some neat SCSS that I hope will fix this issue that I have made for myself! [Update: I changed to SCSS and this is now fixed!]</p>
<p><em>Note: When adding references to your posts, make sure that the <code>site-URL</code> field in your website’s <code>quarto.yml</code> does not have a trailing slash - this will be copied into the reference and break the links.</em></p>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-wan2020network" class="csl-entry">
Wan, Phyllis, Tiandong Wang, Richard A Davis, and Sidney I Resnick. 2020. <span>“Are Extreme Value Estimation Methods Useful for Network Data?”</span> <em>Extremes</em> 23 (1): 171–95.
</div>
</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{varty2022,
  author = {Zak Varty},
  title = {Setting up a Quarto Blog},
  date = {2022-09-26},
  url = {https://www.zakvarty.com/blog/2022-09-26-adding-a-quarto-blog},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-varty2022" class="csl-entry quarto-appendix-citeas">
Zak Varty. 2022. <span>“Setting up a Quarto Blog.”</span> September 26,
2022. <a href="https://www.zakvarty.com/blog/2022-09-26-adding-a-quarto-blog">https://www.zakvarty.com/blog/2022-09-26-adding-a-quarto-blog</a>.
</div></div></section></div> ]]></description>
  <category>quarto</category>
  <category>tutorial</category>
  <guid>https://www.zakvarty.com/blog/2022-09-26-adding-a-quarto-blog/index.html</guid>
  <pubDate>Sun, 25 Sep 2022 23:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2022-09-26-adding-a-quarto-blog/florian-klauer-mk7D-4UCfmg-unsplash.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Hello, World!</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2022-09-26-hello-world/index.html</link>
  <description><![CDATA[ 



<section id="some-text" class="level1">
<h1>Some Text</h1>
<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry’s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>
</section>
<section id="some-code" class="level1">
<h1>Some Code</h1>
<div class="cell" data-layout-align="center">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">par</span>(<span class="at" style="color: #657422;">bg =</span> <span class="cn" style="color: #8f5902;">NA</span>)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">plot</span>(</span>
<span id="cb1-3">    <span class="at" style="color: #657422;">x =</span> mtcars<span class="sc" style="color: #5E5E5E;">$</span>mpg,</span>
<span id="cb1-4">    <span class="at" style="color: #657422;">y =</span> mtcars<span class="sc" style="color: #5E5E5E;">$</span>cyl,</span>
<span id="cb1-5">    <span class="at" style="color: #657422;">xlab =</span> <span class="st" style="color: #20794D;">"miles per gallon"</span>,</span>
<span id="cb1-6">    <span class="at" style="color: #657422;">ylab =</span> <span class="st" style="color: #20794D;">"cyclider count"</span>,</span>
<span id="cb1-7">    <span class="at" style="color: #657422;">pch =</span> <span class="dv" style="color: #AD0000;">16</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.zakvarty.com/blog/2022-09-26-hello-world/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>Quarto</category>
  <category>Templates</category>
  <guid>https://www.zakvarty.com/blog/2022-09-26-hello-world/index.html</guid>
  <pubDate>Sun, 25 Sep 2022 23:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2022-09-26-hello-world/hello-world-image.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
</span> to <span class="st" style="color: #20794D;">'.Rbuildignore'</span></span>
<span id="cb5-18">✔ Adding <span class="st" style="color: #20794D;">'.Rproj.user'</span> to <span class="st" style="color: #20794D;">'.gitignore'</span></span>
<span id="cb5-19">✔ Adding <span class="st" style="color: #20794D;">'^</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.Rproj</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.user
  <category>R</category>
  <category>data science</category>
  <category>tutorial</category>
  <guid>https://www.zakvarty.com/blog/2023-01-16-minimal-R-package/index.html</guid>
  <pubDate>Thu, 19 Jan 2023 00:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2023-01-16-minimal-R-package/horst-amazing-function.png" medium="image" type="image/png" height="89" width="144"/>
</item>
<item>
  <title>Data Wrangling</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2023-01-06-data-wrangling/index.html</link>
  <description><![CDATA[ 



<section id="what-is-data-wrangling" class="level2">
<h2 class="anchored" data-anchor-id="what-is-data-wrangling">What is Data Wrangling?</h2>
<div class="medium_right">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2023-01-06-data-wrangling/horst-wrangle-monsters.jpg" alt="Two happy looking round fuzzy monsters, each holding a similarly shaped wrench with the word “wrangle” on it. Between their tools is held up a rectangular data table labeled “TIDY.”"></p>
</div>
<p>Okay, so you’ve got some data. Great start!</p>
<p>You might have had it handed to you by a collaborator, <a href="https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/">requested it via an API</a> or <a href="https://www.zakvarty.com/blog/2022-12-01-rvest/">scraped it from the raw html of a webpage</a>. In the worst case scenario, you’re an <em>actual</em> scientist (not just a <em>data</em> one) and you spent the last several months of your life painstakingly measuring flower petals or car parts. Now we really want to do something useful with that data.</p>
<p>We’ve seen already how you can load the data into R and pivot between wider and longer formats, but that probably isn’t enough to satisfy your curisity. You want to be able to view your data, manipulate and subset it, create new variables from exisiting ones and cross-reference your dataset with others. All of these are things possible in R and are known under various collective names including data manipulation, data munging and data wrangling.</p>
<p>I’ve decided to use the term data wranging here. That’s because data manipulation sounds boring a.f. and data munging is both unpleasant to say and makes me imagine we are squelching through some sort of information swamp.</p>
<p>In what follows I’ll give a fly-by tour of tools for data wrangling in R, showing some examples along the way. I’ll focus on some of the most common and useful operations and link out to some more extensive guides for wrangling your data in R, that you can refer back to as you need them.</p>
</section>
<section id="example-data-sets" class="level2">
<h2 class="anchored" data-anchor-id="example-data-sets">Example Data Sets</h2>
<p>To demonstrate some standard skills we will use some standard datasets that come built into any R installation. These are the <code>penguins</code> data set from <code>{palmerpenguins}</code> and the <code>mtcars</code> data set.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(palmerpenguins)</span>
<span id="cb1-2">pengins <span class="ot" style="color: #003B4F;">&lt;-</span> palmerpenguins<span class="sc" style="color: #5E5E5E;">::</span>penguins</span>
<span id="cb1-3">cars <span class="ot" style="color: #003B4F;">&lt;-</span> datasets<span class="sc" style="color: #5E5E5E;">::</span>mtcars</span></code></pre></div>
</div>
</section>
<section id="viewing-your-data" class="level2">
<h2 class="anchored" data-anchor-id="viewing-your-data">Viewing Your Data</h2>
<section id="view" class="level3">
<h3 class="anchored" data-anchor-id="view"><code>View()</code></h3>
<p>The <code>View()</code> function can be used to crease a spreadsheet-like view of your data. In RStudio this will open as a new tab.</p>
<p><code>View()</code> will work for any “matrix-like” R object, such as a tibble, data frame, vector or matrix. Note the capital letter - the function is called <code>View()</code>, not <code>view()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">View</span>(penguins)</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.zakvarty.com/blog/2023-01-06-data-wrangling/view-penguins-screenshot.png" class="img-fluid figure-img" style="width:60.0%"></p>
<p></p><figcaption class="figure-caption">Screenshot of RStduio files pane, containg a spreadsheet view of the palmer penguins data set.</figcaption><p></p>
</figure>
</div>
</section>
<section id="head" class="level3">
<h3 class="anchored" data-anchor-id="head"><code>head()</code></h3>
<p>For large data sets, you might not want (or be able to) view it all at once. You can then use <code>head()</code> to view the first few rows. The integer argument <code>n</code> specifies the number of rows you would like to return.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">head</span>(<span class="at" style="color: #657422;">x =</span> pengins, <span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 8
  species island    bill_length_mm bill_depth_mm flipper_l…¹ body_…² sex    year
  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;       &lt;int&gt;   &lt;int&gt; &lt;fct&gt; &lt;int&gt;
1 Adelie  Torgersen           39.1          18.7         181    3750 male   2007
2 Adelie  Torgersen           39.5          17.4         186    3800 fema…  2007
3 Adelie  Torgersen           40.3          18           195    3250 fema…  2007
# … with abbreviated variable names ¹​flipper_length_mm, ²​body_mass_g</code></pre>
</div>
</div>
</section>
<section id="str" class="level3">
<h3 class="anchored" data-anchor-id="str"><code>str()</code></h3>
<p>An alternative way to view the a large data set, or one with a complicated format is to examine its structure with <code>str()</code>. This is a useful way to inspect the structure of list-like objects, particularly when they’ve got a nested structure.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">str</span>(penguins)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tibble [344 × 8] (S3: tbl_df/tbl/data.frame)
 $ species          : Factor w/ 3 levels "Adelie","Chinstrap",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ island           : Factor w/ 3 levels "Biscoe","Dream",..: 3 3 3 3 3 3 3 3 3 3 ...
 $ bill_length_mm   : num [1:344] 39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...
 $ bill_depth_mm    : num [1:344] 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...
 $ flipper_length_mm: int [1:344] 181 186 195 NA 193 190 181 195 193 190 ...
 $ body_mass_g      : int [1:344] 3750 3800 3250 NA 3450 3650 3625 4675 3475 4250 ...
 $ sex              : Factor w/ 2 levels "female","male": 2 1 1 NA 1 2 1 2 NA NA ...
 $ year             : int [1:344] 2007 2007 2007 2007 2007 2007 2007 2007 2007 2007 ...</code></pre>
</div>
</div>
</section>
<section id="names" class="level3">
<h3 class="anchored" data-anchor-id="names"><code>names()</code></h3>
<p>Finally, if you just want to access the variable names you can do so with the <code>names()</code> function from base R.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;">names</span>(penguins)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "species"           "island"            "bill_length_mm"   
[4] "bill_depth_mm"     "flipper_length_mm" "body_mass_g"      
[7] "sex"               "year"             </code></pre>
</div>
</div>
<p>Similarly, you can explicitly access the row and column names of a data frame or tibble using <code>colnames()</code> or <code>rownames()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;">colnames</span>(cars)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "mpg"  "cyl"  "disp" "hp"   "drat" "wt"   "qsec" "vs"   "am"   "gear"
[11] "carb"</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;">rownames</span>(cars)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "Mazda RX4"           "Mazda RX4 Wag"       "Datsun 710"         
 [4] "Hornet 4 Drive"      "Hornet Sportabout"   "Valiant"            
 [7] "Duster 360"          "Merc 240D"           "Merc 230"           
[10] "Merc 280"            "Merc 280C"           "Merc 450SE"         
[13] "Merc 450SL"          "Merc 450SLC"         "Cadillac Fleetwood" 
[16] "Lincoln Continental" "Chrysler Imperial"   "Fiat 128"           
[19] "Honda Civic"         "Toyota Corolla"      "Toyota Corona"      
[22] "Dodge Challenger"    "AMC Javelin"         "Camaro Z28"         
[25] "Pontiac Firebird"    "Fiat X1-9"           "Porsche 914-2"      
[28] "Lotus Europa"        "Ford Pantera L"      "Ferrari Dino"       
[31] "Maserati Bora"       "Volvo 142E"         </code></pre>
</div>
</div>
<p>In the <code>cars</code> data, the car model are stored as the row names. This doesn’t really jive with our idea of tidy data - we’ll see how to fix that shortly.</p>
</section>
</section>
<section id="renaming-variables" class="level2">
<h2 class="anchored" data-anchor-id="renaming-variables">Renaming Variables</h2>
<section id="colnames" class="level3">
<h3 class="anchored" data-anchor-id="colnames"><code>colnames()</code></h3>
<p>The function <code>colnames()</code> can be used to set as well as to retrieve column names.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">cars_renamed <span class="ot" style="color: #003B4F;">&lt;-</span> cars </span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;">colnames</span>(cars_renamed)[<span class="dv" style="color: #AD0000;">1</span>] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"miles_per_gallon"</span></span>
<span id="cb13-3"><span class="fu" style="color: #4758AB;">colnames</span>(cars_renamed)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "miles_per_gallon" "cyl"              "disp"             "hp"              
 [5] "drat"             "wt"               "qsec"             "vs"              
 [9] "am"               "gear"             "carb"            </code></pre>
</div>
</div>
</section>
<section id="dplyrrename" class="level3">
<h3 class="anchored" data-anchor-id="dplyrrename"><code>dplyr::rename()</code></h3>
<p>We can also use functions from <code>{dplyr}</code> to rename columns. Let’s alter the second column name.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'dplyr'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:stats':

    filter, lag</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union</code></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">cars_renamed <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rename</span>(<span class="at" style="color: #657422;">.data =</span> cars_renamed, <span class="at" style="color: #657422;">cylinders =</span> cyl)</span>
<span id="cb19-2"><span class="fu" style="color: #4758AB;">colnames</span>(cars_renamed)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "miles_per_gallon" "cylinders"        "disp"             "hp"              
 [5] "drat"             "wt"               "qsec"             "vs"              
 [9] "am"               "gear"             "carb"            </code></pre>
</div>
</div>
<p>This could be done as part of a pipe, if we were making many alterations.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">cars_renamed <span class="ot" style="color: #003B4F;">&lt;-</span> cars_renamed <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb21-2">  <span class="fu" style="color: #4758AB;">rename</span>(<span class="at" style="color: #657422;">displacement =</span> disp) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb21-3">  <span class="fu" style="color: #4758AB;">rename</span>(<span class="at" style="color: #657422;">horse_power =</span> hp) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb21-4">  <span class="fu" style="color: #4758AB;">rename</span>(<span class="at" style="color: #657422;">rear_axel_ratio =</span> drat)</span>
<span id="cb21-5"></span>
<span id="cb21-6"><span class="fu" style="color: #4758AB;">colnames</span>(cars_renamed)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "miles_per_gallon" "cylinders"        "displacement"     "horse_power"     
 [5] "rear_axel_ratio"  "wt"               "qsec"             "vs"              
 [9] "am"               "gear"             "carb"            </code></pre>
</div>
</div>
<p>When using the dplyr function you have to remember the format <code>new_name = old_name</code>. This matches the format used to create a data frame or tibble, but is the opposite order to the python function of the same name and often catches people out.</p>
<p>In the section (#creating-new-variables) on creating new variables, we will see an alternative way of doing this by copying the column and then deleting the original.</p>
</section>
</section>
<section id="subsetting" class="level2">
<h2 class="anchored" data-anchor-id="subsetting">Subsetting</h2>
<section id="base-r" class="level3">
<h3 class="anchored" data-anchor-id="base-r">Base R</h3>
<p>In base R you can extract rows, columns and combinations thereof using index notation.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="co" style="color: #5E5E5E;"># First row</span></span>
<span id="cb23-2">penguins[<span class="dv" style="color: #AD0000;">1</span>, ]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 8
  species island    bill_length_mm bill_depth_mm flipper_l…¹ body_…² sex    year
  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;       &lt;int&gt;   &lt;int&gt; &lt;fct&gt; &lt;int&gt;
1 Adelie  Torgersen           39.1          18.7         181    3750 male   2007
# … with abbreviated variable names ¹​flipper_length_mm, ²​body_mass_g</code></pre>
</div>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="co" style="color: #5E5E5E;"># First Column </span></span>
<span id="cb25-2">penguins[ , <span class="dv" style="color: #AD0000;">1</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 344 × 1
   species
   &lt;fct&gt;  
 1 Adelie 
 2 Adelie 
 3 Adelie 
 4 Adelie 
 5 Adelie 
 6 Adelie 
 7 Adelie 
 8 Adelie 
 9 Adelie 
10 Adelie 
# … with 334 more rows</code></pre>
</div>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="co" style="color: #5E5E5E;"># Rows 2-3 of columns 1, 2 and 4</span></span>
<span id="cb27-2">penguins[<span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">3</span>, <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">4</span>)]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 3
  species island    bill_depth_mm
  &lt;fct&gt;   &lt;fct&gt;             &lt;dbl&gt;
1 Adelie  Torgersen          17.4
2 Adelie  Torgersen          18  </code></pre>
</div>
</div>
<p>Using negative indexing you can remove rows or columns</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="co" style="color: #5E5E5E;"># Drop all but first row</span></span>
<span id="cb29-2">penguins[<span class="sc" style="color: #5E5E5E;">-</span>(<span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">344</span>), ]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 8
  species island    bill_length_mm bill_depth_mm flipper_l…¹ body_…² sex    year
  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;       &lt;int&gt;   &lt;int&gt; &lt;fct&gt; &lt;int&gt;
1 Adelie  Torgersen           39.1          18.7         181    3750 male   2007
# … with abbreviated variable names ¹​flipper_length_mm, ²​body_mass_g</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="co" style="color: #5E5E5E;"># Drop all but first column </span></span>
<span id="cb31-2">penguins[ , <span class="sc" style="color: #5E5E5E;">-</span>(<span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">8</span>)]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 344 × 1
   species
   &lt;fct&gt;  
 1 Adelie 
 2 Adelie 
 3 Adelie 
 4 Adelie 
 5 Adelie 
 6 Adelie 
 7 Adelie 
 8 Adelie 
 9 Adelie 
10 Adelie 
# … with 334 more rows</code></pre>
</div>
</div>
<p>You can also select rows or columns by their names. This can be done using the bracket syntax (<code>[ ]</code>) or the dollar syntax (<code>$</code>).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">pengins[ , <span class="st" style="color: #20794D;">"species"</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 344 × 1
   species
   &lt;fct&gt;  
 1 Adelie 
 2 Adelie 
 3 Adelie 
 4 Adelie 
 5 Adelie 
 6 Adelie 
 7 Adelie 
 8 Adelie 
 9 Adelie 
10 Adelie 
# … with 334 more rows</code></pre>
</div>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">penguins<span class="sc" style="color: #5E5E5E;">$</span>species</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  [1] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
  [8] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [15] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [22] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [29] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [36] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [43] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [50] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [57] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [64] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [71] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [78] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [85] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [92] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [99] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
[106] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
[113] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
[120] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
[127] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
[134] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
[141] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
[148] Adelie    Adelie    Adelie    Adelie    Adelie    Gentoo    Gentoo   
[155] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[162] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[169] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[176] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[183] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[190] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[197] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[204] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[211] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[218] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[225] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[232] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[239] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[246] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[253] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[260] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[267] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[274] Gentoo    Gentoo    Gentoo    Chinstrap Chinstrap Chinstrap Chinstrap
[281] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap
[288] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap
[295] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap
[302] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap
[309] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap
[316] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap
[323] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap
[330] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap
[337] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap
[344] Chinstrap
Levels: Adelie Chinstrap Gentoo</code></pre>
</div>
</div>
<p>Since <code>penguins</code> is a tibble, these return different types of object. Sub-setting a tibble with bracket syntax will return a tibble, while extracting a column using the dollar syntax returns a vector of values.</p>
</section>
<section id="filter-and-select" class="level3">
<h3 class="anchored" data-anchor-id="filter-and-select"><code>filter()</code> and <code>select()</code></h3>
<p><code>{dplyr}</code> has two functions for subsetting, <code>filter()</code> subsets by rows and <code>select()</code> subsets by column.</p>
<p>In both functions you list what you would like to retain. Filter and select calls can be piped together to subset based on row and column values.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb37-2">  <span class="fu" style="color: #4758AB;">select</span>(species, island,body_mass_g)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 344 × 3
   species island    body_mass_g
   &lt;fct&gt;   &lt;fct&gt;           &lt;int&gt;
 1 Adelie  Torgersen        3750
 2 Adelie  Torgersen        3800
 3 Adelie  Torgersen        3250
 4 Adelie  Torgersen          NA
 5 Adelie  Torgersen        3450
 6 Adelie  Torgersen        3650
 7 Adelie  Torgersen        3625
 8 Adelie  Torgersen        4675
 9 Adelie  Torgersen        3475
10 Adelie  Torgersen        4250
# … with 334 more rows</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb39-2">  <span class="fu" style="color: #4758AB;">select</span>(species, island, body_mass_g) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb39-3">  <span class="fu" style="color: #4758AB;">filter</span>(body_mass_g <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">6000</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 3
  species island body_mass_g
  &lt;fct&gt;   &lt;fct&gt;        &lt;int&gt;
1 Gentoo  Biscoe        6300
2 Gentoo  Biscoe        6050</code></pre>
</div>
</div>
<p>Subsetting rows can be inverted by negating the <code>filter()</code> statement.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb41-2">  <span class="fu" style="color: #4758AB;">select</span>(species, island, body_mass_g) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb41-3">  <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span>(body_mass_g <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">6000</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 340 × 3
   species island    body_mass_g
   &lt;fct&gt;   &lt;fct&gt;           &lt;int&gt;
 1 Adelie  Torgersen        3750
 2 Adelie  Torgersen        3800
 3 Adelie  Torgersen        3250
 4 Adelie  Torgersen        3450
 5 Adelie  Torgersen        3650
 6 Adelie  Torgersen        3625
 7 Adelie  Torgersen        4675
 8 Adelie  Torgersen        3475
 9 Adelie  Torgersen        4250
10 Adelie  Torgersen        3300
# … with 330 more rows</code></pre>
</div>
</div>
<p>and dropping columns can done by selecting all columns except the one(s) you want to drop.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb43-2">  <span class="fu" style="color: #4758AB;">select</span>(species, island, body_mass_g) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb43-3">  <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span>(body_mass_g <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">6000</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb43-4">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">c</span>(species, island))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 340 × 1
   body_mass_g
         &lt;int&gt;
 1        3750
 2        3800
 3        3250
 4        3450
 5        3650
 6        3625
 7        4675
 8        3475
 9        4250
10        3300
# … with 330 more rows</code></pre>
</div>
</div>
</section>
</section>
<section id="creating-new-variables" class="level2">
<h2 class="anchored" data-anchor-id="creating-new-variables">Creating New Variables</h2>
<section id="base-r-1" class="level3">
<h3 class="anchored" data-anchor-id="base-r-1">Base R</h3>
<p>We can create new variables in base R by assigning a vector of the correct length to a new column name.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1">cars_renamed<span class="sc" style="color: #5E5E5E;">$</span>weight <span class="ot" style="color: #003B4F;">&lt;-</span> cars_renamed<span class="sc" style="color: #5E5E5E;">$</span>wt</span></code></pre></div>
</div>
<p>If we then drop the original column from the data frame, this gives us an alternative way of renaming columns.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">cars_renamed <span class="ot" style="color: #003B4F;">&lt;-</span> cars_renamed[ ,<span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">which</span>(<span class="fu" style="color: #4758AB;">names</span>(cars_renamed) <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"wt"</span>)]</span>
<span id="cb46-2"><span class="fu" style="color: #4758AB;">head</span>(cars_renamed, <span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                  miles_per_gallon cylinders displacement horse_power
Mazda RX4                     21.0         6          160         110
Mazda RX4 Wag                 21.0         6          160         110
Datsun 710                    22.8         4          108          93
Hornet 4 Drive                21.4         6          258         110
Hornet Sportabout             18.7         8          360         175
                  rear_axel_ratio  qsec vs am gear carb weight
Mazda RX4                    3.90 16.46  0  1    4    4  2.620
Mazda RX4 Wag                3.90 17.02  0  1    4    4  2.875
Datsun 710                   3.85 18.61  1  1    4    1  2.320
Hornet 4 Drive               3.08 19.44  1  0    3    1  3.215
Hornet Sportabout            3.15 17.02  0  0    3    2  3.440</code></pre>
</div>
</div>
<p>One thing to be aware of is that this operation does not preserve column ordering.</p>
<p>Generally speaking, code that relies on columns being in a specific order is fragile - it breaks easily. If possible, you should try to write your code in another way that’s robust to column reordering. I’ve done that here when removing the <code>wt</code> column by looking up the column index as part of my code, rather than assuming it will always be the fourth column.</p>
</section>
<section id="dplyrmutate" class="level3">
<h3 class="anchored" data-anchor-id="dplyrmutate"><code>dplyr::mutate()</code></h3>
<p>The function from <code>{dplyr}</code> to create new columns is <code>mutate()</code>. Let’s create another column that has the car’s weight in kilogrammes rather than tonnes.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">cars_renamed <span class="ot" style="color: #003B4F;">&lt;-</span> cars_renamed <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb48-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">weight_kg =</span> weight <span class="sc" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">1000</span>)</span>
<span id="cb48-3"></span>
<span id="cb48-4">cars_renamed <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb48-5">  <span class="fu" style="color: #4758AB;">select</span>(miles_per_gallon, cylinders, displacement, weight, weight_kg) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb48-6">  <span class="fu" style="color: #4758AB;">head</span>(<span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                  miles_per_gallon cylinders displacement weight weight_kg
Mazda RX4                     21.0         6          160  2.620      2620
Mazda RX4 Wag                 21.0         6          160  2.875      2875
Datsun 710                    22.8         4          108  2.320      2320
Hornet 4 Drive                21.4         6          258  3.215      3215
Hornet Sportabout             18.7         8          360  3.440      3440</code></pre>
</div>
</div>
<p>You can also create new columns that combine multiple other columns</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1">cars_renamed <span class="ot" style="color: #003B4F;">&lt;-</span> cars_renamed <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb50-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">cylinder_adjusted_mpg =</span> miles_per_gallon <span class="sc" style="color: #5E5E5E;">/</span> cylinders)</span></code></pre></div>
</div>
</section>
<section id="rownames_to_column" class="level3">
<h3 class="anchored" data-anchor-id="rownames_to_column"><code>rownames_to_column()</code></h3>
<p>One useful example of adding an additional row to a data frame is to convert its row names to a column of the data fame.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1">cars <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb51-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">model =</span> <span class="fu" style="color: #4758AB;">rownames</span>(cars_renamed)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb51-3">  <span class="fu" style="color: #4758AB;">select</span>(mpg, cyl, model) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb51-4">  <span class="fu" style="color: #4758AB;">head</span>(<span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                   mpg cyl             model
Mazda RX4         21.0   6         Mazda RX4
Mazda RX4 Wag     21.0   6     Mazda RX4 Wag
Datsun 710        22.8   4        Datsun 710
Hornet 4 Drive    21.4   6    Hornet 4 Drive
Hornet Sportabout 18.7   8 Hornet Sportabout</code></pre>
</div>
</div>
<p>Therea neat function called <code>rownames_to_column()</code> in <code>{tibble}</code> which will add this as the first column and remove the row names all in one step.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1">cars <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb53-2">  tibble<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">rownames_to_column</span>(<span class="at" style="color: #657422;">var =</span> <span class="st" style="color: #20794D;">"model"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb53-3">  <span class="fu" style="color: #4758AB;">head</span>(<span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>              model  mpg cyl disp  hp drat    wt  qsec vs am gear carb
1         Mazda RX4 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
2     Mazda RX4 Wag 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
3        Datsun 710 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
4    Hornet 4 Drive 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
5 Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2</code></pre>
</div>
</div>
</section>
<section id="rowids_to_column" class="level3">
<h3 class="anchored" data-anchor-id="rowids_to_column"><code>rowids_to_column()</code></h3>
<p>Another function from <code>{tibble}</code> adds the row id of each observation as a new column. This is often useful when ordering or combining tables.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1">cars <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb55-2">  tibble<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">rowid_to_column</span>(<span class="at" style="color: #657422;">var =</span> <span class="st" style="color: #20794D;">"row_id"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb55-3">  <span class="fu" style="color: #4758AB;">head</span>(<span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  row_id  mpg cyl disp  hp drat    wt  qsec vs am gear carb
1      1 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
2      2 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
3      3 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
4      4 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
5      5 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2</code></pre>
</div>
</div>
</section>
</section>
<section id="summaries" class="level2">
<h2 class="anchored" data-anchor-id="summaries">Summaries</h2>
<p>The <code>summarise()</code> function allows you to collapse a data frame into a single row, which gives a summary statistic of your choosing.</p>
<p>This can be used to calculate a single summary</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb57-1"><span class="fu" style="color: #4758AB;">summarise</span>(penguins, <span class="at" style="color: #657422;">average_bill_length_mm =</span> <span class="fu" style="color: #4758AB;">mean</span>(bill_length_mm))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 1
  average_bill_length_mm
                   &lt;dbl&gt;
1                     NA</code></pre>
</div>
</div>
<p>Since we have missing values, we might instead want to calculate the mean of the recorded values.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb59-1"><span class="fu" style="color: #4758AB;">summarise</span>(penguins, <span class="at" style="color: #657422;">average_bill_length_mm =</span> <span class="fu" style="color: #4758AB;">mean</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 1
  average_bill_length_mm
                   &lt;dbl&gt;
1                   43.9</code></pre>
</div>
</div>
<p>We can also use <code>summarise()</code> to gather multiple summaries in a single data frame.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb61-1">bill_length_mm_summary <span class="ot" style="color: #003B4F;">&lt;-</span> penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb61-2">  <span class="fu" style="color: #4758AB;">summarise</span>(</span>
<span id="cb61-3">    <span class="at" style="color: #657422;">mean =</span> <span class="fu" style="color: #4758AB;">mean</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb61-4">    <span class="at" style="color: #657422;">median =</span> <span class="fu" style="color: #4758AB;">median</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb61-5">    <span class="at" style="color: #657422;">min =</span> <span class="fu" style="color: #4758AB;">max</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb61-6">    <span class="at" style="color: #657422;">q_0 =</span> <span class="fu" style="color: #4758AB;">min</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb61-7">    <span class="at" style="color: #657422;">q_1 =</span> <span class="fu" style="color: #4758AB;">quantile</span>(bill_length_mm, <span class="at" style="color: #657422;">prob =</span> <span class="fl" style="color: #AD0000;">0.25</span>, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb61-8">    <span class="at" style="color: #657422;">q_2 =</span> <span class="fu" style="color: #4758AB;">median</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb61-9">    <span class="at" style="color: #657422;">q_3 =</span> <span class="fu" style="color: #4758AB;">quantile</span>(bill_length_mm, <span class="at" style="color: #657422;">prob =</span> <span class="fl" style="color: #AD0000;">0.25</span>, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb61-10">    <span class="at" style="color: #657422;">q_4 =</span> <span class="fu" style="color: #4758AB;">max</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>))</span>
<span id="cb61-11"></span>
<span id="cb61-12">bill_length_mm_summary</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 8
   mean median   min   q_0   q_1   q_2   q_3   q_4
  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1  43.9   44.4  59.6  32.1  39.2  44.4  39.2  59.6</code></pre>
</div>
</div>
<p>In all this isn’t overly exciting. You might, rightly, wonder why you’d want to use these <code>summarise()</code> calls when we could just use the simpler base R calls directly.</p>
<p>One benefit is that the summarise calls ensure consistent output. However, the main advantage comes when you want to apply these summaries to distinct subgroups of the data.</p>
</section>
<section id="grouped-operations" class="level2">
<h2 class="anchored" data-anchor-id="grouped-operations">Grouped Operations</h2>
<p>The real benefit of <code>summarise()</code> comes from its combination with <code>group_by()</code>. This allows to you calculate the same summary statistics for each level of a factor with only one additional line of code. Here we’re re-calculating the same set of summary statistics we just found for all penguins, but for each individual species.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb63-1">penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb63-2">  <span class="fu" style="color: #4758AB;">group_by</span>(species) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb63-3">  <span class="fu" style="color: #4758AB;">summarise</span>(</span>
<span id="cb63-4">    <span class="at" style="color: #657422;">mean =</span> <span class="fu" style="color: #4758AB;">mean</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb63-5">    <span class="at" style="color: #657422;">median =</span> <span class="fu" style="color: #4758AB;">median</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb63-6">    <span class="at" style="color: #657422;">min =</span> <span class="fu" style="color: #4758AB;">max</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb63-7">    <span class="at" style="color: #657422;">q_0 =</span> <span class="fu" style="color: #4758AB;">min</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb63-8">    <span class="at" style="color: #657422;">q_1 =</span> <span class="fu" style="color: #4758AB;">quantile</span>(bill_length_mm, <span class="at" style="color: #657422;">prob =</span> <span class="fl" style="color: #AD0000;">0.25</span>, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb63-9">    <span class="at" style="color: #657422;">q_2 =</span> <span class="fu" style="color: #4758AB;">median</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb63-10">    <span class="at" style="color: #657422;">q_3 =</span> <span class="fu" style="color: #4758AB;">quantile</span>(bill_length_mm, <span class="at" style="color: #657422;">prob =</span> <span class="fl" style="color: #AD0000;">0.25</span>, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb63-11">    <span class="at" style="color: #657422;">q_4 =</span> <span class="fu" style="color: #4758AB;">max</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 9
  species    mean median   min   q_0   q_1   q_2   q_3   q_4
  &lt;fct&gt;     &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1 Adelie     38.8   38.8  46    32.1  36.8  38.8  36.8  46  
2 Chinstrap  48.8   49.6  58    40.9  46.3  49.6  46.3  58  
3 Gentoo     47.5   47.3  59.6  40.9  45.3  47.3  45.3  59.6</code></pre>
</div>
</div>
<p>You can group by multiple factors to calculate summaries for each distinct combination of levels within your data set. Here we group by combinations of species and the island to which they belong.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb65-1">penguin_summary_stats <span class="ot" style="color: #003B4F;">&lt;-</span> penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb65-2">  <span class="fu" style="color: #4758AB;">group_by</span>(species, island) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb65-3">  <span class="fu" style="color: #4758AB;">summarise</span>(</span>
<span id="cb65-4">    <span class="at" style="color: #657422;">mean =</span> <span class="fu" style="color: #4758AB;">mean</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb65-5">    <span class="at" style="color: #657422;">median =</span> <span class="fu" style="color: #4758AB;">median</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb65-6">    <span class="at" style="color: #657422;">min =</span> <span class="fu" style="color: #4758AB;">max</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb65-7">    <span class="at" style="color: #657422;">q_0 =</span> <span class="fu" style="color: #4758AB;">min</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb65-8">    <span class="at" style="color: #657422;">q_1 =</span> <span class="fu" style="color: #4758AB;">quantile</span>(bill_length_mm, <span class="at" style="color: #657422;">prob =</span> <span class="fl" style="color: #AD0000;">0.25</span>, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb65-9">    <span class="at" style="color: #657422;">q_2 =</span> <span class="fu" style="color: #4758AB;">median</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb65-10">    <span class="at" style="color: #657422;">q_3 =</span> <span class="fu" style="color: #4758AB;">quantile</span>(bill_length_mm, <span class="at" style="color: #657422;">prob =</span> <span class="fl" style="color: #AD0000;">0.25</span>, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb65-11">    <span class="at" style="color: #657422;">q_4 =</span> <span class="fu" style="color: #4758AB;">max</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`summarise()` has grouped output by 'species'. You can override using the
`.groups` argument.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb67-1">penguin_summary_stats</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 10
# Groups:   species [3]
  species   island     mean median   min   q_0   q_1   q_2   q_3   q_4
  &lt;fct&gt;     &lt;fct&gt;     &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1 Adelie    Biscoe     39.0   38.7  45.6  34.5  37.7  38.7  37.7  45.6
2 Adelie    Dream      38.5   38.6  44.1  32.1  36.8  38.6  36.8  44.1
3 Adelie    Torgersen  39.0   38.9  46    33.5  36.7  38.9  36.7  46  
4 Chinstrap Dream      48.8   49.6  58    40.9  46.3  49.6  46.3  58  
5 Gentoo    Biscoe     47.5   47.3  59.6  40.9  45.3  47.3  45.3  59.6</code></pre>
</div>
</div>
<section id="ungrouping" class="level3">
<h3 class="anchored" data-anchor-id="ungrouping">Ungrouping</h3>
<p>By default, each call to <code>summarise()</code> will undo one level of grouping. This means that our previous result was still grouped by species.</p>
<p>(We can see this by examining the structure of the returned data frame. The first line tells us that this this is an S3 object of class “grouped_df”, which inherits its properties from a “tbl_df”, whose properties in turn come from “tbl” and “data.frame” objects.)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb69-1"><span class="fu" style="color: #4758AB;">class</span>(penguin_summary_stats)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "grouped_df" "tbl_df"     "tbl"        "data.frame"</code></pre>
</div>
</div>
<p>Since we have grouped by two variables, R expects us to use two summaries before returning a data frame (or tibble) that is not grouped. One way to satisfy this is to use apply a second summary at the species level of grouping.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb71-1">penguin_summary_stats <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb71-2">  <span class="fu" style="color: #4758AB;">summarise_all</span>(mean, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in mean.default(island, na.rm = TRUE): argument is not numeric or
logical: returning NA

Warning in mean.default(island, na.rm = TRUE): argument is not numeric or
logical: returning NA

Warning in mean.default(island, na.rm = TRUE): argument is not numeric or
logical: returning NA</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 10
  species   island  mean median   min   q_0   q_1   q_2   q_3   q_4
  &lt;fct&gt;      &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1 Adelie        NA  38.8   38.7  45.2  33.4  37.0  38.7  37.0  45.2
2 Chinstrap     NA  48.8   49.6  58    40.9  46.3  49.6  46.3  58  
3 Gentoo        NA  47.5   47.3  59.6  40.9  45.3  47.3  45.3  59.6</code></pre>
</div>
</div>
<p>However, we won’t always want to do apply another summary. In that case, we can undo the grouping using <code>ungroup()</code>. Remembering to ungroup is a gotcha and cause of confusion when working with multiple-group summaries.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb74-1"><span class="fu" style="color: #4758AB;">ungroup</span>(penguin_summary_stats)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 10
  species   island     mean median   min   q_0   q_1   q_2   q_3   q_4
  &lt;fct&gt;     &lt;fct&gt;     &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1 Adelie    Biscoe     39.0   38.7  45.6  34.5  37.7  38.7  37.7  45.6
2 Adelie    Dream      38.5   38.6  44.1  32.1  36.8  38.6  36.8  44.1
3 Adelie    Torgersen  39.0   38.9  46    33.5  36.7  38.9  36.7  46  
4 Chinstrap Dream      48.8   49.6  58    40.9  46.3  49.6  46.3  58  
5 Gentoo    Biscoe     47.5   47.3  59.6  40.9  45.3  47.3  45.3  59.6</code></pre>
</div>
</div>
<p>There’s an alternative method to achieve the same thing in a single step when using <code>{dplyr}</code> versions 1.0.0 and above. This is to to set the <code>.groups</code> parameter of the <code>summarise()</code> function call, which determines the grouping of the returned data frame.</p>
<p>The <code>.groups</code> parameter and can take 4 possible values:</p>
<ul>
<li><p>“drop_last”: dropping the last level of grouping (The only option before v1.0.0);</p></li>
<li><p>“drop”: All levels of grouping are dropped;</p></li>
<li><p>“keep”: Same grouping structure as <code>.data</code>;</p></li>
<li><p>“rowwise”: Each row is its own group.</p></li>
</ul>
<p>By default, “drop_last” is used if all the results have 1 row and “keep” is used otherwise.</p>
</section>
<section id="reordering-factors" class="level3">
<h3 class="anchored" data-anchor-id="reordering-factors">Reordering Factors</h3>
<p>R stored factors as integer values, which it then maps to a set of labels. Only factor levels that appear in your data will be assigned a coded integer value and the mapping between factor levels and integers will depend on the order that the labels appear in your data.</p>
<p>This can be annoying, particularly when your factor levels relate to properties that aren’t numerical but do have an inherent ordering to them. In the example below, we have the t-shirt size of twelve people.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb76-1">tshirts <span class="ot" style="color: #003B4F;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb76-2">  <span class="at" style="color: #657422;">id =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">12</span>, </span>
<span id="cb76-3">  <span class="at" style="color: #657422;">size =</span> <span class="fu" style="color: #4758AB;">as.factor</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"L"</span>, <span class="cn" style="color: #8f5902;">NA</span>, <span class="st" style="color: #20794D;">"M"</span>, <span class="st" style="color: #20794D;">"S"</span>, <span class="st" style="color: #20794D;">"XS"</span>, <span class="st" style="color: #20794D;">"M"</span>, <span class="st" style="color: #20794D;">"XXL"</span>, <span class="st" style="color: #20794D;">"L"</span>, <span class="st" style="color: #20794D;">"XS"</span>, <span class="st" style="color: #20794D;">"M"</span>, <span class="st" style="color: #20794D;">"L"</span>, <span class="st" style="color: #20794D;">"S"</span>))</span>
<span id="cb76-4">)</span>
<span id="cb76-5"></span>
<span id="cb76-6"><span class="fu" style="color: #4758AB;">levels</span>(tshirts<span class="sc" style="color: #5E5E5E;">$</span>size)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "L"   "M"   "S"   "XS"  "XXL"</code></pre>
</div>
</div>
<p>Annoyingly, the sizes aren’t in order and extra large is not included because it is not included in the sample. This leads to awkward summary tables (and plots).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb78-1">tshirts <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">group_by</span>(size) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">count =</span> <span class="fu" style="color: #4758AB;">n</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 2
  size  count
  &lt;fct&gt; &lt;int&gt;
1 L         3
2 M         3
3 S         2
4 XS        2
5 XXL       1
6 &lt;NA&gt;      1</code></pre>
</div>
</div>
<p>We can fix this by creating a new variable with the factors explicitly coded in the correct order. We also need to sepecify that we should not drop empty groups as part of <code>group_by()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb80-1">tidy_tshirt_levels <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"XS"</span>, <span class="st" style="color: #20794D;">"S"</span>, <span class="st" style="color: #20794D;">"M"</span>, <span class="st" style="color: #20794D;">"L"</span>, <span class="st" style="color: #20794D;">"XL"</span>, <span class="st" style="color: #20794D;">"XXL"</span>, <span class="cn" style="color: #8f5902;">NA</span>)</span>
<span id="cb80-2"></span>
<span id="cb80-3">tshirts <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb80-4">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">size_tidy =</span> <span class="fu" style="color: #4758AB;">factor</span>(size, <span class="at" style="color: #657422;">levels =</span> tidy_tshirt_levels)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb80-5">  <span class="fu" style="color: #4758AB;">group_by</span>(size_tidy, <span class="at" style="color: #657422;">.drop =</span> <span class="cn" style="color: #8f5902;">FALSE</span> ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb80-6">  <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">count =</span> <span class="fu" style="color: #4758AB;">n</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 7 × 2
  size_tidy count
  &lt;fct&gt;     &lt;int&gt;
1 XS            2
2 S             2
3 M             3
4 L             3
5 XL            0
6 XXL           1
7 &lt;NA&gt;          1</code></pre>
</div>
</div>
</section>
</section>
<section id="be-aware-factors" class="level2">
<h2 class="anchored" data-anchor-id="be-aware-factors">Be Aware: Factors</h2>
<p>As we have seen a little already, categorical variables can cause issues when wrangling and presenting data in R. All of these problems are solvable using base R techniques but the <code>{forcats}</code> package provides tools for the most common of these problems. This includes functions for changing the order of factor levels or the values with which they are associated.</p>
<p>Some examples functions from the package include:</p>
<ul>
<li><code>fct_reorder()</code>: Reordering a factor by another variable.</li>
<li><code>fct_infreq()</code>: Reordering a factor by the frequency of values.</li>
<li><code>fct_relevel()</code>: Changing the order of a factor by hand.</li>
<li><code>fct_lump()</code>: Collapsing the least/most frequent values of a factor into “other”.</li>
</ul>
<p>Examples of each of these can be found in the <a href="https://forcats.tidyverse.org/articles/forcats.html">forcats vignette</a> or the <a href="(https://r4ds.had.co.nz/factors.html)">factors chapter</a> of R for data science.</p>
</section>
<section id="be-aware-strings" class="level2">
<h2 class="anchored" data-anchor-id="be-aware-strings">Be Aware: Strings</h2>
<p>Working with and analysing text data is a skill unto itself. However, it is useful to be able to do some basic manipulation of character strings programatically.</p>
<p>Because R was developed as a statistical programming language, it is well suited to the computational and modelling aspects of working with text data but the base R string manipulation functions can be a bit unwieldy at times.</p>
<p>The <code>{stringr}</code> package aims to combat this by providing useful helper functions for a range of text management problems. Even when not analysing text data these can be useful, for example to remove prefixes on a lot of column names.</p>
<div class="cell">
<div class="cell-output cell-output-stderr">
<pre><code>Warning: `as_data_frame()` was deprecated in tibble 2.0.0.
ℹ Please use `as_tibble()` instead.
ℹ The signature and semantics have changed, see `?as_tibble`.</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if
`.name_repair` is omitted as of tibble 2.0.0.
ℹ Using compatibility `.name_repair`.
ℹ The deprecated feature was likely used in the tibble package.
  Please report the issue at &lt;]8;;https://github.com/tidyverse/tibble/issueshttps://github.com/tidyverse/tibble/issues]8;;&gt;.</code></pre>
</div>
</div>
<p>Suppose we wanted to keep only the text following an underscore in these column names. We could do that by using a regular expression to extract lower-case or upper-case letters which follow an underscore.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb84-1"><span class="fu" style="color: #4758AB;">head</span>(poorly_named_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 11
  observatio…¹   V1_A   V2_B   V3_C    V4_D    V5_E   V6_F   V7_G   V8_H    V9_I
         &lt;int&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;
1            1 -0.199 -0.729  1.14   0.0205 -0.714  -1.14  0.786  -0.926 -0.740 
2            2 -0.956 -1.71  -0.184  1.44   -1.97   -0.470 0.0393  1.42  -2.49  
3            3  0.585 -1.06  -1.43   0.361   0.0141  0.585 1.01   -1.90  -0.0825
4            4  0.624  1.17   0.263  1.72   -0.0808  0.707 1.93   -0.675  0.448 
5            5  0.425 -0.190 -0.360 -0.443   0.134  -0.339 0.0577  1.21  -1.38  
6            6  0.169  1.40   1.82  -0.999   1.14   -0.377 0.471   0.934  0.604 
# … with 1 more variable: V10_J &lt;dbl&gt;, and abbreviated variable name
#   ¹​observation_id</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb86-1">stringr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">str_extract</span>(<span class="fu" style="color: #4758AB;">names</span>(poorly_named_df), <span class="at" style="color: #657422;">pattern =</span> <span class="st" style="color: #20794D;">"(?&lt;=_)([a-zA-Z]+)"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "id" "A"  "B"  "C"  "D"  "E"  "F"  "G"  "H"  "I"  "J" </code></pre>
</div>
</div>
<p>Alternatively, can avoid using regular expressions. We can split each column name at the underscore and keep only the second part of each string.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb88-1"><span class="co" style="color: #5E5E5E;"># split column names at underscores and inspect structure of resuting object</span></span>
<span id="cb88-2">split_strings <span class="ot" style="color: #003B4F;">&lt;-</span> stringr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">str_split</span>(<span class="fu" style="color: #4758AB;">names</span>(poorly_named_df), <span class="at" style="color: #657422;">pattern =</span> <span class="st" style="color: #20794D;">"_"</span>)</span>
<span id="cb88-3"><span class="fu" style="color: #4758AB;">str</span>(split_strings)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>List of 11
 $ : chr [1:2] "observation" "id"
 $ : chr [1:2] "V1" "A"
 $ : chr [1:2] "V2" "B"
 $ : chr [1:2] "V3" "C"
 $ : chr [1:2] "V4" "D"
 $ : chr [1:2] "V5" "E"
 $ : chr [1:2] "V6" "F"
 $ : chr [1:2] "V7" "G"
 $ : chr [1:2] "V8" "H"
 $ : chr [1:2] "V9" "I"
 $ : chr [1:2] "V10" "J"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb90-1"><span class="co" style="color: #5E5E5E;"># keep only the second element of each character vector in the list</span></span>
<span id="cb90-2">purrr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">map_chr</span>(split_strings, <span class="cf" style="color: #003B4F;">function</span>(x){x[<span class="dv" style="color: #AD0000;">2</span>]})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "id" "A"  "B"  "C"  "D"  "E"  "F"  "G"  "H"  "I"  "J" </code></pre>
</div>
</div>
<p>Again, unless you plan to work extensively with text data, I would recommend that you look up such string manipulations as you need them. The <a href="https://r4ds.had.co.nz/strings.html#strings">strings</a> section of R for Data Science is a useful starting point.</p>
</section>
<section id="be-aware-date-times" class="level2">
<h2 class="anchored" data-anchor-id="be-aware-date-times">Be Aware: Date-Times</h2>
<p>Remember all the fuss we made about storing dates in the ISO standard format? That was because dates and times are complicated enough to work with before adding extra ambiguity.</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Ctext%7BYYYY%7D%20-%20%5Ctext%7BMM%7D%20-%20%5Ctext%7BDD%7D"></p>
<p>Dates, times and time intervals have to reconcile two factors: the physical orbit of the Earth around the sun and the social and geopolitical mechanisms that determine how we measure and record the passing of time. This makes the history of date and time records fascinating and can make working with this type of data complicated.</p>
<p>Moving from larger to smaller time spans: leap years alter the number of days in a year, months are of variable length (with February’s length changing from year to year). If your data are measured in a place that uses daylight saving, then one day a year will be 23 hours long and another will be 25 hours long. To make things worse, the dates and the hour at which the clocks change are not uniform across countries, which might be in distinct time zones that themselves change over time.</p>
<p>Even at the level of minutes and seconds we aren’t safe - since the Earth’s orbit is gradually slowing down a leap second is added approximately every 21 months. Nor are things any better when looking at longer time scales or across cultures, where we might have to account for different calendars: months are added removed and altered over time, other calendar systems still take different approaches to measuring time and using different units and origin points.</p>
<p>With all of these issues you have to be very careful when working with date and time data. Functions to help you with this can be found in the <code>{lubridate}</code> package, with examples in the <a href="https://r4ds.had.co.nz/dates-and-times.html#dates-and-times">dates and times</a> chapter of R for data science.</p>
<!--
- How many days are there in a year? (365-366)
- How many months days are there in a month? (28-31)
- How many hours are there in a day? (23-25)
- How many seconds are there in a minute? (60-61)
- What calendar are you using?
  - How many months are there in the year? 
  - When does a year begin?
-->
</section>
<section id="be-aware-relational-data" class="level2">
<h2 class="anchored" data-anchor-id="be-aware-relational-data">Be Aware: Relational Data</h2>
<p>When the data you need are stored across two or more data frames you need to be able to cross-reference those and match up values for observational unit. This sort of data is know as relational data, and is used extensively in data science.</p>
<p>The variables you use to match observational units across data frames are known as <em>keys</em>. The primary key belongs to the first table and the foreign key belongs to the secondary table. There are various ways to join these data frames, depending on if you want to retain.</p>
<section id="join-types" class="level4">
<h4 class="anchored" data-anchor-id="join-types">Join types</h4>
<p>You might want to keep only observational units that have key variables values in both data frames, this is known as an inner join.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.zakvarty.com/blog/2023-01-06-data-wrangling/join-inner.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Inner join diagram. Source: R for Data Science</figcaption><p></p>
</figure>
</div>
<p>You might instead want to keep all units from the primary table but pad with NAs where there is not a corresponding foreign key in the second table. This results in an <strong>(outer) left-join</strong>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.zakvarty.com/blog/2023-01-06-data-wrangling/join-left-right-full.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Diagram for left, right and outer joins. Source: R for Data Science</figcaption><p></p>
</figure>
</div>
<p>Conversely, you might keep all units from the second table but pad with NAs where there is not a corresponding foreign key in the primary table. This is imaginatively named an <strong>(outer) right-join</strong>.</p>
<p>The final common join type is an outer join, in which all observational units from either table are retained and all missing values are padded with NAs. This is known as an <strong>(outer) full join</strong>.</p>
<p>Things get more complicated when keys do not uniquely identify observational units in one or both tables. I’d recommend you start exploring these ideas with the <a href="">relational data</a> chapter of R for Data Science.</p>
</section>
<section id="why-and-where-to-learn-more" class="level4">
<h4 class="anchored" data-anchor-id="why-and-where-to-learn-more">Why and where to learn more</h4>
<p>Working with relational data is essential to getting any data science up and running out in the wilds of reality. This is because businesses and companies don’t store all of their data in a huge single csv file. For one this isn’t very efficient, because most cells would be empty. Secondly, it’s not a very secure approach, since you can’t grant partial access to the data. That’s why information is usually stored in many data frames (more generically known as tables) within one or more databases.</p>
<p>These data silos are created, maintained, accessed and destroyed using a relational data base management system. These management systems use code to manage and access the stored data, just like we have seen in the dplyr commands above. You might well have heard of the SQL programming language (and its many variants), which is a popular language for data base management and is the inspiration for the dplyr package and verbs.</p>
<p>If you’d like to learn more then there are many excellent introductory SQL books and courses, I’d recommend picking one that focuses on data analysis or data science unless you really want to dig into efficient storage and querying of databases.</p>
</section>
</section>
<section id="wrapping-up" class="level2">
<h2 class="anchored" data-anchor-id="wrapping-up">Wrapping up</h2>
<p>We have:</p>
<ul>
<li><p>Learned how to wrangle tabular data in R with <code>{dplyr}</code></p></li>
<li><p>Met the idea of relational data and <code>{dplyr}</code>’s relationship to SQL</p></li>
<li><p>Become aware of some tricky data types and packages that can help.</p></li>
</ul>


</section>

<div id="quarto-appendix"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{varty2023,
  author = {Zak Varty},
  title = {Data {Wrangling}},
  date = {2023-01-06},
  url = {https://www.zakvarty.com/blog/2023-01-06-data-wrangling},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-varty2023" class="csl-entry quarto-appendix-citeas">
Zak Varty. 2023. <span>“Data Wrangling.”</span> January 6, 2023. <a href="https://www.zakvarty.com/blog/2023-01-06-data-wrangling">https://www.zakvarty.com/blog/2023-01-06-data-wrangling</a>.
</div></div></section></div> ]]></description>
  <category>data science</category>
  <category>data wrangling</category>
  <category>tutorial</category>
  <guid>https://www.zakvarty.com/blog/2023-01-06-data-wrangling/index.html</guid>
  <pubDate>Fri, 06 Jan 2023 00:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2023-01-06-data-wrangling/horst-wrangle-monsters.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Aquiring Data via an API</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/index.html</link>
  <description><![CDATA[ 



<section id="aquiring-data-part-2---using-apis" class="level2">
<h2 class="anchored" data-anchor-id="aquiring-data-part-2---using-apis">Aquiring Data: Part 2 - Using APIs</h2>
<div class="medium_right">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/apis-and-httr.png" alt="The text APIs and httr, written on a black hexagon."></p>
</div>
<p>You can’t always rely on tidy, tabular data to land on your desk. Sometimes you are going to have to go out and gather data for yourself.</p>
<p>I’m not suggesting you will need to do this manually, but you will likely need to get data from the internet that’s been made publicly or privately available to you.</p>
<p>This might be information from a webpage that you gather yourself, or data shared with you by a collaborator using an API.</p>
<p>In this second blog post we will cover the basics of obtaining data via an API. This material draws together the <a href="https://zapier.com/learn/apis/">Introduction to APIs</a> book by Brian Cooksey and the <a href="https://stat545.com/diy-web-data.html#interacting-with-an-api">DIY web data</a> section of STAT545 at the University of British Columbia.</p>
</section>
<section id="why-do-i-need-to-know-about-apis" class="level2">
<h2 class="anchored" data-anchor-id="why-do-i-need-to-know-about-apis">Why do I need to know about APIs?</h2>
<blockquote class="blockquote">
<p>An API, or application programming interface, is a set of rules that allows different software applications to communicate with each other.</p>
</blockquote>
<p>As a data scientist, you will often need to access data that is stored on remote servers or in cloud-based services. APIs provide a convenient way for data scientists to programmatically retrieve this data, without having to manually download data sets or and process them locally on their own computer.</p>
<p>This has multiple benefits including automation and standardisation of data sharing.</p>
<ul>
<li><p><strong>Automation:</strong> It is much faster for a machine to process a data request than a human. Having a machine handling data requests also scales much better as either the number or the complexity of data requests grows. Additionally, there is a lower risk of introducing human error. For example, a human might accidentally share the wrong data, which can have serious legal repercussions.</p></li>
<li><p><strong>Standardisation:</strong> Having a machine process data requests requires the format of these requests and the associated responses to be standardised. This allows data sharing and retrieval to become a reproducible and programmatic aspect of our work.</p></li>
</ul>
</section>
<section id="what-is-an-api" class="level2">
<h2 class="anchored" data-anchor-id="what-is-an-api">What is an API?</h2>
<p>So then, if APIs are so great, what exactly are they?</p>
<p>In human-to-human communication, the set of rules governing acceptable behaviour is known as etiquette. Depending on when or where you live, social etiquette can be rather strict. The rules for computer-to-computer communication take this to a whole new level, because with machines there can be no room left for interpretation.</p>
<p>The set of rules governing interactions between computers or programmes is known as a <strong>protocol</strong>.</p>
<p>APIs provide a standard protocol for different programs to interact with one another. This makes it easier for developers to build complex systems by leveraging the functionality of existing services and platforms. The benefits of working in a standardised and modular way apply equally well to sharing data as they do to writing code or organising files.</p>
<p>There are two sides to communication and when <em>machines</em> communicate these are known as the <strong>server</strong> and the <strong>client</strong>.</p>
<div class="medium_right">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/server-schematic.png" alt="Schematic diagram representing a computer server. Text above reads 'Servers: don't fear a computer with no screen'."></p>
</div>
<p>Servers can seem intimidating, because unlike your laptop or mobile phone they don’t have their own input and output devices; they have no keyboard, no monitor, and no a mouse. Despite this, servers are just regular computers that are designed to store data and run programmes. Servers don’t have their own input or output devices because they are intended to be used <em>remotely</em>, via another computer. There is no need for a screen or a mouse if the user is miles away. Nothing scary going on here!</p>
<p>People often find clients much less intimidating - they are simply any other computer or application that might contact the sever.</p>
</section>
<section id="http" class="level2">
<h2 class="anchored" data-anchor-id="http">HTTP</h2>
<p>This leads us one step further down the rabbit-hole. An API is a protocol that defines the rules of how applications communicate with one another. But how does this communication happen?</p>
<p>HTTP (Hypertext Transfer Protocol) is the dominant mode communication on the World Wide Web. You can see the secure version of HTTP, HTTPS, at the start of most web addresses up at the top of your browser. For example:</p>
<pre class="http"><code>https://www.zakvarty.com/blog</code></pre>
<p>HTTP is the foundation of data communication on the web and is used to transfer files (such as text, images, and videos) between web servers and clients.</p>
<div class="medium_left">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/request-response.png" alt="Schematic diagram showing a request being sent from a client to a server, which returns a response."></p>
</div>
<p>To understand HTTP communications, I find it helpful to imagine the client and the server as being a customer and a waiter at a restaurant. The client makes some request to the server, which then tries to comply before giving a response. The server might respond to confirm that the request was completed successfully. Alternatively, the server might respond with an error message, which is (hopefully) informative about why the request could not be completed.</p>
<p>This request-response model is the basis for HTTP, the communication system used by the majority of APIs.</p>
</section>
<section id="http-requests" class="level2">
<h2 class="anchored" data-anchor-id="http-requests">HTTP Requests</h2>
<p>An HTML request consists of:</p>
<ul>
<li>Uniform Resource Locator (URL) [unique identifier for a thing]</li>
<li>Method [tells server the type of action requested by client]</li>
<li>Headers [meta-information about request, e.g.&nbsp;device type]</li>
<li>Body [Data the client wants to send to the server]</li>
</ul>
<div class="medium_right">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/html-request.png" alt="Schematic diagram showing the structure of an HTML request, composed of: a URL, method, headers and body."></p>
</div>
<section id="url" class="level3">
<h3 class="anchored" data-anchor-id="url">URL</h3>
<p>The URL in a HTTP request specifies where that request is going to be made, for example <code>http://example.com</code>.</p>
</section>
<section id="method" class="level3">
<h3 class="anchored" data-anchor-id="method">Method</h3>
<p>The action that the client wants to take is indicated by a set of well-defined methods or HTTP verbs. The most common HTTP verbs are <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>PATCH</code>, and <code>DELETE</code>.</p>
<p>The <code>GET</code> verb is used to retrieve a resource from the server, such as a web page or an image. The <code>POST</code> verb is used to send data to the server, such as when submitting a form or uploading a file. The <code>PUT</code> verb is used to replace a resource on the server with a new one, while the <code>PATCH</code> verb is used to update a resource on the server without replacing it entirely. Finally, the <code>DELETE</code> verb is used to delete a resource from the server.</p>
<p>In addition to these common HTTP verbs, there are also several less frequently used verbs. These are used for specialized purposes, such as requesting only the headers of a resource, or testing the connectivity between the client and the server.</p>
</section>
<section id="header" class="level3">
<h3 class="anchored" data-anchor-id="header">Header</h3>
<p>The request headers contain meta-information about the request. This is where information about the device type would be included within the request.</p>
</section>
<section id="body" class="level3">
<h3 class="anchored" data-anchor-id="body">Body</h3>
<p>Finally, the body of the request contains the data that the client is providing to the server.</p>
</section>
</section>
<section id="http-responses" class="level2">
<h2 class="anchored" data-anchor-id="http-responses">HTTP Responses</h2>
<p>When the server receives a request it will attempt to fulfil it and then send a response back to the client.</p>
<div class="medium_left">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/html-response.png" alt="Schematic diagram showing the structure of an HTML response, composed of: a status code, headers and body."></p>
</div>
<p>A response has a similar structure to a request apart from:</p>
<ul>
<li>responses <strong>do not have</strong> a URL,</li>
<li>responses <strong>do not have</strong> a method,</li>
<li>responses <strong>have</strong> a status code.</li>
</ul>
<section id="status-codes" class="level3">
<h3 class="anchored" data-anchor-id="status-codes">Status Codes</h3>
<p>The status code is a 3 digit number, each of which has a specific meaning. Some common error codes that you might (already have) come across are:</p>
<ul>
<li>200: Success,</li>
<li>404: Page not found (all 400s are errors),</li>
<li>503: Page down.</li>
</ul>
<p>In a data science context, a successful response will return the requested data within the data field. This will most likely be given in JSON or XML format.</p>
</section>
</section>
<section id="authentication" class="level2">
<h2 class="anchored" data-anchor-id="authentication">Authentication</h2>
<p>Now that we know <em>how</em> applications communicate, you might ask how we can control who has access to the API and what types of request they can make. This can be done by the server setting appropriate permissions for each client. But then how does the server verify that the client is really who is claims to be?</p>
<p><strong>Authentication</strong> is a way to ensure that only authorized clients are able to access an API. This is typically done by the server requiring each client to provide some secret information that uniquely identifies them, whenever they make requests to the API. This information allows the API server to validate the authenticity this user before it authorises the request.</p>
<section id="basic-authentication" class="level3">
<h3 class="anchored" data-anchor-id="basic-authentication">Basic Authentication</h3>
<p>There are various ways to implement API authentication.</p>
<p>Basic authentication involves each legitimate client having a username and password. An encrypted version of these is included in the <code>Authorization</code> header of the HTTP request. If the hear matches with the server’s records then the request is processed. If not, then a special status code (401) is returned to the client.</p>
<p>Basic authentication is dangerous because it does not put any restrictions on what a client can do once they are authorised. Additional, individualised restrictions can be added by using an alternative authentication scheme.</p>
</section>
<section id="api-key-authentication" class="level3">
<h3 class="anchored" data-anchor-id="api-key-authentication">API Key Authentication</h3>
<p>An API key is long, random string of letters and numbers that is assigned to each authorised user. An API key is distinct from the user’s password and keys are typically issued by the service that provides an API. Using keys rather than basic authentication allows the API provider to track and limit the usage of their API.</p>
<p>For example, a provider may issue a unique API key to each developer or organization that wants to use the API. The provider can then limit access to certain data. They could also limit the number of requests that each key can make in a given time period or prevent access to certain administrative functions, like changing passwords or deleting accounts.</p>
<p>Unlike Basic Authentication, there is no standard way of a client sharing a key with the server. Depending on the API this might be in the <code>Authorization</code> field of the header, at the end of the URL (<code>http://example.com?api_key=my_secret_key</code>), or within the body of the data.</p>
</section>
</section>
<section id="api-wrappers" class="level2">
<h2 class="anchored" data-anchor-id="api-wrappers">API wrappers</h2>
<p>We’ve learned a lot about how the internet works. Fortunately, a lot of the time we won’t have to worry about all of that new information other than for debugging purposes.</p>
<p>In the best case scenario, a very kind developer has written a “wrapper” function for the API. These wrappers are functions in R that will construct the HTML request for you. If you are particularly lucky, the API wrapper will also format the response for you, converting it from XML or JSON back into an R object that is ready for immediate use.</p>
</section>
<section id="geonames-wrapper" class="level2">
<h2 class="anchored" data-anchor-id="geonames-wrapper"><code>{geonames}</code> wrapper</h2>
<p><a href="https://ropensci.org/">rOpenSci</a> has a curated list of many wrappers for accessing scientific data using R. We will focus on the <a href="https://www.geonames.org/">GeoNames API</a>, which gives open access to a geographical database. To access this data, we will use wrapper functions provided by the <code>{geonames}</code> <a href="https://docs.ropensci.org/geonames/">package</a>.</p>
<p>The aim here is to illustrate the important steps of getting started with a new API.</p>
<section id="set-up" class="level3">
<h3 class="anchored" data-anchor-id="set-up">Set up</h3>
<p>Before we can get any data from the GeoNames API, we first need to do a little bit of set up.</p>
<ol type="1">
<li>Install and load <code>{geonames}</code> from CRAN</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;">#install.packages("geonames")</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">library</span>(geonames)</span></code></pre></div>
</div>
<ol start="2" type="1">
<li>Create a user account for the GeoNames API</li>
</ol>
<p><img style="border-radius: 0%;" src="https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/sign-up.png" alt="Screenshot of the GeoNames login page. Example text has been added in the fields to create a new user account."></p>
<ol start="3" type="1">
<li>Activate the account (see activation email)</li>
</ol>
<p><img style="border-radius: 0%;" src="https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/confirmation-email.png" alt="Screenshot of the GeoNames confirmation email, which gives a link to click in order to confirm the new account."></p>
<ol start="4" type="1">
<li><p>Enable the free web services for your GeoNames account by logging in at this <a href="http://www.geonames.org/enablefreewebservice">link</a>.</p></li>
<li><p>Tell R your credentials for GeoNames.</p></li>
</ol>
<div class="callout-warning callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>We could use the following code to tell R our credentials, but we absolutely should not.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">options</span>(<span class="at" style="color: #657422;">geonamesUsername=</span><span class="st" style="color: #20794D;">"example_username"</span>)</span></code></pre></div>
</div>
<p>This would save our username as an environment variable, but it <em>also</em> puts our API credentials directly into the script. If we share the script with our others (internally, externally or publicly) we would be sharing our credentials too. Not good!</p>
</div>
</div>
</section>
</section>
<section id="keep-it-secret-keep-it-safe" class="level2">
<h2 class="anchored" data-anchor-id="keep-it-secret-keep-it-safe">Keep it Secret, Keep it Safe</h2>
<p>The solution to this problem is to add our credentials as environment variables in our <code>.Rprofile</code> rather than in this script. The <code>.Rprofile</code> is an R script that is run at the start of every session. IT can be created and edited directly, but can also be created and edited from within R.</p>
<p>To make/open your <code>.Rprofile</code> use the <code>edit_r_profile()</code> function from the <code>{usethis}</code> package.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">library</span>(usethis)</span>
<span id="cb4-2">usethis<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">edit_r_profile</span>()</span></code></pre></div>
</div>
<p>Within this file, add <code>options(geonamesUsername="example_username")</code> on a new line, remembering to replace <code>example_username</code> with your own GeoNames username.</p>
<p>The final step is to <strong>check this this file ends with a blank line</strong>, save it and restart R. Then we are all set to start using <code>{geonames}</code>.</p>
<p>This set up procedure is indicative of most API wrappers, but of course the details will vary between each API. This is why good documentation is important!</p>
</section>
<section id="using-geonames" class="level2">
<h2 class="anchored" data-anchor-id="using-geonames">Using <code>{geonames}</code></h2>
<p>GeoNames has a whole host of <a href="http://www.geonames.org/export/ws-overview.html">different geo-datasets</a> that you can explore. As a first example, let’s get all of the geo-tagged wikipedia articles that are within 1km of Imperial College London.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">imperial_coords <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">lat =</span> <span class="fl" style="color: #AD0000;">51.49876</span>, <span class="at" style="color: #657422;">lon =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.1749</span>)</span>
<span id="cb5-2">search_radius_km <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb5-3"></span>
<span id="cb5-4">imperial_neighbours <span class="ot" style="color: #003B4F;">&lt;-</span> geonames<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">GNfindNearbyWikipedia</span>(</span>
<span id="cb5-5">  <span class="at" style="color: #657422;">lat =</span> imperial_coords<span class="sc" style="color: #5E5E5E;">$</span>lat,</span>
<span id="cb5-6">  <span class="at" style="color: #657422;">lng =</span> imperial_coords<span class="sc" style="color: #5E5E5E;">$</span>lon, </span>
<span id="cb5-7">  <span class="at" style="color: #657422;">radius =</span> search_radius_km,</span>
<span id="cb5-8">  <span class="at" style="color: #657422;">lang =</span> <span class="st" style="color: #20794D;">"en"</span>,                <span class="co" style="color: #5E5E5E;"># english language articles</span></span>
<span id="cb5-9">  <span class="at" style="color: #657422;">maxRows =</span> <span class="dv" style="color: #AD0000;">500</span>              <span class="co" style="color: #5E5E5E;"># maximum number of results to return </span></span>
<span id="cb5-10">)</span></code></pre></div>
</div>
<p>Looking at the structure of <code>imperial_neighbours</code> we can see that it is a data frame with one row per geo-tagged wikipedia article.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">str</span>(imperial_neighbours)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   204 obs. of  13 variables:
 $ summary     : chr  "The Department of Mechanical Engineering is responsible for teaching and research in mechanical engineering at "| __truncated__ "Imperial College Business School is a global business school located in London. The business school was opened "| __truncated__ "Exhibition Road is a street in South Kensington, London which is home to several major museums and academic est"| __truncated__ "Imperial College School of Medicine (ICSM) is the medical school of Imperial College London in England, and one"| __truncated__ ...
 $ elevation   : chr  "20" "18" "19" "24" ...
 $ feature     : chr  "edu" "edu" "landmark" "edu" ...
 $ lng         : chr  "-0.1746" "-0.1748" "-0.17425" "-0.1757" ...
 $ distance    : chr  "0.0335" "0.0494" "0.0508" "0.0558" ...
 $ rank        : chr  "81" "91" "90" "96" ...
 $ lang        : chr  "en" "en" "en" "en" ...
 $ title       : chr  "Department of Mechanical Engineering, Imperial College London" "Imperial College Business School" "Exhibition Road" "Imperial College School of Medicine" ...
 $ lat         : chr  "51.498524" "51.4992" "51.4989722222222" "51.4987" ...
 $ wikipediaUrl: chr  "en.wikipedia.org/wiki/Department_of_Mechanical_Engineering%2C_Imperial_College_London" "en.wikipedia.org/wiki/Imperial_College_Business_School" "en.wikipedia.org/wiki/Exhibition_Road" "en.wikipedia.org/wiki/Imperial_College_School_of_Medicine" ...
 $ countryCode : chr  NA "AE" NA "GB" ...
 $ thumbnailImg: chr  NA NA NA NA ...
 $ geoNameId   : chr  NA NA NA NA ...</code></pre>
</div>
</div>
<p>To confirm we have the correct location we can inspect the title of the first five neighbours.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">imperial_neighbours<span class="sc" style="color: #5E5E5E;">$</span>title[<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Department of Mechanical Engineering, Imperial College London"             
[2] "Imperial College Business School"                                          
[3] "Exhibition Road"                                                           
[4] "Imperial College School of Medicine"                                       
[5] "Department of Civil and Environmental Engineering, Imperial College London"</code></pre>
</div>
</div>
<p>Nothing too surprising here, mainly departments of the college and Exhibition Road, which runs along one side of the campus. These sorts of check are important - I initially forgot the minus in the longitude and was getting results in East London!</p>
</section>
<section id="what-if-there-is-no-wrapper" class="level2">
<h2 class="anchored" data-anchor-id="what-if-there-is-no-wrapper">What if there is no wrapper?</h2>
<p>If there is not a wrapper function, we can still access APIs fairly easilty using the <code>{httr}</code> package.</p>
<p>We will look at an example using <a href="http://www.omdbapi.com/">OMDb</a>, which is an open source version of <a href="https://www.imdb.com/">IMDb</a>, to get information about the movie Mean Girls.</p>
<p>To use the OMDB API you will once again need to <a href="http://www.omdbapi.com/apikey.aspx">request a free API key</a>, follow a verification link and add your API key to your <code>.Rprofile</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># Add this to .Rprofile, pasting in your own API key</span></span>
<span id="cb10-2"><span class="fu" style="color: #4758AB;">options</span>(<span class="at" style="color: #657422;">OMDB_API_Key =</span> <span class="st" style="color: #20794D;">"PASTE YOUR KEY HERE"</span>)</span></code></pre></div>
</div>
<p>You can then restart R and safely access your API key from within your R session.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># Load your API key into the current R session,</span></span>
<span id="cb11-2">ombd_api_key <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">getOption</span>(<span class="st" style="color: #20794D;">"OMDB_API_Key"</span>)</span></code></pre></div>
</div>
<p>Using the documentation for the API, requests have URLs of the following form, where terms in angular brackets should be replaced by you.</p>
<pre><code>http://www.omdbapi.com/?t=&lt;TITLE&gt;&amp;y=&lt;YEAR&gt;&amp;plot=&lt;LENGTH&gt;&amp;r=&lt;FORMAT&gt;&amp;apikey=&lt;API_KEY&gt;</code></pre>
<p>With a little bit of effort, we can write a function that composes this type of request URL for us. We will using the <code>{glue}</code> package to help us join strings together.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;">#' Compose search requests for the OMBD API</span></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;">#'</span></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;">#' @param title String defining title to search for. Words are separated by "+".</span></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;">#' @param year String defining release year to search for</span></span>
<span id="cb13-5"><span class="co" style="color: #5E5E5E;">#' @param plot String defining whether "short" or "full" plot is returned</span></span>
<span id="cb13-6"><span class="co" style="color: #5E5E5E;">#' @param format String defining return format. One of "json" or "xml"</span></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;">#' @param api_key String defining your OMDb API key.</span></span>
<span id="cb13-8"><span class="co" style="color: #5E5E5E;">#'</span></span>
<span id="cb13-9"><span class="co" style="color: #5E5E5E;">#' @return String giving a OMBD search request URL</span></span>
<span id="cb13-10"><span class="co" style="color: #5E5E5E;">#'</span></span>
<span id="cb13-11"><span class="co" style="color: #5E5E5E;">#' @examples </span></span>
<span id="cb13-12"><span class="co" style="color: #5E5E5E;">#' omdb_url("mean+girls", "2004", "short", "json", getOption(OMBD_API_Key))</span></span>
<span id="cb13-13"><span class="co" style="color: #5E5E5E;">#' </span></span>
<span id="cb13-14">omdb_url <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(title, year, plot, format, api_key) {</span>
<span id="cb13-15">  glue<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">glue</span>(<span class="st" style="color: #20794D;">"http://www.omdbapi.com/?t={title}&amp;y={year}&amp;plot={plot}&amp;r={format}&amp;apikey={api_key}"</span>)</span>
<span id="cb13-16">}</span></code></pre></div>
</div>
<p>Running the example we get:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">mean_girls_request <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">omdb_url</span>(</span>
<span id="cb14-2">  <span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"mean+girls"</span>,</span>
<span id="cb14-3">  <span class="at" style="color: #657422;">year =</span>  <span class="st" style="color: #20794D;">"2004"</span>,</span>
<span id="cb14-4">  <span class="at" style="color: #657422;">plot =</span> <span class="st" style="color: #20794D;">"short"</span>,</span>
<span id="cb14-5">  <span class="at" style="color: #657422;">format =</span>  <span class="st" style="color: #20794D;">"json"</span>,</span>
<span id="cb14-6">  <span class="at" style="color: #657422;">api_key =</span>  <span class="fu" style="color: #4758AB;">getOption</span>(<span class="st" style="color: #20794D;">"OMDB_API_Key"</span>))</span></code></pre></div>
</div>
<p>We can then use the <code>{httr}</code> package to construct our request and store the response we get.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">response <span class="ot" style="color: #003B4F;">&lt;-</span> httr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">GET</span>(<span class="at" style="color: #657422;">url =</span> mean_girls_request)</span>
<span id="cb15-2">httr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">status_code</span>(response)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 200</code></pre>
</div>
</div>
<p>Thankfully it was a success! If you get a 401 error code here, check that you have clicked the activation link for your API key.</p>
<p>The full structure of the response is quite complicated, but we can easily extract the requested data using <code>content()</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">httr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">content</span>(response)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$Title
[1] "Mean Girls"

$Year
[1] "2004"

$Rated
[1] "PG-13"

$Released
[1] "30 Apr 2004"

$Runtime
[1] "97 min"

$Genre
[1] "Comedy"

$Director
[1] "Mark Waters"

$Writer
[1] "Rosalind Wiseman, Tina Fey"

$Actors
[1] "Lindsay Lohan, Jonathan Bennett, Rachel McAdams"

$Plot
[1] "Cady Heron is a hit with The Plastics, the A-list girl clique at her new school, until she makes the mistake of falling for Aaron Samuels, the ex-boyfriend of alpha Plastic Regina George."

$Language
[1] "English, German, Vietnamese, Swahili"

$Country
[1] "United States, Canada"

$Awards
[1] "7 wins &amp; 25 nominations"

$Poster
[1] "https://m.media-amazon.com/images/M/MV5BMjE1MDQ4MjI1OV5BMl5BanBnXkFtZTcwNzcwODAzMw@@._V1_SX300.jpg"

$Ratings
$Ratings[[1]]
$Ratings[[1]]$Source
[1] "Internet Movie Database"

$Ratings[[1]]$Value
[1] "7.1/10"


$Ratings[[2]]
$Ratings[[2]]$Source
[1] "Rotten Tomatoes"

$Ratings[[2]]$Value
[1] "84%"


$Ratings[[3]]
$Ratings[[3]]$Source
[1] "Metacritic"

$Ratings[[3]]$Value
[1] "66/100"



$Metascore
[1] "66"

$imdbRating
[1] "7.1"

$imdbVotes
[1] "385,107"

$imdbID
[1] "tt0377092"

$Type
[1] "movie"

$DVD
[1] "21 Sep 2004"

$BoxOffice
[1] "$86,058,055"

$Production
[1] "N/A"

$Website
[1] "N/A"

$Response
[1] "True"</code></pre>
</div>
</div>
</section>
<section id="wrapping-up" class="level2">
<h2 class="anchored" data-anchor-id="wrapping-up">Wrapping up</h2>
<p>We have learned a bit more about how the internet works, the benefits of using an API to share data and how to request data from Open APIs.</p>
<p>When obtaining data from the internet it’s vital that you keep your credentials safe, and that don’t do more work than is needed.</p>
<ul>
<li><p>Keep your API keys out of your code. Store them in your <code>.Rprofile</code> (and make sure this is not under version control!)</p></li>
<li><p>Scraping is always a last resort. Is there an API already?</p></li>
<li><p>Writing your own code to access an API can be more painful than necessary.</p></li>
<li><p>Don’t repeat other people, if a suitable wrapper exists then use it.</p></li>
</ul>


</section>

<div id="quarto-appendix"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{varty2022,
  author = {Zak Varty},
  title = {Aquiring {Data} via an {API}},
  date = {2022-12-14},
  url = {https://www.zakvarty.com/blog/2022-12-14-apis-and-httr},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-varty2022" class="csl-entry quarto-appendix-citeas">
Zak Varty. 2022. <span>“Aquiring Data via an API.”</span> December 14,
2022. <a href="https://www.zakvarty.com/blog/2022-12-14-apis-and-httr">https://www.zakvarty.com/blog/2022-12-14-apis-and-httr</a>.
</div></div></section></div> ]]></description>
  <category>data science</category>
  <category>data acquisition</category>
  <category>tutorial</category>
  <guid>https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/index.html</guid>
  <pubDate>Wed, 14 Dec 2022 00:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/apis-and-httr.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Git: putting your new feature out into the world.</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2022-12-13-git-remote-branches/index.html</link>
  <description><![CDATA[ 



<div class="small_left">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2022-12-13-git-remote-branches/git-logo.png" alt="git logo. This is a red-orange square with rounded corners, it is rotated by 45 degrees so that it is standing on one corner and has a cut-out design representing a branching graph."></p>
</div>
<p>So you’ve added a new feature to your project. You were responsible and didn’t do this in the <code>main</code> branch. Congrats on being responsible, have some brownie points.</p>
<p>Now how the heck to you get everything moved across and delete your <code>new-feature</code> branch?</p>
<section id="check-that-your-local-main-is-up-to-date." class="level2">
<h2 class="anchored" data-anchor-id="check-that-your-local-main-is-up-to-date.">1. Check that your local <code>main</code> is up to date.</h2>
<p>Be in the <code>main</code> branch and pull any changes to the remote <code>main</code> branch.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;">git</span> checkout main </span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">git</span> pull origin main</span></code></pre></div>
<p>This might require you to resolve some merge conflicts, but these should be pretty straightforward if you are following a branch-and-merge workflow.</p>
</section>
<section id="check-that-you-remote-new-feature-is-up-to-date." class="level2">
<h2 class="anchored" data-anchor-id="check-that-you-remote-new-feature-is-up-to-date.">2. Check that you remote <code>new-feature</code> is up to date.</h2>
<p>We might mess things up while merging. Let’s make sure that if that happens we can get back to this good position with our new feature.</p>
<pre><code>git checkout new-feature
git status</code></pre>
<p>If needed: <code>add</code>, <code>commit</code> and <code>push</code>.</p>
</section>
<section id="merge-any-changes-to-main-into-your-local-new-feature-branch" class="level2">
<h2 class="anchored" data-anchor-id="merge-any-changes-to-main-into-your-local-new-feature-branch">3. Merge any changes to <code>main</code> into your local <code>new-feature</code> branch</h2>
<p>Next, we will make sure we have any changes to <code>main</code> moved across to our local <code>new-feature</code> branch.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="fu" style="color: #4758AB;">git</span> merge main</span></code></pre></div>
<p>This might again require resolving some merge conflicts. Keep calm and take tea breaks are required.</p>
</section>
<section id="commit-and-push-to-remote." class="level2">
<h2 class="anchored" data-anchor-id="commit-and-push-to-remote.">4. Commit and push to remote.</h2>
<p>Now that we have our local <code>new-feature</code> branch compatible with the remote <code>main</code> branch, lets push that to the remote.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="fu" style="color: #4758AB;">git</span> add <span class="op" style="color: #5E5E5E;">&lt;</span>YOUR_FILES_TO_COMMIT<span class="op" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;">git</span> commit <span class="at" style="color: #657422;">-m</span> <span class="st" style="color: #20794D;">"merge changes to main in preparation for PR"</span></span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;">git</span> push</span></code></pre></div>
</section>
<section id="open-a-pull-request-on-github" class="level2">
<h2 class="anchored" data-anchor-id="open-a-pull-request-on-github">5. Open a pull request on Github</h2>
<p>Wait for someone to review approve your new feature (or wait a few hours/days and do it yourself for a solo project).</p>
</section>
<section id="delete-the-local-branch" class="level2">
<h2 class="anchored" data-anchor-id="delete-the-local-branch">6. Delete the local branch</h2>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="fu" style="color: #4758AB;">git</span> checkout main</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;">git</span> branch <span class="at" style="color: #657422;">--delete</span> new-feature</span></code></pre></div>
</section>
<section id="delete-the-remote-branch" class="level2">
<h2 class="anchored" data-anchor-id="delete-the-remote-branch">7. Delete the remote branch</h2>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="fu" style="color: #4758AB;">git</span> push origin <span class="at" style="color: #657422;">--delete</span> new-feature</span></code></pre></div>
<p>On older versions of git (&lt; 1.7.0) you might need to use the alternative syntax below. This is effectively pushing nothing to the new-feature branch of origin.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="fu" style="color: #4758AB;">git</span> push origin :new-feature</span></code></pre></div>
<p>Bam! You did it! Your <code>new-feature</code> is out there in the wild, making the world a marginally better place.</p>


</section>

 ]]></description>
  <category>workflows</category>
  <category>git</category>
  <guid>https://www.zakvarty.com/blog/2022-12-13-git-remote-branches/index.html</guid>
  <pubDate>Tue, 13 Dec 2022 00:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2022-12-13-git-remote-branches/git-logo.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Web Scraping with {rvest}</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2022-12-01-rvest/index.html</link>
  <description><![CDATA[ 



<section id="aquiring-data-part-1---scraping-webpage-data-using-rvest" class="level2">
<h2 class="anchored" data-anchor-id="aquiring-data-part-1---scraping-webpage-data-using-rvest">Aquiring Data: Part 1 - Scraping webpage data using {rvest}</h2>
<div class="medium_right">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2022-12-01-rvest/rvest-logo.png" alt="Hexagonal logo of the rvest package; a sickle cutting wheat on a red background."></p>
</div>
<p>You can’t always rely on tidy, tabular data to land on your desk. Sometimes you are going to have to go out and gather data for yourself.</p>
<p>I’m not suggesting you will need to do this manually, but you will likely need to get data from the internet that’s been made publicly or privately available to you.</p>
<p>This might be information from a webpage that you gather yourself, or data shared with you by a collaborator using an API.</p>
<p>In this first blog post we will cover the basics of scraping webpages, following the <a href="https://cran.r-project.org/web/packages/rvest/vignettes/rvest.html#fnref3">vignette</a> for the {rvest} package.</p>
</section>
<section id="what-is-a-webpage" class="level2">
<h2 class="anchored" data-anchor-id="what-is-a-webpage">What is a webpage?</h2>
<p>Before we can even hope to get data from a webpage, we first need to understand <em>what</em> a webpage is.</p>
<p>Webpages are written in a similar way to LaTeX: the content and styling of webpages are handled separately and are coded using plain text files.</p>
<p>In fact, websites go one step further than LaTeX. The content and styling of websites are written in different files and in different languages. HTML (HyperText Markup Language) is used to write the content and then CSS (Cascading Style Sheets) are used to control the appearance of that content when it’s displayed to the user.</p>
</section>
<section id="html" class="level2">
<h2 class="anchored" data-anchor-id="html">HTML</h2>
<p>A basic HTML page with no styling applied might look something like this:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb1-1"><span class="kw" style="color: #003B4F;">&lt;html&gt;</span></span>
<span id="cb1-2"><span class="kw" style="color: #003B4F;">&lt;head&gt;</span></span>
<span id="cb1-3">  <span class="kw" style="color: #003B4F;">&lt;title&gt;</span>Page title<span class="kw" style="color: #003B4F;">&lt;/title&gt;</span></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;">&lt;/head&gt;</span></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;">&lt;body&gt;</span></span>
<span id="cb1-6">  <span class="kw" style="color: #003B4F;">&lt;h1</span> <span class="er" style="color: #AD0000;">id</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">'first'</span><span class="kw" style="color: #003B4F;">&gt;</span>A level 1 heading<span class="kw" style="color: #003B4F;">&lt;/h1&gt;</span></span>
<span id="cb1-7">  <span class="kw" style="color: #003B4F;">&lt;p&gt;</span>Hello World!<span class="kw" style="color: #003B4F;">&lt;/p&gt;</span></span>
<span id="cb1-8">  <span class="kw" style="color: #003B4F;">&lt;p&gt;</span>Here is some plain text <span class="dv" style="color: #AD0000;">&amp;amp;</span> <span class="kw" style="color: #003B4F;">&lt;b&gt;</span>some bold text.<span class="kw" style="color: #003B4F;">&lt;/b&gt;&lt;/p&gt;</span></span>
<span id="cb1-9">  <span class="kw" style="color: #003B4F;">&lt;img</span> <span class="er" style="color: #AD0000;">src</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">'myimg.png'</span> <span class="er" style="color: #AD0000;">width</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">'100'</span> <span class="er" style="color: #AD0000;">height</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">'100'</span><span class="kw" style="color: #003B4F;">&gt;</span></span>
<span id="cb1-10"><span class="kw" style="color: #003B4F;">&lt;/body&gt;</span></span></code></pre></div>
<section id="html-elements" class="level3">
<h3 class="anchored" data-anchor-id="html-elements">HTML elements</h3>
<!-- for presentation 
```{.html}
#| code-line-numbers: "3"
<html>
<head>
  <title>Page title</title>
</head>
<body>
  <h1 id='first'>A level 1 heading</h1>
  <p>Hello World!</p>
  <p>Here is some plain text &amp; <b>some bold text.</b></p>
  <img src='myimg.png' width='100' height='100'>
</body>
```
-->
<p>Just like XML data files, HTML has a hierarchical structure. This structure is crafted using HTML elements. Each HTML element is made up of of a start tag, optional attributes, an end tag.</p>
<p>We can see each of these in the first level header, where <code>&lt;h1&gt;</code> is the opening tag, <code>id='first'</code> is an additional attribute and <code>&lt;/h1&gt;</code> is the closing tag. Everything between the opening and closing tag are the contents of that element. There are also some special elements that consist of only a single tag and its optional attributes. An example of this is the <code>&lt;img&gt;</code> tag.</p>
<p>Since <code>&lt;</code> and <code>&gt;</code> are used for start and end tags, you can’t write them directly in an HTML document. Instead, you have to use escape characters. This sounds fancy, but it’s just an alternative way to write characters that serve some special function within a language.</p>
<p>You can write greater than <code>&amp;gt;</code> and less than as <code>&amp;lt;</code>. You might notice that those escapes use an ampersand (&amp;). This means that if you want a literal ampersand on your webpage, you have to escape too using <code>&amp;amp;</code>.</p>
<p>There are a wide range of possible HTML tags and escapes. We’ll cover the most common tags in this lecture and you don’t need to worry about escapes too much because <code>{rvest}</code> will automatically handle them for you.</p>
</section>
<section id="important-html-elements" class="level3">
<h3 class="anchored" data-anchor-id="important-html-elements">Important HTML Elements</h3>
<p>In all, there are in excess of 100 HTML elements. The most important ones for you to know about are:</p>
<ul>
<li><p>The <code>&lt;html&gt;</code> element, that must enclose every HTML page. The <code>&lt;html&gt;</code> element must have two child elements within it. The <code>&lt;head&gt;</code> element contains metadata about the document, like the page title that is shown in the browser tab and the CSS style sheet that should be applied. The <code>&lt;body&gt;</code> element then contains all of the content that you see in the browser.</p></li>
<li><p>Block elements are used to give structure to the page. These are elements like headings, sub-headings and so on from <code>&lt;h1&gt;</code> all the way down to <code>&lt;h6&gt;</code>. This category also contains paragraph elements <code>&lt;p&gt;</code>, ordered lists <code>&lt;ol&gt;</code> unordered lists <code>&lt;ul&gt;</code>.</p></li>
<li><p>Finally, inline tags like <code>&lt;b&gt;</code> for bold, <code>&lt;i&gt;</code> for italics, and <code>&lt;a&gt;</code> for hyperlinks are used to format text inside block elements.</p></li>
</ul>
<p>When you come across a tag that you’ve never seen before, you can find out what it does with just a little bit of googling. A good resource here is the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML">MDN Web Docs</a> which are produced by Mozilla, the company that makes the Firefox web browser. The <a href="https://www.w3schools.com/html/default.asp">W3schools website</a> is another great resource for web development and coding resources more generally.</p>
</section>
</section>
<section id="html-attributes" class="level2">
<h2 class="anchored" data-anchor-id="html-attributes">HTML Attributes</h2>
<p>We’ve seen one example of a header with an additional attribute. More generally, all tags can have named attributes. These attributes are contained within the opening tag and look something like:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb2-1"><span class="kw" style="color: #003B4F;">&lt;tag</span> <span class="er" style="color: #AD0000;">attribute1</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">'value1'</span> <span class="er" style="color: #AD0000;">attribute2</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">'value2'</span><span class="kw" style="color: #003B4F;">&gt;</span>element contents<span class="kw" style="color: #003B4F;">&lt;/tag&gt;</span></span></code></pre></div>
<p>Two of the most important attributes are <code>id</code> and <code>class</code>. These attributes are used in conjunction with the CSS file to control the visual appearance of the page. These are often very useful to identify the elements that you are interested in when scraping data off a page.</p>
</section>
<section id="css-selectors" class="level2">
<h2 class="anchored" data-anchor-id="css-selectors">CSS Selectors</h2>
<p>The Cascading Style Sheet is used to describe how your HTML content will be displayed. To do this, CSS has it’s own system for selecting elements of a webpage, called CSS selectors.</p>
<p>CSS selectors define patterns for locating the HTML elements that a particular style should be applied to. A happy side-effect of this is that they can sometimes be very useful for scraping, because they provide a concise way of describing which elements you want to extract.</p>
<p>CSS Selectors can work on the level of an element type, a class, or a tag and these can be used in a nested (or <em>cascading</em>) way.</p>
<ul>
<li><p>The <code>p</code> selector will select all paragraph <code>&lt;p&gt;</code> elements.</p></li>
<li><p>The <code>.title</code> selector will select all elements with class <code>“title”</code>.</p></li>
<li><p>The <code>p.special</code> selector will select all<code>&lt;p&gt;</code> elements with class <code>“special”</code>.</p></li>
<li><p>The <code>#title</code> selector will select the element with the id attribute <code>“title”</code>.</p></li>
</ul>
<p>When you want to select a single element <code>id</code> attributes are particularly useful because that <em>must</em> be unique within a html document. Unfortunately, this is only helpful if the developer added an <code>id</code> attribute to the element(s) you want to scrape!</p>
<p>If you want to learn more CSS selectors I recommend starting with the fun <a href="https://flukeout.github.io/">CSS dinner tutorial</a> to build a base of knowledge and then using the <a href="https://www.w3schools.com/css/default.asp">W3schools resources</a> as a reference to explore more webpages in the wild.</p>
</section>
<section id="which-attributes-and-selectors-do-you-need" class="level2">
<h2 class="anchored" data-anchor-id="which-attributes-and-selectors-do-you-need">Which Attributes and Selectors Do You Need?</h2>
<p>To scrape data from a webpage, you first have to identify the tag and attribute combinations that you are interested in gathering.</p>
<p>To find your elements of interest, you have three options. These go from hardest to easiest but also from most to least robust.</p>
<ul>
<li>right click + “inspect page source” (F12)</li>
<li>right click + “inspect”</li>
<li>Rvest <a href="https://rvest.tidyverse.org/articles/selectorgadget.html">Selector Gadget</a> (very useful but fallible)</li>
</ul>
<p>Inspecting the source of some familiar websites can be a useful way to get your head around these concepts. Beware though that sophisticated webpages can be quite intimidating. A good place to start is with simpler, static websites such as personal websites, rather than the dynamic webpages of online retailers or social media platforms.</p>
</section>
<section id="reading-html-with-rvest" class="level2">
<h2 class="anchored" data-anchor-id="reading-html-with-rvest">Reading HTML with <code>{rvest}</code></h2>
<p>With <code>{rvest}</code>, reading a html page can be as simple as loading in tabular data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">html <span class="ot" style="color: #003B4F;">&lt;-</span> rvest<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">read_html</span>(<span class="st" style="color: #20794D;">"https://www.zakvarty.com/professional/teaching.html"</span>)</span></code></pre></div>
</div>
<p>The <code>class</code> of the resulting object is an <code>xml_document</code>. This type of object is from the low-level package <code>{xml2}</code>, which allows you to read xml files into R.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">class</span>(html)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "xml_document" "xml_node"    </code></pre>
</div>
</div>
<p>We can see that this object is split into several components: first is some metadata on the type of document we have scraped, followed by the head and then the body of that html document.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">html</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{html_document}
&lt;html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en"&gt;
[1] &lt;head&gt;\n&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8 ...
[2] &lt;body class="nav-fixed"&gt;\n\n&lt;div id="quarto-search-results"&gt;&lt;/div&gt;\n  &lt;he ...</code></pre>
</div>
</div>
<p>We have several possible approaches to extracting information from this document.</p>
</section>
<section id="extracting-html-elements" class="level2">
<h2 class="anchored" data-anchor-id="extracting-html-elements">Extracting HTML elements</h2>
<p>In <code>{rvest}</code> you can extract a single element with <code>html_element()</code>, or all matching elements with <code>html_elements()</code>. Both functions take a document object and one or more CSS selectors as inputs.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;">library</span>(rvest)</span>
<span id="cb8-2">html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_elements</span>(<span class="st" style="color: #20794D;">"h1"</span>)</span>
<span id="cb8-3"><span class="do" style="color: #5E5E5E;
font-style: italic;">## {xml_nodeset (1)}</span></span>
<span id="cb8-4"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [1] &lt;h1&gt;Teaching&lt;/h1&gt;</span></span>
<span id="cb8-5">html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_elements</span>(<span class="st" style="color: #20794D;">"h2"</span>)</span>
<span id="cb8-6"><span class="do" style="color: #5E5E5E;
font-style: italic;">## {xml_nodeset (2)}</span></span>
<span id="cb8-7"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [1] &lt;h2 id="toc-title"&gt;On this page&lt;/h2&gt;</span></span>
<span id="cb8-8"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [2] &lt;h2 class="anchored" data-anchor-id="course-history"&gt;Course History&lt;/h2&gt;</span></span>
<span id="cb8-9">html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_elements</span>(<span class="st" style="color: #20794D;">"p"</span>)</span>
<span id="cb8-10"><span class="do" style="color: #5E5E5E;
font-style: italic;">## {xml_nodeset (2)}</span></span>
<span id="cb8-11"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [1] &lt;p&gt;I am fortunate to have had the opportunity to teach in a variety of ro ...</span></span>
<span id="cb8-12"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [2] &lt;p&gt;I am an associate fellow of the Higher Education Academy, which you ca ...</span></span></code></pre></div>
</div>
<p>You can also combine and nest these selectors. For example you might want to extract all links that are within paragraphs <em>and</em> all second level headers.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_elements</span>(<span class="st" style="color: #20794D;">"p a,h2"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{xml_nodeset (3)}
[1] &lt;h2 id="toc-title"&gt;On this page&lt;/h2&gt;
[2] &lt;a href="https://www.advance-he.ac.uk/fellowship/associate-fellowship"&gt;he ...
[3] &lt;h2 class="anchored" data-anchor-id="course-history"&gt;Course History&lt;/h2&gt;</code></pre>
</div>
</div>
</section>
<section id="extracting-data-from-html-elements" class="level2">
<h2 class="anchored" data-anchor-id="extracting-data-from-html-elements">Extracting Data From HTML Elements</h2>
<p>Now that we’ve got the elements we care about extracted from the complete document. But how do we get the data we need out of those elements?</p>
<p>You’ll usually get the data from either the contents of the HTML element or else from one of it’s attributes. If you’re really lucky, the data you need will already be formatted for you as a HTML table or list.</p>
<section id="extracting-text" class="level3">
<h3 class="anchored" data-anchor-id="extracting-text">Extracting text</h3>
<p>The functions <code>rvest::html_text()</code> and <code>rvest::html_text2()</code> can be used to extract the plain text contents of an HTML element.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;">html_elements</span>(<span class="st" style="color: #20794D;">"#teaching li"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;">html_text2</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "one-to-one tuition for high school students;"                                   
[2] "running workshops and computer labs for undergraduate and postgraduate modules;"
[3] "delivering short courses on scientific communication and LaTeX;"                
[4] "supervising an undergraduate research project;"                                 
[5] "developing and lecturing postgraduate modules in statistics and data science."  </code></pre>
</div>
</div>
<p>The difference between <code>html_text()</code> and <code>html_text2()</code> is in how they handle whitespace. In HTML whitespace and line breaks have very little influence over how the code is interpreted by the computer (this is similar to R but very different from Python). <code>html_text()</code> will extract the text as it is in the raw html, while <code>html_text2()</code> will do its best to extract the text in a way that gives you something similar to what you’d see in the browser.</p>
</section>
<section id="extracting-attributes" class="level3">
<h3 class="anchored" data-anchor-id="extracting-attributes">Extracting Attributes</h3>
<p>Attributes are also used to record information that you might like to collect. For example, the destination of links are stored in the <code>href</code> attribute and the source of images is stored in the <code>src</code> attribute.</p>
<p>As an example of this, consider trying to extract the twitter link from the icon in the page footer. This is quite tricky to locate in the html source, so I used the <a href="https://rvest.tidyverse.org/articles/selectorgadget.html">Selector Gadget</a> to help find the correct combination of elements.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_element</span>(<span class="st" style="color: #20794D;">".compact:nth-child(1) .nav-link"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{html_node}
&lt;a class="nav-link" href="https://www.twitter.com/zakvarty"&gt;
[1] &lt;i class="bi bi-twitter" role="img"&gt;\n&lt;/i&gt;</code></pre>
</div>
</div>
<p>To extract the <code>href</code> attribute from the scraped element, we use the <code>rvest::html_attr()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-2">  <span class="fu" style="color: #4758AB;">html_elements</span>(<span class="st" style="color: #20794D;">".compact:nth-child(1) .nav-link"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-3">  <span class="fu" style="color: #4758AB;">html_attr</span>(<span class="st" style="color: #20794D;">"href"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "https://www.twitter.com/zakvarty"</code></pre>
</div>
</div>
<p><strong>Note:</strong> <code>rvest::html_attr()</code> will always return a character string (or list of character strings). If you are extracting an attribute that describes a quantity, such as the width of an image, you’ll need to convert this from a string to your required data type. For example, of the width is measures in pixels you might use <code>as.integer()</code>.</p>
</section>
<section id="extracting-tables" class="level3">
<h3 class="anchored" data-anchor-id="extracting-tables">Extracting tables</h3>
<p>HTML tables are composed in a similar, nested manner to LaTeX tables.</p>
<p>There are four main elements to know about that make up an HTML table:</p>
<ul>
<li><code>&lt;table&gt;</code>,</li>
<li><code>&lt;tr&gt;</code> (table row),</li>
<li><code>&lt;th&gt;</code> (table heading),</li>
<li><code>&lt;td&gt;</code> (table data).</li>
</ul>
<p>Here’s our simple example data, formatted as an HTML table:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">html_2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">minimal_html</span>(<span class="st" style="color: #20794D;">"</span></span>
<span id="cb17-2"><span class="st" style="color: #20794D;">  &lt;table&gt;</span></span>
<span id="cb17-3"><span class="st" style="color: #20794D;">    &lt;tr&gt;</span></span>
<span id="cb17-4"><span class="st" style="color: #20794D;">      &lt;th&gt;Name&lt;/th&gt;</span></span>
<span id="cb17-5"><span class="st" style="color: #20794D;">      &lt;th&gt;Number&lt;/th&gt;</span></span>
<span id="cb17-6"><span class="st" style="color: #20794D;">    &lt;/tr&gt;</span></span>
<span id="cb17-7"><span class="st" style="color: #20794D;">    &lt;tr&gt;</span></span>
<span id="cb17-8"><span class="st" style="color: #20794D;">      &lt;td&gt;A&lt;/td&gt;</span></span>
<span id="cb17-9"><span class="st" style="color: #20794D;">      &lt;td&gt;1&lt;/td&gt;</span></span>
<span id="cb17-10"><span class="st" style="color: #20794D;">    &lt;/tr&gt;</span></span>
<span id="cb17-11"><span class="st" style="color: #20794D;">    &lt;tr&gt;</span></span>
<span id="cb17-12"><span class="st" style="color: #20794D;">      &lt;td&gt;B&lt;/td&gt;</span></span>
<span id="cb17-13"><span class="st" style="color: #20794D;">      &lt;td&gt;2&lt;/td&gt;</span></span>
<span id="cb17-14"><span class="st" style="color: #20794D;">    &lt;/tr&gt;</span></span>
<span id="cb17-15"><span class="st" style="color: #20794D;">    &lt;tr&gt;</span></span>
<span id="cb17-16"><span class="st" style="color: #20794D;">      &lt;td&gt;C&lt;/td&gt;</span></span>
<span id="cb17-17"><span class="st" style="color: #20794D;">      &lt;td&gt;3&lt;/td&gt;</span></span>
<span id="cb17-18"><span class="st" style="color: #20794D;">    &lt;/tr&gt;</span></span>
<span id="cb17-19"><span class="st" style="color: #20794D;">  &lt;/table&gt;</span></span>
<span id="cb17-20"><span class="st" style="color: #20794D;">  "</span>)</span></code></pre></div>
</div>
<p>Since tables are a common way to store data, <code>{rvest}</code> includes a useful function <code>html_table()</code> that converts directly from an HTML table into a tibble.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">html_2 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;">html_element</span>(<span class="st" style="color: #20794D;">"table"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-3">  <span class="fu" style="color: #4758AB;">html_table</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 2
  Name  Number
  &lt;chr&gt;  &lt;int&gt;
1 A          1
2 B          2
3 C          3</code></pre>
</div>
</div>
<p>Applying this to our real scraped data we can easily extract the table of taught courses.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;">html_element</span>(<span class="st" style="color: #20794D;">"table"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-3">  <span class="fu" style="color: #4758AB;">html_table</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 25 × 3
   Year      Course                                   Role                      
   &lt;chr&gt;     &lt;chr&gt;                                    &lt;chr&gt;                     
 1 "2021-22" Supervised Learning                      Lecturer                  
 2 ""        Ethics in Data Science I                 Lecturer                  
 3 ""        Ethics in Data Science II                Lecturer                  
 4 "—"       —                                        —                         
 5 "2020-21" MATH562/582: Extreme Value Theory        Lecturer                  
 6 ""        MATH331: Bayesian Inference              Graduate teaching assista…
 7 ""        MATH330: Likelihood Inference            Graduate teaching assista…
 8 "2019-20" DSCI485: Introduction to LaTeX           Co-leading short course   
 9 ""        MATH566: Longitudinal Data Analysis      Graduate teaching assista…
10 "2018-19" STOR-i Internship: Introduction to LaTeX Co-leading short course   
# … with 15 more rows</code></pre>
</div>
</div>
</section>
</section>
<section id="tip-for-building-tibbles" class="level2">
<h2 class="anchored" data-anchor-id="tip-for-building-tibbles">Tip for Building Tibbles</h2>
<p>When scraping data from a webpage, your end-goal is typically going to be constructing a data.frame or a tibble.</p>
<p>If you are following our description of tidy data, you’ll want each row to correspond some repeated unit on the HTML page. In this case, you should</p>
<ol type="1">
<li>Use <code>html_elements()</code> to select the elements that contain each observation unit;</li>
<li>Use <code>html_element()</code> to extract the variables from each of those observations.</li>
</ol>
<p>Taking this approach guarantees that you’ll get the same number of values for each variable, because <code>html_element()</code> always returns the same number of outputs as inputs. This is vital when you have missing data - when not every observation unit has a value for every variable of interest.</p>
<p>As an example, consider this extract of text about the <a href="https://dplyr.tidyverse.org/reference/starwars.html#ref-examples">starwars dataset</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">starwars_html <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">minimal_html</span>(<span class="st" style="color: #20794D;">"</span></span>
<span id="cb22-2"><span class="st" style="color: #20794D;">  &lt;ul&gt;</span></span>
<span id="cb22-3"><span class="st" style="color: #20794D;">    &lt;li&gt;&lt;b&gt;C-3PO&lt;/b&gt; is a &lt;i&gt;droid&lt;/i&gt; that weighs &lt;span class='weight'&gt;167 kg&lt;/span&gt;&lt;/li&gt;</span></span>
<span id="cb22-4"><span class="st" style="color: #20794D;">    &lt;li&gt;&lt;b&gt;R2-D2&lt;/b&gt; is a &lt;i&gt;droid&lt;/i&gt; that weighs &lt;span class='weight'&gt;96 kg&lt;/span&gt;&lt;/li&gt;</span></span>
<span id="cb22-5"><span class="st" style="color: #20794D;">    &lt;li&gt;&lt;b&gt;Yoda&lt;/b&gt; weighs &lt;span class='weight'&gt;66 kg&lt;/span&gt;&lt;/li&gt;</span></span>
<span id="cb22-6"><span class="st" style="color: #20794D;">    &lt;li&gt;&lt;b&gt;R4-P17&lt;/b&gt; is a &lt;i&gt;droid&lt;/i&gt;&lt;/li&gt;</span></span>
<span id="cb22-7"><span class="st" style="color: #20794D;">  &lt;/ul&gt;</span></span>
<span id="cb22-8"><span class="st" style="color: #20794D;">  "</span>)</span></code></pre></div>
</div>
<p>This is an unordered list where each list item corresponds to one observational unit (one character from the starwars universe). The name of the character is given in bold, the character species is specified in italics and the weight of the character is denoted by the <code>.weight</code> class. However, some characters have only a subset of these variables defined: for example Yoda has no species entry.</p>
<p>If we try to extract each element directly, our vectors of variable values are of different lengths. We don’t know where the missing values should be, so we can’t line them back up to make a tibble.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">starwars_html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_elements</span>(<span class="st" style="color: #20794D;">"b"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_text2</span>()</span>
<span id="cb23-2"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [1] "C-3PO"  "R2-D2"  "Yoda"   "R4-P17"</span></span>
<span id="cb23-3">starwars_html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_elements</span>(<span class="st" style="color: #20794D;">"i"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_text2</span>()</span>
<span id="cb23-4"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [1] "droid" "droid" "droid"</span></span>
<span id="cb23-5">starwars_html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_elements</span>(<span class="st" style="color: #20794D;">".weight"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_text2</span>()</span>
<span id="cb23-6"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [1] "167 kg" "96 kg"  "66 kg"</span></span></code></pre></div>
</div>
<p>What we should do instead is start by extracting all of the list item elements using <code>html_elements()</code>. Once we have done this, we can then use <code>html_element()</code> to extract each variable for all characters. This will pad with NAs, so that we can collate them into a tibble.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">starwars_characters <span class="ot" style="color: #003B4F;">&lt;-</span> starwars_html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_elements</span>(<span class="st" style="color: #20794D;">"li"</span>)</span>
<span id="cb24-2"></span>
<span id="cb24-3">starwars_characters <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_element</span>(<span class="st" style="color: #20794D;">"b"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_text2</span>()</span>
<span id="cb24-4"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [1] "C-3PO"  "R2-D2"  "Yoda"   "R4-P17"</span></span>
<span id="cb24-5">starwars_characters <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_element</span>(<span class="st" style="color: #20794D;">"i"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_text2</span>()</span>
<span id="cb24-6"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [1] "droid" "droid" NA      "droid"</span></span>
<span id="cb24-7">starwars_characters <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_element</span>(<span class="st" style="color: #20794D;">".weight"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_text2</span>()</span>
<span id="cb24-8"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [1] "167 kg" "96 kg"  "66 kg"  NA</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">tibble<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb25-2">  <span class="at" style="color: #657422;">name =</span> starwars_characters <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_element</span>(<span class="st" style="color: #20794D;">"b"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_text2</span>(),</span>
<span id="cb25-3">  <span class="at" style="color: #657422;">species =</span> starwars_characters <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_element</span>(<span class="st" style="color: #20794D;">"i"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_text2</span>(),</span>
<span id="cb25-4">  <span class="at" style="color: #657422;">weight =</span> starwars_characters <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_element</span>(<span class="st" style="color: #20794D;">".weight"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_text2</span>()</span>
<span id="cb25-5">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 3
  name   species weight
  &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt; 
1 C-3PO  droid   167 kg
2 R2-D2  droid   96 kg 
3 Yoda   &lt;NA&gt;    66 kg 
4 R4-P17 droid   &lt;NA&gt;  </code></pre>
</div>
</div>


</section>

<div id="quarto-appendix"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{varty2022,
  author = {Zak Varty},
  title = {Web {Scraping} with `\{Rvest\}`},
  date = {2022-12-01},
  url = {https://www.zakvarty.com/blog/2022-12-01-rvest},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-varty2022" class="csl-entry quarto-appendix-citeas">
Zak Varty. 2022. <span>“Web Scraping with `{Rvest}`.”</span> December 1,
2022. <a href="https://www.zakvarty.com/blog/2022-12-01-rvest">https://www.zakvarty.com/blog/2022-12-01-rvest</a>.
</div></div></section></div> ]]></description>
  <category>data science</category>
  <category>data acquisition</category>
  <category>tutorial</category>
  <guid>https://www.zakvarty.com/blog/2022-12-01-rvest/index.html</guid>
  <pubDate>Thu, 01 Dec 2022 00:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2022-12-01-rvest/rvest-logo.png" medium="image" type="image/png" height="167" width="144"/>
</item>
<item>
  <title>Good Enough Practices in Scientific Computing</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2022-10-19-good-enough-practices-in-scientific-computing/index.html</link>
  <description><![CDATA[ 



<!--Photo by <a href="https://unsplash.com/@qwitka?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Maksym Kaharlytskyi</a> on <a href="https://unsplash.com/s/photos/filing-cabinet?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a> -->
<section id="reading-summary" class="level2">
<h2 class="anchored" data-anchor-id="reading-summary">Reading Summary</h2>
<p><code>wilson2017good</code></p>
<p><strong>Title:</strong> <em>Good Enough Practices in Scientific Computing. {PLOS Computational Biology, 2017} (20 pages).</em></p>
<p><strong>Authors:</strong> <em>Greg Wilson, Jennifer Bryan, Karen Cranston, Justin Kitzes, Lex Nederbragt and Tracy K. Teal.</em></p>
<p><strong>Key words:</strong> <em>computing</em>, <em>research skills</em>, <em>reproducibilty</em>, <em>guides</em>.</p>
<p>In this paper by <span class="citation" data-cites="wilson2017good">Wilson et al. (2017)</span>, a collection of experienced researchers and instructors give simple ways to implement good computing practices during a research project. They do this by providing a list of concrete recommendations that every researcher can adopt, regardless of their current computational skills. This is important to help the transition toward open, documented and reproducible research. The article is aimed specifically at people who are new to computational research but also contains useful guidance for more experienced researchers.</p>
</section>
<section id="notes" class="level2">
<h2 class="anchored" data-anchor-id="notes">Notes</h2>
<p>This article describes some of the best-practices in software development and how those ideas can be implemented in a reasearch project. This focus here is on implementing these approaches without requiring reseachers to learn how to use lots of peripheral technologies (for example git and LaTeX / markdown).</p>
<p>An earlier paper “Best Practices for Scientifc Computing” <span class="citation" data-cites="wilson2014best">(Wilson et al. 2014)</span>, is aimed at those who have or would like to develop such peripheral skills.</p>
</section>
<section id="suggested-best-practices" class="level2">
<h2 class="anchored" data-anchor-id="suggested-best-practices">Suggested Best Practices</h2>
<p>Best practices are grouped into 6 main themes.</p>
<section id="data-management" class="level3">
<h3 class="anchored" data-anchor-id="data-management">1. Data Management</h3>
<section id="create-the-data-you-wish-to-see-in-the-world" class="level4">
<h4 class="anchored" data-anchor-id="create-the-data-you-wish-to-see-in-the-world">Create the data you wish to see in the world</h4>
<p>Raw data should be created in a format that is ammenable to analysis and where multiple tables are used, a unique identifer used to link each record across these tables.</p>
</section>
<section id="keep-it-backed-up-keep-it-intact" class="level4">
<h4 class="anchored" data-anchor-id="keep-it-backed-up-keep-it-intact">Keep it backed up, keep it intact</h4>
<p>This raw data should be backed up in more than one location and preserved during the analysis (i.e.&nbsp;<strong>not</strong> directly edited). When cleaning, handling and modelling the data keep a record of all steps used.</p>
</section>
<section id="share-the-data" class="level4">
<h4 class="anchored" data-anchor-id="share-the-data">Share the data</h4>
<p>To allow your future self (and others) to access and cite your hard won data, submit it to a reputable DOI-issuing repository.</p>
</section>
</section>
<section id="software" class="level3">
<h3 class="anchored" data-anchor-id="software">2. Software</h3>
<section id="script-files" class="level4">
<h4 class="anchored" data-anchor-id="script-files">Script files</h4>
<p>Start each script with a brief explanatory comment of its purpose and a description of any dependencies.</p>
<p>Within scripts, ruthlessly eliminate duplication. Do this by creating functions for any repeated operations and provide simple examples of how those functions work.</p>
<p>When making functions and variables, give them meaningful names. As rule of thumb: fuctions are verbs, variables are nouns.</p>
<p>If you need your script to perform different actions, control this behaviour programmatically rather than by commenting/uncommenting sections of code.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Uncomment for weekly reports</span></span>
<span id="cb1-2">output_dir <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"weekly_reports/"</span>,year,<span class="st" style="color: #20794D;">"/"</span>,week_of_year,<span class="st" style="color: #20794D;">"/"</span>)</span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;"># Uncomment for annual reports</span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;">#output_dir &lt;- paste0("annual_reports/",year,"/")</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">report_type <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"weekly"</span></span>
<span id="cb2-2">year <span class="ot" style="color: #003B4F;">=</span> <span class="dv" style="color: #AD0000;">2022</span></span>
<span id="cb2-3">week_of_year <span class="ot" style="color: #003B4F;">=</span> <span class="dv" style="color: #AD0000;">21</span></span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="cf" style="color: #003B4F;">if</span> (report_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"weekly"</span>) {</span>
<span id="cb2-6">  output_dir <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"weekly_reports/"</span>,year,<span class="st" style="color: #20794D;">"/"</span>,week_of_year,<span class="st" style="color: #20794D;">"/"</span>)</span>
<span id="cb2-7">} <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (report_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"annual"</span>) {</span>
<span id="cb2-8">  output_dir <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"annual_reports/"</span>,year,<span class="st" style="color: #20794D;">"/"</span>)</span>
<span id="cb2-9">} <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb2-10">  <span class="fu" style="color: #4758AB;">stop</span>(<span class="st" style="color: #20794D;">"report_type should be 'weekly' or 'annual'."</span>)</span>
<span id="cb2-11">}</span></code></pre></div>
</div>
<p>Submit the final code for your research project to to a reputable DOI-issuing repository.</p>
</section>
<section id="external-code" class="level4">
<h4 class="anchored" data-anchor-id="external-code">External Code</h4>
<p>Before writing your own code, check if someone else got there first. Are there well-maintained software libraries that already do what you need?</p>
<p>If so, test the code (extensively!) before relying on it. Keep a record of what you have tested and add to this as you find awkward edge cases.</p>
</section>
</section>
<section id="collaboration" class="level3">
<h3 class="anchored" data-anchor-id="collaboration">3. Collaboration</h3>
<section id="collaborating-within-your-team" class="level4">
<h4 class="anchored" data-anchor-id="collaborating-within-your-team">Collaborating within your team</h4>
<p>Create a single file called <code>README</code> giving an overview of your project. This should describe aim of the project and how to get started working with the data/code/writing. A good rule of thumb is to write this as though it were for either a new-starter on your team. Future you will thank you!</p>
<p>Create a shared to-do list for the project in a file called <code>TODO</code> and decide on how you will communicate during the project. For example, what channels will you use for group meetings, quick questions, assigning tasks and setting deadlines?</p>
</section>
<section id="opening-up-to-the-wider-world" class="level4">
<h4 class="anchored" data-anchor-id="opening-up-to-the-wider-world">Opening up to the wider world</h4>
<p>Add another file called <code>LICENSE</code> giving the licensing information for the project. This says who can use it and for what purposes. No license implies you are keeping all rights and nobody is allowed to reuse or modify the materials. For more information on licenses see <a href="choosealicense.com">choosealicense.com</a> or <a href="https://opensource.guide/legal/#which-open-source-license-is-appropriate-for-my-project">The Open Source Guide</a>. Consult your company’s legal folks as needed.</p>
<p>Create a final file called <code>CITATION</code> letting other people know how they should give proper attribution to your work if they use it.</p>
</section>
</section>
<section id="project-organisation" class="level3">
<h3 class="anchored" data-anchor-id="project-organisation">4. Project Organisation</h3>
<p>Each project should be self-contained in its own directory (folder) and this directory should be named after the project.</p>
<p>Create subdirectories called:</p>
<ul>
<li><code>docs/</code> for all text documents associated with the project</li>
<li><code>data/raw/</code> for all raw data and metadata</li>
<li><code>data/derived/</code> for all data files during cleanup and analysis</li>
<li><code>src</code> for all code you write as part of this project</li>
<li><code>bin</code> for all external code or compiled programs that you use in this project</li>
</ul>
<p>When adding files and subdirectories within this structure, name these to clearly reflect their content or function.</p>
</section>
<section id="tracking-changes" class="level3">
<h3 class="anchored" data-anchor-id="tracking-changes">5. Tracking Changes</h3>
<p>As soon as any file is created by a human, back it up in multiple locations. If you make a huge file, then consult your IT folks about how to store and back it up.</p>
<p>Add a file called <code>CHANGELOG</code> to the docs subfolder. Use this to track all changes made within the project by all contributers, describing when the changes happened and why they were made.</p>
<p>Keep these changes as small as possible and share among collaborators frequently to avoid getting out of sync.</p>
<p>Make a Copy the entire project whenever a significant change has been made.</p>
<p>Better yet, use a dedicated version control system such as git if that is a realistic option.</p>
</section>
<section id="manuscripts" class="level3">
<h3 class="anchored" data-anchor-id="manuscripts">6. Manuscripts</h3>
<p>Pick one and stick to it within each project. The former has a much lower bar to entry and has most of the benefits of the latter (other than manuscripts being stored in the same place as everything else).</p>
<ol type="1">
<li><p>Write the manuscript using online tools with rich formatting, change tracking and reference management. (e.g.&nbsp;Overleaf, Google Docs)</p></li>
<li><p>Write the manuscript in plain text format the permits version control (e.g.&nbsp;tex + git or markdown + git)</p></li>
</ol>



</section>
</section>

<div id="quarto-appendix"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-wilson2014best" class="csl-entry">
Wilson, Greg, D. A. Aruliah, C. Titus Brown, Neil P. Chue Hong, Matt Davis, Richard T. Guy, Steven H. D. Haddock, et al. 2014. <span>“Best Practices for Scientific Computing.”</span> <em>PLOS Biology</em> 12 (January): 1–7. <a href="https://doi.org/10.1371/journal.pbio.1001745">https://doi.org/10.1371/journal.pbio.1001745</a>.
</div>
<div id="ref-wilson2017good" class="csl-entry">
Wilson, Greg, Jennifer Bryan, Karen Cranston, Justin Kitzes, Lex Nederbragt, and Tracy K Teal. 2017. <span>“Good Enough Practices in Scientific Computing.”</span> <em>PLoS Computational Biology</em> 13 (June): 1–20. <a href="https://doi.org/10.1371/journal.pcbi.1005510">https://doi.org/10.1371/journal.pcbi.1005510</a>.
</div>
</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section></div> ]]></description>
  <category>academic skills</category>
  <category>computing</category>
  <category>reproducible research</category>
  <category>reading summary</category>
  <guid>https://www.zakvarty.com/blog/2022-10-19-good-enough-practices-in-scientific-computing/index.html</guid>
  <pubDate>Tue, 18 Oct 2022 23:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2022-10-19-good-enough-practices-in-scientific-computing/gepisc-image.png" medium="image" type="image/png" height="68" width="144"/>
</item>
<item>
  <title>Data Journalism: Recreating a Professional Plot</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2022-10-15-BBC-temperature-plot/index.html</link>
  <description><![CDATA[ 



<section id="bbc-temperature-records" class="level1">
<h1>BBC Temperature Records</h1>
<p>On Friday 2022-10-14, the BBC Data Journalism Team released this excellent <a href="https://www.bbc.co.uk/news/science-environment-63244353">article</a> about the record temperatures in the UK during this summer’s heatwave. The article has some amazing data visualisations, and draws on a recent Met Office report.</p>
<p>I wanted to try and recreate one of the plots to test the limits of my ggplot knowledge. Since I had already tackled a stacked bar plot, I figured I might have a go at their dumbbell plot that shows the weather stations which exceeded their previous records largest margins.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.zakvarty.com/blog/2022-10-15-BBC-temperature-plot/bbc-temperature-records.png.webp" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">bbc temperature records dumbbell plot</figcaption><p></p>
</figure>
</div>
<p>I couldn’t find the data source, so spent <strong>far</strong> too long with a printed copy of the original figure to make my own version of the data set.</p>
<p>It took a while, but I got most of the way there with it and am happy with the final result.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.zakvarty.com/blog/2022-10-15-BBC-temperature-plot/zdv-temperature-records.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">my attempt at recreating the same plot</figcaption><p></p>
</figure>
</div>
<p>There were a few things that still have me stumped, that I might revisit at some later date:</p>
<ul class="task-list">
<li><input type="checkbox" disabled="" checked="">
Left aligning title and caption (Thanks to Jack Davison for this!)</li>
<li><input type="checkbox" disabled="">
Using gradients on multiple parts of the plot</li>
<li><input type="checkbox" disabled="">
Using the YeOrRd gradient, rather than default blues</li>
<li><input type="checkbox" disabled="">
Adding a non-BBC logo to the bottom right.</li>
</ul>
<p>If anyone with superior ggplot skills would like to help with those or give pointers, then I would be most grateful!</p>
<p>Code and figure down below ↓</p>
<div class="cell" data-fig.dpi="100">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Load packages ----</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(bbplot)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(showtext)</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;"># Import fonts ----</span></span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;">font_add_google</span>(<span class="at" style="color: #657422;">name =</span> <span class="st" style="color: #20794D;">"Roboto Slab"</span>, <span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">"roboto-slab"</span>)</span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;">font_add_google</span>(<span class="at" style="color: #657422;">name =</span> <span class="st" style="color: #20794D;">"Roboto"</span>, <span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">"roboto"</span>)</span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;">showtext_auto</span>()</span>
<span id="cb1-10">title_font <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"roboto-slab"</span></span>
<span id="cb1-11">font <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"roboto"</span></span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;"># Input data (estimated values from article) ---</span></span>
<span id="cb1-14">temperatures <span class="ot" style="color: #003B4F;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">tribble</span>(</span>
<span id="cb1-15">  <span class="sc" style="color: #5E5E5E;">~</span>location, <span class="sc" style="color: #5E5E5E;">~</span>max_prev, <span class="sc" style="color: #5E5E5E;">~</span>max_2022,</span>
<span id="cb1-16">  <span class="st" style="color: #20794D;">"Cranwell"</span>, <span class="fl" style="color: #AD0000;">36.6</span>, <span class="fl" style="color: #AD0000;">39.9</span>,</span>
<span id="cb1-17">  <span class="st" style="color: #20794D;">"Nottingham"</span>, <span class="fl" style="color: #AD0000;">36.0</span>, <span class="fl" style="color: #AD0000;">39.8</span>,</span>
<span id="cb1-18">  <span class="st" style="color: #20794D;">"Bramham"</span>, <span class="fl" style="color: #AD0000;">33.5</span>, <span class="fl" style="color: #AD0000;">39.8</span>,</span>
<span id="cb1-19">  <span class="st" style="color: #20794D;">"Sutton Boningon"</span>, <span class="fl" style="color: #AD0000;">35.9</span>, <span class="fl" style="color: #AD0000;">39.4</span>,</span>
<span id="cb1-20">  <span class="st" style="color: #20794D;">"Sheffield"</span>, <span class="fl" style="color: #AD0000;">35.6</span>, <span class="fl" style="color: #AD0000;">39.4</span>,</span>
<span id="cb1-21">  <span class="st" style="color: #20794D;">"Leeming"</span>, <span class="fl" style="color: #AD0000;">34.4</span>, <span class="fl" style="color: #AD0000;">38.7</span>,</span>
<span id="cb1-22">  <span class="st" style="color: #20794D;">"Goudhurst"</span>, <span class="fl" style="color: #AD0000;">34.7</span>, <span class="fl" style="color: #AD0000;">37.9</span>,</span>
<span id="cb1-23">  <span class="st" style="color: #20794D;">"Whitby"</span>, <span class="fl" style="color: #AD0000;">33.1</span>, <span class="fl" style="color: #AD0000;">37.8</span>,</span>
<span id="cb1-24">  <span class="st" style="color: #20794D;">"Bradford"</span>, <span class="fl" style="color: #AD0000;">33.9</span>, <span class="fl" style="color: #AD0000;">37.8</span>,</span>
<span id="cb1-25">  <span class="st" style="color: #20794D;">"High Mowthorpe"</span>, <span class="fl" style="color: #AD0000;">33.1</span>, <span class="fl" style="color: #AD0000;">37.2</span>,</span>
<span id="cb1-26">  <span class="st" style="color: #20794D;">"Blackpool"</span>, <span class="fl" style="color: #AD0000;">33.6</span>, <span class="fl" style="color: #AD0000;">37.2</span>,</span>
<span id="cb1-27">  <span class="st" style="color: #20794D;">"Durham"</span>, <span class="fl" style="color: #AD0000;">32.9</span>, <span class="fl" style="color: #AD0000;">36.9</span>,</span>
<span id="cb1-28">  <span class="st" style="color: #20794D;">"Preston"</span>, <span class="fl" style="color: #AD0000;">33.1</span>, <span class="fl" style="color: #AD0000;">36.5</span>,</span>
<span id="cb1-29">  <span class="st" style="color: #20794D;">"Morecambe"</span>, <span class="fl" style="color: #AD0000;">32.7</span>, <span class="fl" style="color: #AD0000;">36.4</span>,</span>
<span id="cb1-30">  <span class="st" style="color: #20794D;">"Stonyhurst"</span>, <span class="fl" style="color: #AD0000;">32.6</span>, <span class="fl" style="color: #AD0000;">36.3</span>,</span>
<span id="cb1-31">  <span class="st" style="color: #20794D;">"Keele"</span>, <span class="fl" style="color: #AD0000;">32.9</span>, <span class="fl" style="color: #AD0000;">36.2</span>,</span>
<span id="cb1-32">  <span class="st" style="color: #20794D;">"Bude"</span>, <span class="fl" style="color: #AD0000;">32.2</span>, <span class="fl" style="color: #AD0000;">36.1</span>,</span>
<span id="cb1-33">  <span class="st" style="color: #20794D;">"Buxton"</span>, <span class="fl" style="color: #AD0000;">32.7</span>, <span class="fl" style="color: #AD0000;">36.0</span>,</span>
<span id="cb1-34">  <span class="st" style="color: #20794D;">"Kielder Castle"</span>, <span class="fl" style="color: #AD0000;">29.6</span>, <span class="fl" style="color: #AD0000;">35.0</span>,</span>
<span id="cb1-35">  <span class="st" style="color: #20794D;">"Bala"</span>, <span class="fl" style="color: #AD0000;">31.9</span>, <span class="fl" style="color: #AD0000;">34.9</span></span>
<span id="cb1-36">)</span>
<span id="cb1-37"></span>
<span id="cb1-38"><span class="co" style="color: #5E5E5E;"># Data preparation ----</span></span>
<span id="cb1-39"></span>
<span id="cb1-40"><span class="do" style="color: #5E5E5E;
font-style: italic;">## For the points ----</span></span>
<span id="cb1-41">temperatures <span class="ot" style="color: #003B4F;">&lt;-</span> temperatures <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb1-42">  dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">max_ever =</span> <span class="fu" style="color: #4758AB;">pmax</span>(max_2022, max_prev))</span>
<span id="cb1-43"></span>
<span id="cb1-44">temperatures<span class="sc" style="color: #5E5E5E;">$</span>location <span class="ot" style="color: #003B4F;">&lt;-</span> forcats<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">fct_reorder</span>(<span class="fu" style="color: #4758AB;">as.factor</span>(temperatures<span class="sc" style="color: #5E5E5E;">$</span>location), <span class="at" style="color: #657422;">.x =</span> temperatures<span class="sc" style="color: #5E5E5E;">$</span>max_ever)</span>
<span id="cb1-45"></span>
<span id="cb1-46">temp_long <span class="ot" style="color: #003B4F;">&lt;-</span> tidyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">pivot_longer</span>(temperatures, <span class="at" style="color: #657422;">cols =</span> <span class="fu" style="color: #4758AB;">c</span>(max_2022, max_prev), <span class="at" style="color: #657422;">names_to =</span> <span class="st" style="color: #20794D;">"year"</span>,<span class="at" style="color: #657422;">values_to =</span> <span class="st" style="color: #20794D;">"temperature"</span>)</span>
<span id="cb1-47"></span>
<span id="cb1-48"><span class="do" style="color: #5E5E5E;
font-style: italic;">## For the bars ----</span></span>
<span id="cb1-49">n_interp <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">501</span></span>
<span id="cb1-50">temp_interpolated <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tibble</span>(<span class="fu" style="color: #4758AB;">rep</span>(<span class="cn" style="color: #8f5902;">NA</span>, n_interp<span class="sc" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">20</span>))</span>
<span id="cb1-51">temp_interpolated[[<span class="dv" style="color: #AD0000;">1</span>]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rep</span>(temperatures<span class="sc" style="color: #5E5E5E;">$</span>location, <span class="at" style="color: #657422;">each =</span> n_interp)</span>
<span id="cb1-52">temp_interpolated[[<span class="dv" style="color: #AD0000;">2</span>]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rep</span>(<span class="cn" style="color: #8f5902;">NA_real_</span>, n_interp<span class="sc" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">20</span>)</span>
<span id="cb1-53"><span class="fu" style="color: #4758AB;">names</span>(temp_interpolated) <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"location"</span>, <span class="st" style="color: #20794D;">"interp_value"</span>)</span>
<span id="cb1-54"><span class="cf" style="color: #003B4F;">for</span> (i <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">20</span>) {</span>
<span id="cb1-55">  temp_interpolated<span class="sc" style="color: #5E5E5E;">$</span>interp_value[(<span class="dv" style="color: #AD0000;">1</span> <span class="sc" style="color: #5E5E5E;">+</span> n_interp <span class="sc" style="color: #5E5E5E;">*</span> (i <span class="sc" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>))<span class="sc" style="color: #5E5E5E;">:</span>(n_interp<span class="sc" style="color: #5E5E5E;">*</span>i)] <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb1-56">    <span class="fu" style="color: #4758AB;">seq</span>(temperatures<span class="sc" style="color: #5E5E5E;">$</span>max_prev[i], temperatures<span class="sc" style="color: #5E5E5E;">$</span>max_2022[i], <span class="at" style="color: #657422;">length.out =</span> n_interp)</span>
<span id="cb1-57">}</span>
<span id="cb1-58"></span>
<span id="cb1-59">str_wrap_break <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x, break_limit) {</span>
<span id="cb1-60">  <span class="co" style="color: #5E5E5E;"># Function from {usefunc} by N Rennie (https://github.com/nrennie/usefunc)</span></span>
<span id="cb1-61">  <span class="fu" style="color: #4758AB;">sapply</span>(<span class="fu" style="color: #4758AB;">strwrap</span>(x, break_limit, <span class="at" style="color: #657422;">simplify =</span> <span class="cn" style="color: #8f5902;">FALSE</span>), paste, <span class="at" style="color: #657422;">collapse =</span> <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">"</span>)</span>
<span id="cb1-62">}</span>
<span id="cb1-63"></span>
<span id="cb1-64">title_string <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"Huge breaks from previous records in 2022"</span></span>
<span id="cb1-65">subtitle_string <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">str_wrap_break</span>(<span class="st" style="color: #20794D;">"Stations with largest gaps between previous and new records, ordered by highest new temperature"</span>,<span class="dv" style="color: #AD0000;">60</span>)</span>
<span id="cb1-66">caption_string <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"Only includes active weather stations with at least 50 years of observations"</span></span>
<span id="cb1-67"></span>
<span id="cb1-68"></span>
<span id="cb1-69"></span>
<span id="cb1-70"></span>
<span id="cb1-71"></span>
<span id="cb1-72">p <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-73">  <span class="fu" style="color: #4758AB;">geom_line</span>(<span class="at" style="color: #657422;">data =</span> temp_interpolated, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> interp_value, <span class="at" style="color: #657422;">y =</span> location, <span class="at" style="color: #657422;">color =</span> interp_value), <span class="at" style="color: #657422;">lwd =</span> <span class="dv" style="color: #AD0000;">3</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-74">  <span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb1-75">  <span class="fu" style="color: #4758AB;">geom_label</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"2022 record"</span>, <span class="at" style="color: #657422;">x =</span> <span class="fl" style="color: #AD0000;">38.7</span>, <span class="at" style="color: #657422;">y =</span> <span class="fl" style="color: #AD0000;">7.2</span>), <span class="at" style="color: #657422;">family =</span> font, <span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">6.5</span>, <span class="at" style="color: #657422;">label.size =</span> <span class="cn" style="color: #8f5902;">NA</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-76">  <span class="fu" style="color: #4758AB;">geom_curve</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">38</span>, <span class="at" style="color: #657422;">y =</span> <span class="fl" style="color: #AD0000;">7.9</span>, <span class="at" style="color: #657422;">xend =</span> <span class="fl" style="color: #AD0000;">36.9</span>, <span class="at" style="color: #657422;">yend =</span> <span class="fl" style="color: #AD0000;">8.9</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-77">  <span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb1-78">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Previous </span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;"> record"</span>, <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">31</span>, <span class="at" style="color: #657422;">y =</span> <span class="dv" style="color: #AD0000;">11</span>), <span class="at" style="color: #657422;">family =</span> font, <span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">6.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-79">  <span class="fu" style="color: #4758AB;">geom_curve</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">xend =</span> <span class="dv" style="color: #AD0000;">32</span>, <span class="at" style="color: #657422;">yend =</span> <span class="dv" style="color: #AD0000;">11</span>, <span class="at" style="color: #657422;">x =</span> <span class="fl" style="color: #AD0000;">32.9</span>, <span class="at" style="color: #657422;">y =</span> <span class="fl" style="color: #AD0000;">8.9</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-80">  <span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb1-81">  <span class="fu" style="color: #4758AB;">geom_label</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Biggest leap"</span>, <span class="at" style="color: #657422;">x =</span> <span class="fl" style="color: #AD0000;">33.7</span>, <span class="at" style="color: #657422;">y =</span> <span class="dv" style="color: #AD0000;">20</span>), <span class="at" style="color: #657422;">family =</span> font, <span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">6.5</span>, <span class="at" style="color: #657422;">label.size =</span> <span class="cn" style="color: #8f5902;">NA</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-82">  <span class="fu" style="color: #4758AB;">geom_label</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"6.3C"</span>, <span class="at" style="color: #657422;">x =</span> <span class="fl" style="color: #AD0000;">34.0</span>, <span class="at" style="color: #657422;">y =</span> <span class="dv" style="color: #AD0000;">19</span>), <span class="at" style="color: #657422;">family =</span> font, <span class="at" style="color: #657422;">fontface=</span><span class="st" style="color: #20794D;">"bold"</span>, <span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">6.5</span>, <span class="at" style="color: #657422;">label.size =</span> <span class="cn" style="color: #8f5902;">NA</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-83">  <span class="fu" style="color: #4758AB;">geom_curve</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">xend =</span> <span class="fl" style="color: #AD0000;">34.7</span>, <span class="at" style="color: #657422;">yend =</span> <span class="fl" style="color: #AD0000;">19.5</span>, <span class="at" style="color: #657422;">x =</span> <span class="fl" style="color: #AD0000;">35.7</span>, <span class="at" style="color: #657422;">y =</span> <span class="dv" style="color: #AD0000;">18</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-84">  <span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb1-85">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">data =</span> temp_long, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> temperature, <span class="at" style="color: #657422;">y =</span> location, <span class="at" style="color: #657422;">fill =</span> temperature), <span class="at" style="color: #657422;">shape =</span> <span class="dv" style="color: #AD0000;">21</span>, <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"black"</span>, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">6</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-86">  <span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb1-87">  <span class="fu" style="color: #4758AB;">scale_x_continuous</span>(<span class="at" style="color: #657422;">breaks =</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="dv" style="color: #AD0000;">30</span>, <span class="dv" style="color: #AD0000;">40</span>, <span class="at" style="color: #657422;">by =</span> <span class="fl" style="color: #AD0000;">2.5</span>),<span class="at" style="color: #657422;">labels =</span> <span class="fu" style="color: #4758AB;">paste0</span>(<span class="fu" style="color: #4758AB;">seq</span>(<span class="dv" style="color: #AD0000;">30</span>, <span class="dv" style="color: #AD0000;">40</span>, <span class="at" style="color: #657422;">by =</span> <span class="fl" style="color: #AD0000;">2.5</span>),<span class="st" style="color: #20794D;">"C"</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-88">  <span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb1-89">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> title_string,</span>
<span id="cb1-90">       <span class="at" style="color: #657422;">subtitle =</span> subtitle_string,</span>
<span id="cb1-91">       <span class="at" style="color: #657422;">caption =</span> caption_string) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-92">  <span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb1-93">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">plot.title =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">family=</span>title_font,</span>
<span id="cb1-94">                                  <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">28</span>,</span>
<span id="cb1-95">                                  <span class="at" style="color: #657422;">face=</span><span class="st" style="color: #20794D;">"bold"</span>,</span>
<span id="cb1-96">                                  <span class="at" style="color: #657422;">color=</span><span class="st" style="color: #20794D;">"#222222"</span>),</span>
<span id="cb1-97">        <span class="at" style="color: #657422;">plot.subtitle =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">family=</span>font,</span>
<span id="cb1-98">                                     <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">18</span>,</span>
<span id="cb1-99">                                     <span class="at" style="color: #657422;">margin=</span>ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">margin</span>(<span class="dv" style="color: #AD0000;">9</span>,<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">9</span>,<span class="dv" style="color: #AD0000;">0</span>)),</span>
<span id="cb1-100">        <span class="at" style="color: #657422;">plot.caption =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">family =</span> font, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">14</span>,<span class="at" style="color: #657422;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span>),</span>
<span id="cb1-101">        <span class="at" style="color: #657422;">plot.title.position =</span> <span class="st" style="color: #20794D;">'plot'</span>,</span>
<span id="cb1-102">        <span class="at" style="color: #657422;">plot.caption.position =</span> <span class="st" style="color: #20794D;">'plot'</span>,</span>
<span id="cb1-103">        <span class="at" style="color: #657422;">axis.title =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb1-104">        <span class="at" style="color: #657422;">axis.text =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">family=</span>font,</span>
<span id="cb1-105">                                          <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">18</span>,</span>
<span id="cb1-106">                                          <span class="at" style="color: #657422;">color=</span><span class="st" style="color: #20794D;">"grey47"</span>),</span>
<span id="cb1-107">        <span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"none"</span>,</span>
<span id="cb1-108">        <span class="at" style="color: #657422;">title =</span> <span class="fu" style="color: #4758AB;">element_text</span>(),</span>
<span id="cb1-109">        <span class="at" style="color: #657422;">axis.line.x =</span> <span class="fu" style="color: #4758AB;">element_line</span>(<span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">0.7</span>, <span class="at" style="color: #657422;">linetype =</span> <span class="st" style="color: #20794D;">"solid"</span>),</span>
<span id="cb1-110">        <span class="at" style="color: #657422;">axis.ticks.y =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb1-111">        <span class="at" style="color: #657422;">axis.ticks.length.x =</span> <span class="fu" style="color: #4758AB;">unit</span>(<span class="dv" style="color: #AD0000;">7</span>, <span class="at" style="color: #657422;">units =</span> <span class="st" style="color: #20794D;">"points"</span> ),</span>
<span id="cb1-112">        <span class="at" style="color: #657422;">axis.text.x =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">margin=</span><span class="fu" style="color: #4758AB;">margin</span>(<span class="at" style="color: #657422;">t =</span> <span class="dv" style="color: #AD0000;">15</span>, <span class="at" style="color: #657422;">b =</span> <span class="dv" style="color: #AD0000;">10</span>)),</span>
<span id="cb1-113">        <span class="at" style="color: #657422;">panel.grid.minor =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb1-114">        <span class="at" style="color: #657422;">panel.grid.major.y =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_line</span>(<span class="at" style="color: #657422;">color=</span><span class="st" style="color: #20794D;">"#cbcbcb"</span>),</span>
<span id="cb1-115">        <span class="at" style="color: #657422;">panel.grid.major.x =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb1-116">        <span class="at" style="color: #657422;">panel.background =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb1-117">  )</span>
<span id="cb1-118"></span>
<span id="cb1-119">p</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://www.zakvarty.com/blog/2022-10-15-BBC-temperature-plot/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid" alt="My dumbbell plot showing stations with the largest gaps between previous and new records, ordered by the highest new temperature." width="960"></p>
</div>
</div>


</section>

 ]]></description>
  <category>data visualisation</category>
  <guid>https://www.zakvarty.com/blog/2022-10-15-BBC-temperature-plot/index.html</guid>
  <pubDate>Fri, 14 Oct 2022 23:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2022-10-15-BBC-temperature-plot/zdv-temperature-records.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Tidy Tuesday: Ravelry Yarn</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2022-10-11-ravelry-tidy-tuesday/index.html</link>
  <description><![CDATA[ 



<p>For my first Tidy Tuesday I kept things simple with a stacked bar chart.</p>
<p>I have made several plots using <code>{ggplot2}</code> before, but this was my first attempt at making one aesthetically pleasing (forgive the pun).</p>
<p>When making this plot I learned about using custom font, colours, annotations and arrows from a lot of <a href="https://twitter.com/nrennie" title="Nicola Rennie - Twitter">@nrennie</a>’s past examples.</p>
<p>Code and figure down below ↓</p>
<div class="cell" data-fig.dpi="100">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Load Packages ----</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(tidyr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">library</span>(forcats)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;">library</span>(showtext)</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;"># Load Fonts ----</span></span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;">font_add_google</span>(<span class="at" style="color: #657422;">name =</span> <span class="st" style="color: #20794D;">"Indie Flower"</span>, <span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">"indie-flower"</span>)</span>
<span id="cb1-10"><span class="fu" style="color: #4758AB;">font_add_google</span>(<span class="at" style="color: #657422;">name =</span> <span class="st" style="color: #20794D;">"Permanent Marker"</span>, <span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">"marker"</span>)</span>
<span id="cb1-11"><span class="fu" style="color: #4758AB;">showtext_auto</span>()</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;"># Load Data ----</span></span>
<span id="cb1-14">url <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"https://github.com/rfordatascience/tidytuesday/raw/master/data/2022/2022-10-11/yarn.csv"</span></span>
<span id="cb1-15">yarn <span class="ot" style="color: #003B4F;">&lt;-</span> readr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">read_csv</span>(<span class="at" style="color: #657422;">file =</span> url)</span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;"># Data Handling ----</span></span>
<span id="cb1-18"></span>
<span id="cb1-19">other_weight_names <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb1-20">  <span class="st" style="color: #20794D;">"Thread"</span>,</span>
<span id="cb1-21">  <span class="st" style="color: #20794D;">"Cobweb"</span>,</span>
<span id="cb1-22">  <span class="st" style="color: #20794D;">"Jumbo"</span>,</span>
<span id="cb1-23">  <span class="st" style="color: #20794D;">"DK / Sport"</span>,</span>
<span id="cb1-24">  <span class="st" style="color: #20794D;">"Aran / Worsted"</span>,</span>
<span id="cb1-25">  <span class="st" style="color: #20794D;">"No weight specified"</span>)</span>
<span id="cb1-26"></span>
<span id="cb1-27">yarn_data <span class="ot" style="color: #003B4F;">&lt;-</span> yarn <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-28">  <span class="fu" style="color: #4758AB;">select</span>(yarn_weight_name) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-29">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">yarn_weight_name =</span> <span class="fu" style="color: #4758AB;">as.character</span>(yarn_weight_name)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-30">  <span class="fu" style="color: #4758AB;">mutate_at</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"yarn_weight_name"</span>), <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">replace_na</span>(.,<span class="st" style="color: #20794D;">"Missing"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-31">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">name =</span> <span class="fu" style="color: #4758AB;">fct_collapse</span>(yarn_weight_name, <span class="at" style="color: #657422;">Other =</span> other_weight_names)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-32">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">name =</span> <span class="fu" style="color: #4758AB;">fct_collapse</span>(name, <span class="st" style="color: #20794D;">"Double Knit"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"DK"</span>))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-33">  <span class="fu" style="color: #4758AB;">group_by</span>(name) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-34">  <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">value =</span> <span class="fu" style="color: #4758AB;">n</span>())</span>
<span id="cb1-35"></span>
<span id="cb1-36"><span class="co" style="color: #5E5E5E;"># Helper data frames for adding arrows to plot</span></span>
<span id="cb1-37">arrow_df_1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">x1 =</span> <span class="dv" style="color: #AD0000;">27000</span>, <span class="at" style="color: #657422;">x2 =</span> <span class="dv" style="color: #AD0000;">27000</span>, <span class="at" style="color: #657422;">y1 =</span> <span class="fl" style="color: #AD0000;">7.5</span>, <span class="at" style="color: #657422;">y2 =</span> <span class="fl" style="color: #AD0000;">10.4</span>)</span>
<span id="cb1-38">arrow_df_2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">x1 =</span> <span class="dv" style="color: #AD0000;">27000</span>, <span class="at" style="color: #657422;">x2 =</span> <span class="dv" style="color: #AD0000;">19000</span>, <span class="at" style="color: #657422;">y1 =</span> <span class="fl" style="color: #AD0000;">7.5</span>, <span class="at" style="color: #657422;">y2 =</span> <span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb1-39"></span>
<span id="cb1-40"><span class="co" style="color: #5E5E5E;"># Making Plot ----</span></span>
<span id="cb1-41"></span>
<span id="cb1-42">bar_colour <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"#483248"</span></span>
<span id="cb1-43">bg_colour <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"#FEFBEA"</span></span>
<span id="cb1-44">title_font <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"marker"</span></span>
<span id="cb1-45">main_font <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"indie-flower"</span></span>
<span id="cb1-46"></span>
<span id="cb1-47">yarn_plot <span class="ot" style="color: #003B4F;">&lt;-</span> yarn_data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-48">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">reorder</span>(name, value), <span class="at" style="color: #657422;">x =</span> value)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-49">  <span class="fu" style="color: #4758AB;">geom_bar</span>(<span class="at" style="color: #657422;">stat =</span> <span class="st" style="color: #20794D;">"identity"</span>, <span class="at" style="color: #657422;">fill =</span> bar_colour) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-50">  <span class="fu" style="color: #4758AB;">theme_void</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-51">  <span class="fu" style="color: #4758AB;">ggtitle</span>(<span class="st" style="color: #20794D;">" </span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;"> Yarn weights on Ravelry, ordered by frequency"</span>,<span class="at" style="color: #657422;">subtitle =</span> <span class="st" style="color: #20794D;">" "</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-52">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">axis.title =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb1-53">        <span class="at" style="color: #657422;">axis.text =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb1-54">        <span class="at" style="color: #657422;">axis.ticks =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb1-55">        <span class="at" style="color: #657422;">text =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">family =</span> main_font),</span>
<span id="cb1-56">        <span class="at" style="color: #657422;">plot.background =</span> <span class="fu" style="color: #4758AB;">element_rect</span>(<span class="at" style="color: #657422;">fill =</span> bg_colour, <span class="at" style="color: #657422;">colour =</span> bg_colour),</span>
<span id="cb1-57">        <span class="at" style="color: #657422;">panel.background =</span> <span class="fu" style="color: #4758AB;">element_rect</span>(<span class="at" style="color: #657422;">fill =</span> bg_colour, <span class="at" style="color: #657422;">colour =</span> bg_colour),</span>
<span id="cb1-58">        <span class="at" style="color: #657422;">plot.title =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">family =</span> title_font, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">22</span>, <span class="at" style="color: #657422;">hjust =</span> <span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb1-59">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-60">  <span class="fu" style="color: #4758AB;">lims</span>(<span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">28000</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-61">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> name, <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">200</span>),</span>
<span id="cb1-62">            <span class="at" style="color: #657422;">color =</span> bg_colour,</span>
<span id="cb1-63">            <span class="at" style="color: #657422;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb1-64">            <span class="at" style="color: #657422;">family =</span> main_font,</span>
<span id="cb1-65">            <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-66">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> value),</span>
<span id="cb1-67">            <span class="at" style="color: #657422;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb1-68">            <span class="at" style="color: #657422;">nudge_x =</span> <span class="dv" style="color: #AD0000;">200</span>,</span>
<span id="cb1-69">            <span class="at" style="color: #657422;">color =</span> bar_colour,</span>
<span id="cb1-70">            <span class="at" style="color: #657422;">family =</span> main_font,</span>
<span id="cb1-71">            <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">6</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-72">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"The most popular yarn weights </span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">  are 'Fingering' and 'Double Knit'"</span>,</span>
<span id="cb1-73">                <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">20000</span>,</span>
<span id="cb1-74">                <span class="at" style="color: #657422;">y =</span> <span class="fl" style="color: #AD0000;">6.7</span>),</span>
<span id="cb1-75">            <span class="at" style="color: #657422;">family =</span> main_font,</span>
<span id="cb1-76">            <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">7</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-77">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"There were more missing yarn weights </span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;"> than in all remaining categories combined"</span>,</span>
<span id="cb1-78">                <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">18000</span>,</span>
<span id="cb1-79">                <span class="at" style="color: #657422;">y =</span> <span class="fl" style="color: #AD0000;">1.6</span>),</span>
<span id="cb1-80">            <span class="at" style="color: #657422;">family =</span> main_font,</span>
<span id="cb1-81">            <span class="at" style="color: #657422;">size  =</span> <span class="dv" style="color: #AD0000;">7</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-82">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"}"</span>),</span>
<span id="cb1-83">            <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">7000</span>,</span>
<span id="cb1-84">            <span class="at" style="color: #657422;">y =</span> <span class="fl" style="color: #AD0000;">1.5</span>,</span>
<span id="cb1-85">            <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">19</span>,</span>
<span id="cb1-86">            <span class="at" style="color: #657422;">family =</span> main_font) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-87">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Tidy Tuesday 11 Oct 2022 | Data: Ravelry |  @zakvarty"</span>),</span>
<span id="cb1-88">            <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">29000</span>,</span>
<span id="cb1-89">            <span class="at" style="color: #657422;">y =</span> <span class="fl" style="color: #AD0000;">4.5</span>,</span>
<span id="cb1-90">            <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">5</span>,</span>
<span id="cb1-91">            <span class="at" style="color: #657422;">family =</span> main_font,</span>
<span id="cb1-92">            <span class="at" style="color: #657422;">angle =</span> <span class="dv" style="color: #AD0000;">270</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-93">  <span class="fu" style="color: #4758AB;">geom_curve</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> x1, <span class="at" style="color: #657422;">y =</span> y1, <span class="at" style="color: #657422;">xend =</span> x2, <span class="at" style="color: #657422;">yend =</span> y2),</span>
<span id="cb1-94">             <span class="at" style="color: #657422;">data =</span> arrow_df_1,</span>
<span id="cb1-95">             <span class="at" style="color: #657422;">arrow =</span> <span class="fu" style="color: #4758AB;">arrow</span>(<span class="at" style="color: #657422;">length =</span> <span class="fu" style="color: #4758AB;">unit</span>(<span class="fl" style="color: #AD0000;">0.03</span>, <span class="st" style="color: #20794D;">"npc"</span>))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-96">  <span class="fu" style="color: #4758AB;">geom_curve</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> x1, <span class="at" style="color: #657422;">y =</span> y1, <span class="at" style="color: #657422;">xend =</span> x2, <span class="at" style="color: #657422;">yend =</span> y2),</span>
<span id="cb1-97">             <span class="at" style="color: #657422;">data =</span> arrow_df_2,</span>
<span id="cb1-98">             <span class="at" style="color: #657422;">arrow =</span> <span class="fu" style="color: #4758AB;">arrow</span>(<span class="at" style="color: #657422;">length =</span> <span class="fu" style="color: #4758AB;">unit</span>(<span class="fl" style="color: #AD0000;">0.03</span>, <span class="st" style="color: #20794D;">"npc"</span>)))</span>
<span id="cb1-99"></span>
<span id="cb1-100">yarn_plot</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://www.zakvarty.com/blog/2022-10-11-ravelry-tidy-tuesday/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid" alt="Stacked bar chart of yarn weights on Ravelry. Bars are descending order by their frequency, with yarn-type labels written within the bars and count values to the right of the bars. Annotations indicate that the most popular yarn weights are 'Fingering' and 'Double Knit', and that there were more missing yarn weights than in all remaining categories combined." width="768"></p>
</div>
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Exported as 8x8 inch pdf and 800x700 png</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;"># (next time start by setting canvas size!)</span></span></code></pre></div>
</details>
</div>



 ]]></description>
  <category>data visualisation</category>
  <category>tidy tuesday</category>
  <guid>https://www.zakvarty.com/blog/2022-10-11-ravelry-tidy-tuesday/index.html</guid>
  <pubDate>Tue, 11 Oct 2022 23:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2022-10-11-ravelry-tidy-tuesday/2022-10-11-tidy-tuesday-ravelry.png" medium="image" type="image/png" height="126" width="144"/>
</item>
<item>
  <title>Recommended Statistics Books</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2022-10-10-statistics-books/index.html</link>
  <description><![CDATA[ 



<section id="statistics-and-statistical-inference-books" class="level2">
<h2 class="anchored" data-anchor-id="statistics-and-statistical-inference-books">Statistics and Statistical Inference Books</h2>
<div class="medium_right">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2022-10-10-statistics-books/blackwells-maths-section.jpg" alt="Photograph of the mathematics section of Blackwell's book shop in Oxford."></p>
</div>
<p>While teaching a course on supervised learning last year, several students asked about what books I would recommended on statistical inference and modelling.</p>
<p>For context, the students on this course are all highly numerate and studying at the postgraduate level. What makes this request challenging is the broad range of student backgrounds, some students had a maths degree but the majority are trained and work as engineers, physicists or computer scientists.</p>
<p>This variety in backgrounds and exposure to undergraduate level statistics made recommending a single book difficult. Instead, I compiled a list of books that I have enjoyed or found useful. For each book I tried to give some guidance on whether it might match with their current statistical knowledge and what they are trying to achieve. I gave a brief description of the level and target audience of each text, which I reproduce below.</p>
<p>When evaluating whether these resources might suit your current needs, I find it helpful to skim through a section on a topic that you already know (such as linear regression). This is usually the fastest and most reliable way to assess if the book is going to be a good fit for you.</p>
<p>This list is by no means exhaustive. If you know of any gems that I have not included in this list, please do let me know!</p>
<section id="mathematical-statistics-and-data-analysis---john-a.-rice" class="level3">
<h3 class="anchored" data-anchor-id="mathematical-statistics-and-data-analysis---john-a.-rice">Mathematical Statistics and Data Analysis - John A. Rice</h3>
<p><br></p>
<div class="small_left">
<p><img style="border-radius: 2%;" src="https://www.zakvarty.com/blog/2022-10-10-statistics-books/rice.jpg" alt="Cover of Mathematical Statistics and Data Analysis by John A. Rice."></p>
</div>
<p><span class="citation" data-cites="rice2007mathematical">Rice (2007)</span> covers the basics of probability and statistics usually contained in the first couple of undergraduate statistics courses. Generally the first university courses are a bit dry, building up the required knowledge to do interesting things. This book is slightly better than the average treatment in terms of readability and is fairly comprehensive, making it well suited as a reference text. This is a book full of all the stuff you might once have known but have now forgotten, or never studied before.</p>
<p><br></p>
</section>
<section id="essential-medical-statistics---betty-kirkwood-and-jonathan-sterne" class="level3">
<h3 class="anchored" data-anchor-id="essential-medical-statistics---betty-kirkwood-and-jonathan-sterne">Essential Medical Statistics - Betty Kirkwood and Jonathan Sterne</h3>
<div class="small_left">
<p><img style="border-radius: 2%;" src="https://www.zakvarty.com/blog/2022-10-10-statistics-books/kirkwood.jpg" alt="Cover of Essential Medical Statistics by Betty Kirkwood and Jonathan Sterne."></p>
</div>
<p><br></p>
<p><span class="citation" data-cites="kirkwood2010essential">Kirkwood and Sterne (2010)</span> focuses on more advanced topics in statistics, such as inference, hypothesis testing and modelling. However, it approaches these from an applications perspective. While all of the applications it uses are from medical statistics, the authors give sufficient context that you do not need to be familiar with this area before reading. This is a very readable book, with a moderate amount of mathematical detail. I find myself revisiting it quite often.</p>
<p><br></p>
</section>
<section id="core-statistics---simon-wood" class="level3">
<h3 class="anchored" data-anchor-id="core-statistics---simon-wood">Core Statistics - Simon Wood</h3>
<div class="small_left">
<p><img style="border-radius: 2%;" src="https://www.zakvarty.com/blog/2022-10-10-statistics-books/wood.jpg" alt="Cover of Core Statistics by Simon Wood."></p>
</div>
<p><span class="citation" data-cites="wood2015core">Wood (2015)</span> gives an introduction to the core topics in statistics aimed at new graduate-level students. It is mathematically dense but written in an approachable manner and (unsurprisingly) covers all the core ideas of statistics. This means that is often a good source to get an overview of a topic and to cover the key points in that area quickly. It is probably wise to supplement this with a more applied text to see worked examples and to a more detailed text for topics that you need to explore in greater detail.</p>
<p><br></p>
</section>
<section id="in-all-likelihood---yudi-pawitan" class="level3">
<h3 class="anchored" data-anchor-id="in-all-likelihood---yudi-pawitan">In All Likelihood - Yudi Pawitan</h3>
<div class="small_left">
<p><img style="border-radius: 2%;" src="https://www.zakvarty.com/blog/2022-10-10-statistics-books/pawitan.jpg" alt="Cover of In All Likelihood by Yudi Pawitan."></p>
</div>
<p><br></p>
<p><span class="citation" data-cites="pawitan2001all">Pawitan (2001)</span> focuses entirely on likelihood inference and covers both theory and applications in a great deal of detail. I highly recommend this to supplement frequentist topics covered in core statistics and the elements of statistical learning. It builds up from very little assumed knowledge but also goes on to cover some very advanced topics in later chapters.</p>
<p><br> <br></p>
</section>
<section id="kendalls-advanced-theory-of-statistics---alan-stuart-et-al." class="level3">
<h3 class="anchored" data-anchor-id="kendalls-advanced-theory-of-statistics---alan-stuart-et-al.">Kendall’s Advanced Theory of Statistics - Alan Stuart et al.</h3>
<div class="small_left">
<p><img style="border-radius: 2%;" src="https://www.zakvarty.com/blog/2022-10-10-statistics-books/kendall-1.webp" alt="Cover of Kendall's Advanced Theory of Statistics."></p>
</div>
<p><br></p>
<p><span class="citation" data-cites="kendall1987kendall">Kendall, Stuart, and Ord (1987)</span> is an alternative to In All Likelihood, aimed at a similar audience and level. Split over several volumes this is good to do a deep-dive into a particular topic but probably not one to try and read cover to cover!</p>
<p><br> <br> <br> <br></p>
</section>
</section>
<section id="bayesian-statistics" class="level2">
<h2 class="anchored" data-anchor-id="bayesian-statistics">Bayesian Statistics</h2>
<p>We only consider frequentist approaches to inference in this course. However, I would be remiss to not include some Bayesian texts and leave you with the impression that classical or frequentist approaches to statistics are the only option.</p>
<p>Many of the topics we cover in supervised learning can be considered from a Bayesian perspective. A Bayesian statistician does not treat our model parameters as fixed but unknown quantities, instead they consider the parameters as random variables and use probability distributions to describe their (or our) beliefs about the parameter values.</p>
<p>You might find the following books useful, either during or after the Bayesian inference course. The former is more theoretical, while the latter has a more applied focus.</p>
<p><em>Kendall’s advanced theory of statistics. Vol. 2B, Bayesian inference.</em> <span class="citation" data-cites="ohagan2004kendall">(O’Hagan and Forster 2004)</span></p>
<p><em>Bayesian Data Analysis - Gelman et al.</em> <span class="citation" data-cites="gelman2013bayesian">(Gelman et al. 2013)</span></p>



</section>

<div id="quarto-appendix"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-gelman2013bayesian" class="csl-entry">
Gelman, Andrew, John B Carlin, Hal S. Stern, David B Dunson, Aki Vehtari, and Donald B Rubin. 2013. <em>Bayesian Data Analysis</em>. 3rd ed. <span>Chapman and Hall</span>.
</div>
<div id="ref-kendall1987kendall" class="csl-entry">
Kendall, Maurice George, Alan Stuart, and J Keith Ord. 1987. <em>Kendall’s Advanced Theory of Statistics</em>. Oxford University Press.
</div>
<div id="ref-kirkwood2010essential" class="csl-entry">
Kirkwood, Betty R, and Jonathan AC Sterne. 2010. <em>Essential Medical Statistics</em>. John Wiley &amp; Sons.
</div>
<div id="ref-ohagan2004kendall" class="csl-entry">
O’Hagan, Anthony, and Jonathan J Forster. 2004. <em>Kendall’s Advanced Theory of Statistics, Volume 2b: Bayesian Inference</em>. Vol. 2b. Arnold.
</div>
<div id="ref-pawitan2001all" class="csl-entry">
Pawitan, Yudi. 2001. <em>In All Likelihood: Statistical Modelling and Inference Using Likelihood</em>. Oxford University Press.
</div>
<div id="ref-rice2007mathematical" class="csl-entry">
Rice, John A. 2007. <em>Mathematical Statistics and Data Analysis</em>. Thomson.
</div>
<div id="ref-wood2015core" class="csl-entry">
Wood, Simon N. 2015. <em>Core Statistics</em>. Cambridge University Press.
</div>
</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{varty2022,
  author = {Zak Varty},
  title = {Recommended {Statistics} {Books}},
  date = {2022-10-10},
  url = {https://www.zakvarty.com/blog/2022-10-10-statistics-books},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-varty2022" class="csl-entry quarto-appendix-citeas">
Zak Varty. 2022. <span>“Recommended Statistics Books.”</span> October
10, 2022. <a href="https://www.zakvarty.com/blog/2022-10-10-statistics-books">https://www.zakvarty.com/blog/2022-10-10-statistics-books</a>.
</div></div></section></div> ]]></description>
  <category>academic skills</category>
  <category>reading</category>
  <guid>https://www.zakvarty.com/blog/2022-10-10-statistics-books/index.html</guid>
  <pubDate>Sun, 09 Oct 2022 23:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2022-10-10-statistics-books/blackwells-maths-section.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Writing a rhetorical précis</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2022-10-07-rhetorical-precis/index.html</link>
  <description><![CDATA[ 



<p>Photo by <a href="https://unsplash.com/@qwitka?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Maksym Kaharlytskyi</a> on <a href="https://unsplash.com/s/photos/filing-cabinet?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a></p>
<section id="what-is-a-rhetorical-precis" class="level2">
<h2 class="anchored" data-anchor-id="what-is-a-rhetorical-precis">What is a rhetorical precis?</h2>
<div class="medium_right">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2022-10-07-rhetorical-precis/maksym-kaharlytskyi-Q9y3LRuuxmg-unsplash.jpg" alt="Photograph of a filing cabinet filled with library index cards."></p>
</div>
<p>A rhetorical precis is a short summary and analysis of a piece of writing, which considers both the content and the delivery of the piece.</p>
<p>A rhetorical precis serves to summarise and analyse the text through:</p>
<ul>
<li>an accurate bibliographic reference to the text,</li>
<li>a list of keywords relating to the text,</li>
<li>a highly structured four-sentence paragraph providing a summary and analysis of the text.</li>
</ul>
</section>
<section id="why-write-one" class="level2">
<h2 class="anchored" data-anchor-id="why-write-one">Why write one?</h2>
<p>Keeping a rhetorical precis for each text that you read is a fantasitc way to build the skills of active reading and succinct writing. A rhetorical precis is more informative than a bib entry and more easily reviewed <em>(read: waded through)</em> than a stack of annotated papers.</p>
<p>Taken collectively, a set of rhetorical precis summaries provide a reading record that can be a tremendously useful when trying to recall the contents of a paper or book long after you originally read it.</p>
</section>
<section id="how-to-store-them" class="level2">
<h2 class="anchored" data-anchor-id="how-to-store-them">How to store them?</h2>
<p>Writing and storing these reading summaries electronically can make them even more useful. This allows you to search for topics, target audiences or keywords.</p>
<p>For this reason it can be helpful to keep them all together in one word document or plain text file. Alternatively, having a single folder with each summary as a plain text or markdown file works well if you are comfortable with searching at the command line. The same can be achieved by writing these summaries within a reference manager, if that is something you are invested in already.</p>
</section>
<section id="definition" class="level2">
<h2 class="anchored" data-anchor-id="definition">Definition</h2>
<p>Just to prove that I’m not making all this up:</p>
<blockquote class="blockquote">
<p>A rhetorical precis analyzes both the content (the what) and the delivery (the how) of a unit of spoken or written discourse. It is a highly structured four-sentence paragraph blending summary and analysis. Each of the four sentences requires specific information; students are expected to use brief quotations (to convey a sense of the author’s style and tone) and to include a terminal bibliographic reference. Practicing this sort of writing fosters precision in both reading and writing, forcing a writer to employ a variety of sentence structures and to develop a discerning eye for connotative shades of meaning. <br> <strong>Attribution:</strong> <a href="https://courses.lumenlearning.com/englishcomp2kscopex92x2/chapter/rhetorical-precis/">lumenlearning.com</a></p>
</blockquote>
</section>
<section id="format" class="level2">
<h2 class="anchored" data-anchor-id="format">Format</h2>
<p>Four sentences summarising the aim of the work, how this is addressed, why it is important and a description of the target audience.</p>
<ol type="1">
<li>Name of author, [optional phrase describing author], genre and title of work, date in parentheses (additional publishing information in parentheses); a rhetorically accurate verb (such as “asserts,” “argues,” suggests,” “implies,” claims,” etc.); a THAT clause containing the major assertion or thesis statement of the work.</li>
<li>An explanation of <em>how</em> the author develops and/or supports the thesis, usually in chronological order.</li>
<li>A statement of the author’s purpose followed by an “in order to” phrase.</li>
<li>A description of the intended audience and/or the essay’s tone</li>
</ol>
</section>
<section id="a-self-indulgent-example" class="level2">
<h2 class="anchored" data-anchor-id="a-self-indulgent-example">A (self-indulgent) example</h2>
<p>Here is a rather self-indulgent example of a rhetorical precis.</p>
<hr>
<p><code>varty2021inference</code></p>
<p><strong>Title:</strong> <em>Inference for extreme earthquake magnitudes accounting for a time-varying measurement process. {ArXiV preprint, 2021} (20 pages).</em></p>
<p><strong>Authors:</strong> <em>Zak Varty, Jonathan Tawn, Peter Atkinson and Stijn Bierman.</em></p>
<p><strong>Key words:</strong> <em>extreme value</em>, <em>earthquake</em>, <em>threshold selection</em>, <em>magnitude of completion</em>, <em>seismology</em>, <em>bootstrap.</em></p>
<p>In this paper, Varty et al (2021) propose a new threshold selection method for modelling earthquake catalogues, where the magnitude distribution is stationary but detection of small events improves over time. The paper generalises the Gutenberg-Richter law to the GPD and uses metrics based on PP and QQ plots to balance between bias and variance when selecting a time-varying threshold. This procedure more than doubles the usable catalogue size for Groningen earthquakes and gives the first emprircal evidence that the magnitude distribution in this region has a finite upper end point. The paper is targeted at applied and research statisticians with an interest in EVT but would also be accessible to a statistically-minded seismologist.</p>
<hr>
</section>
<section id="a-template-for-new-entries" class="level2">
<h2 class="anchored" data-anchor-id="a-template-for-new-entries">A template for new entries</h2>
<hr>
<p><code>firstauthorYYYYkeyword</code></p>
<p><strong>Title:</strong> <em>Title goes here. {Journal, YYYY} (NN pages).</em></p>
<p><strong>Authors:</strong> <em>Author One, Author Two and Author Three. (optional affiliations)</em></p>
<p><strong>Key words:</strong> <em>key word 1</em>, <em>key word 2</em>, <em>key work 3</em>.</p>
<ol type="1">
<li><em>What</em> is the document and <em>what</em> does it say?</li>
<li><em>How</em> do they do / show this?</li>
<li><em>Why</em> are they bothering to do this in the first place?</li>
<li><em>Who</em> is the intended audience for this work?</li>
</ol>
<p>In this DOC_TYPE, AUTHOUR VERB that THESIS_STATEMENT. They DO/SHOW this by ACTIONS. This is important to PEOPLE because REASONS. This work would be useful when PEOPLE are doing ACTIVITY.</p>
<hr>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb1-1"><span class="in" style="color: #5E5E5E;">`firstauthorYYYYkeyword`</span></span>
<span id="cb1-2"></span>
<span id="cb1-3">**Title:** _Title goes here. {Journal, YYYY} (NN pages)._</span>
<span id="cb1-4"></span>
<span id="cb1-5">**Authors:** _Author One, Author Two and Author Three. (optional affiliations)_</span>
<span id="cb1-6"></span>
<span id="cb1-7">**Key words:** _key word 1_, _key word 2_, _key work 3_. </span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="ss" style="color: #20794D;">1. </span>_What_ is the document and _what_ does it say? </span>
<span id="cb1-10"><span class="ss" style="color: #20794D;">2. </span>_How_ do they do / show this?</span>
<span id="cb1-11"><span class="ss" style="color: #20794D;">3. </span>_Why_ are they bothering to do this in the first place?</span>
<span id="cb1-12"><span class="ss" style="color: #20794D;">4. </span>_Who_ is the intended audience for this work?</span>
<span id="cb1-13"></span>
<span id="cb1-14">In this DOC_TYPE, AUTHOUR VERB that THESIS<span class="sc" style="color: #5E5E5E;">\_</span>STATEMENT.</span>
<span id="cb1-15">They DO/SHOW this by ACTIONS. </span>
<span id="cb1-16">This is important to PEOPLE because REASONS. </span>
<span id="cb1-17">This work would be useful when PEOPLE are doing ACTIVITY.</span></code></pre></div>
<hr>


</section>

<div id="quarto-appendix"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{varty2022,
  author = {Zak Varty},
  title = {Writing a Rhetorical Précis},
  date = {2022-10-07},
  url = {https://www.zakvarty.com/blog/2022-10-07-rhetorical-precis},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-varty2022" class="csl-entry quarto-appendix-citeas">
Zak Varty. 2022. <span>“Writing a Rhetorical Précis.”</span> October 7,
2022. <a href="https://www.zakvarty.com/blog/2022-10-07-rhetorical-precis">https://www.zakvarty.com/blog/2022-10-07-rhetorical-precis</a>.
</div></div></section></div> ]]></description>
  <category>academic skills</category>
  <category>writing</category>
  <category>reading</category>
  <guid>https://www.zakvarty.com/blog/2022-10-07-rhetorical-precis/index.html</guid>
  <pubDate>Thu, 06 Oct 2022 23:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2022-10-07-rhetorical-precis/maksym-kaharlytskyi-Q9y3LRuuxmg-unsplash.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Setting up a quarto blog</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2022-09-26-adding-a-quarto-blog/index.html</link>
  <description><![CDATA[ 



<section id="what-am-i-trying-to-do" class="level1">
<h1>What am I trying to do?</h1>
<div class="medium_right">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2022-09-26-adding-a-quarto-blog/florian-klauer-mk7D-4UCfmg-unsplash.jpg" alt="Mechanical typewriter on white background"></p>
</div>
<p>My aim here is to set up a blog within an existing quarto website. I want the blog to be a sub-domain of the main site (<code>zakvarty.com/blog</code>) and for it to inherit the styling of that site.</p>
<p>It probably would have been easier to make the blog a sub domain (<code>blog.zakvarty.com</code>) and use two separate but matching style files to make those sites look coherent. However, I wanted to make the most of the built in search features on quarto websites and am a glutton for punishment.</p>
<p>Credit to <a href="https://ddimmery.com/">Drew Dimmery</a>, whose website I used alongside the <a href="https://quarto.org/docs/guide/">quarto docs</a> to work out how to get all these pieces working together.</p>
</section>
<section id="steps" class="level1">
<h1>Steps</h1>
<ol type="1">
<li>Create a subdirectory of the website called <code>blog/</code>. This has sub-folders for each blog post and will contain the files of metadata that are common to all blog posts (e.g.&nbsp;default settings for YAML headers information and a bibliography file). <!-- --></li>
<li>Create a <a href="https://quarto.org/docs/websites/website-listings.html">listing page</a> called <code>blog.qmd</code> in the root directory. This will become the blog “landing page” and what we will point to from the website header. <!-- --></li>
<li>Add a “Blog” header item to the <code>_quarto.yml</code> file for the website and set the <code>link:</code> for this to be <code>blog.qmd</code> <!-- --></li>
<li>Added a simple example post to the <code>blog/</code> directory. See for example my <a href="https://www.github.com/zakvarty/quarto-website/blog/hello-world/">hello-world</a> post. <!-- --></li>
<li>Adjust the default YAML parameters for the blog posts by making the file <code>blog/_metadata.yml</code>. These default values can be overwritten by specifying them again in the YAML header at the top of any individual post. For examples of what you might want to include see <a href="https://www.github.com/zakvarty/quarto-website/blog/_metadata.yml">my file</a> or the <a href="https://quarto.org/docs/projects/quarto-projects.html">projects section</a> of the quarto docs. <!-- --></li>
<li>Add a simple bibliography file, called <code>library.bib</code> or similar to the <code>blog/</code> directory. Set this as the default bibliography file for each blog post by adding <code>bibliography: ../library.bib</code> to <code>blog/_metadata.yml</code>. <!-- --></li>
<li>(optional) Create a post template so that you don’t have to memorise header fields. <!-- --></li>
<li>Set your “Hello, World!” and template posts to have <code>draft: true</code> in their headers. This will prevent them from showing up on your website. <!-- --></li>
<li>Set your “Hello, World!” and template posts to have <code>freeze: true</code> in their headers. This will prevent any code in them from re-running each time the website is rendered.</li>
</ol>
<p>Freezing the code within posts will improve the build speed, as well as make the website more stable and portable. See the quarto docs on <a href="https://quarto.org/docs/websites/website-blog.html#freezing-posts">freezing posts</a> for more details. My current plan is to have this as <code>false</code> by default and change to <code>true</code> on publication of each post.</p>
</section>
<section id="checking-that-references-work" class="level1">
<h1>Checking that references work</h1>
<p>I have set up a single bibtex file in which to store references for all posts. This lives in the <code>blog/</code> directory and is set as the default <code>bibliography</code> parameter for each post in the file <code>blog/_metadata.yml</code>.</p>
<p>This is an in-line reference to <span class="citation" data-cites="wan2020network">Wan et al. (2020)</span> written as <code>@citationkey</code>. Parenthetical references, such as <span class="citation" data-cites="wan2020network">(Wan et al. 2020)</span>, are written using <code>[@citationkey]</code>. These can be strung together by separating each citation key with a semicolon, for example <span class="citation" data-cites="wan2020network wan2020network">(Wan et al. 2020, 2020)</span>.</p>
<p>To let people know the license your work is under and how they should cite your blog posts you can use the <code>appendix-style</code> argument. This can be added to the YAML header of individual blog posts or you can specify a default value in <code>blog/_metadata.yml</code>. There are three options for this parameter:</p>
<ul>
<li><code>default</code> does some nice formatting and makes the text a bit smaller than the rest of the article;</li>
<li><code>plain</code> matches the style of the rest of your post;</li>
<li><code>none</code> does not add any citation details to the end of your post.</li>
</ul>
<p>I’m currently using some pretty hacky CSS to style this website so am limited to the latter two options for now. In the process of writing this article I stumbled across some neat SCSS that I hope will fix this issue that I have made for myself! [Update: I changed to SCSS and this is now fixed!]</p>
<p><em>Note: When adding references to your posts, make sure that the <code>site-URL</code> field in your website’s <code>quarto.yml</code> does not have a trailing slash - this will be copied into the reference and break the links.</em></p>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-wan2020network" class="csl-entry">
Wan, Phyllis, Tiandong Wang, Richard A Davis, and Sidney I Resnick. 2020. <span>“Are Extreme Value Estimation Methods Useful for Network Data?”</span> <em>Extremes</em> 23 (1): 171–95.
</div>
</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{varty2022,
  author = {Zak Varty},
  title = {Setting up a Quarto Blog},
  date = {2022-09-26},
  url = {https://www.zakvarty.com/blog/2022-09-26-adding-a-quarto-blog},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-varty2022" class="csl-entry quarto-appendix-citeas">
Zak Varty. 2022. <span>“Setting up a Quarto Blog.”</span> September 26,
2022. <a href="https://www.zakvarty.com/blog/2022-09-26-adding-a-quarto-blog">https://www.zakvarty.com/blog/2022-09-26-adding-a-quarto-blog</a>.
</div></div></section></div> ]]></description>
  <category>quarto</category>
  <category>tutorial</category>
  <guid>https://www.zakvarty.com/blog/2022-09-26-adding-a-quarto-blog/index.html</guid>
  <pubDate>Sun, 25 Sep 2022 23:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2022-09-26-adding-a-quarto-blog/florian-klauer-mk7D-4UCfmg-unsplash.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Hello, World!</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2022-09-26-hello-world/index.html</link>
  <description><![CDATA[ 



<section id="some-text" class="level1">
<h1>Some Text</h1>
<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry’s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>
</section>
<section id="some-code" class="level1">
<h1>Some Code</h1>
<div class="cell" data-layout-align="center">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">par</span>(<span class="at" style="color: #657422;">bg =</span> <span class="cn" style="color: #8f5902;">NA</span>)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">plot</span>(</span>
<span id="cb1-3">    <span class="at" style="color: #657422;">x =</span> mtcars<span class="sc" style="color: #5E5E5E;">$</span>mpg,</span>
<span id="cb1-4">    <span class="at" style="color: #657422;">y =</span> mtcars<span class="sc" style="color: #5E5E5E;">$</span>cyl,</span>
<span id="cb1-5">    <span class="at" style="color: #657422;">xlab =</span> <span class="st" style="color: #20794D;">"miles per gallon"</span>,</span>
<span id="cb1-6">    <span class="at" style="color: #657422;">ylab =</span> <span class="st" style="color: #20794D;">"cyclider count"</span>,</span>
<span id="cb1-7">    <span class="at" style="color: #657422;">pch =</span> <span class="dv" style="color: #AD0000;">16</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.zakvarty.com/blog/2022-09-26-hello-world/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>Quarto</category>
  <category>Templates</category>
  <guid>https://www.zakvarty.com/blog/2022-09-26-hello-world/index.html</guid>
  <pubDate>Sun, 25 Sep 2022 23:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2022-09-26-hello-world/hello-world-image.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
</span> to <span class="st" style="color: #20794D;">'.Rbuildignore'</span></span>
<span id="cb5-20">✔ Opening <span class="st" style="color: #20794D;">'/Users/zakvarty/Work/teaching/2022_data_science/eds/'</span> <span class="cf" style="color: #003B4F;">in</span> new RStudio session</span>
<span id="cb5-21">✔ Setting active project to <span class="st" style="color: #20794D;">'&lt;no active project&gt;'</span></span>
<span id="cb5-22"><span class="sc" style="color: #5E5E5E;">&gt;</span> usethis<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">create_package</span>(<span class="at" style="color: #657422;">path =</span> <span class="st" style="color: #20794D;">"~/Work/teaching/2022_data_science/eds"</span>)</span>
<span id="cb5-23">✔ Setting active project to <span class="st" style="color: #20794D;">'/Users/zakvarty/Work/teaching/2022_data_science/eds'</span>Package<span class="sc" style="color: #5E5E5E;">:</span> eds</span>
<span id="cb5-24">Title<span class="sc" style="color: #5E5E5E;">:</span> What the Package <span class="fu" style="color: #4758AB;">Does</span> (One Line, Title Case)</span>
<span id="cb5-25">Version<span class="sc" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">0.9000</span></span>
<span id="cb5-26">Authors<span class="sc" style="color: #5E5E5E;">@</span><span class="fu" style="color: #4758AB;">R</span> (parsed)<span class="sc" style="color: #5E5E5E;">:</span></span>
<span id="cb5-27">    <span class="er" style="color: #AD0000;">*</span> First Last <span class="sc" style="color: #5E5E5E;">&lt;</span>first.last<span class="sc" style="color: #5E5E5E;">@</span>example.com<span class="sc" style="color: #5E5E5E;">&gt;</span> [aut, cre] (YOUR<span class="sc" style="color: #5E5E5E;">-</span>ORCID<span class="sc" style="color: #5E5E5E;">-</span>ID)</span>
<span id="cb5-28">Description<span class="sc" style="color: #5E5E5E;">:</span> What the package <span class="fu" style="color: #4758AB;">does</span> (one paragraph).</span>
<span id="cb5-29">License<span class="sc" style="color: #5E5E5E;">:</span> <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">use_mit_license()</span><span class="st" style="color: #20794D;">`</span>, <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">use_gpl3_license()</span><span class="st" style="color: #20794D;">`</span> or friends to</span>
<span id="cb5-30">    pick a license</span>
<span id="cb5-31">Encoding<span class="sc" style="color: #5E5E5E;">:</span> UTF<span class="dv" style="color: #AD0000;">-8</span></span>
<span id="cb5-32">Roxygen<span class="sc" style="color: #5E5E5E;">:</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">markdown =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb5-33">RoxygenNote<span class="sc" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">7</span>.<span class="fl" style="color: #AD0000;">2.3</span></span></code></pre></div>
</div>
<p>If we now look in the “files” pane, we will see that this template is very different from what we recommended for a general project. Before we get familiar with the structure of a package directory, let’s first check our package with <code>devtools::check()</code>. This function forms a key part of the package development workflow and does several things.</p>
<ul>
<li>Updates documentation for the package and its contents</li>
<li>Builds the package</li>
<li>Checks the structure and content of the built package</li>
<li>Returns errors, warnings and notes to guide your next steps.</li>
</ul>
<p>You should check your package often during development. It takes a bit of time but it is much easier to correct a few points at a time than to diagnose why a huge package is not building.</p>
<p>Let’s take that advice and perform our first check.</p>
<div class="cell" data-filename="Console">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">devtools<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">check</span>()</span></code></pre></div>
</div>
<p>We will see a lot of output as the function works its way through over 50 different checks. Finally, the output ends with only one warning, telling us that we have not specified a (standard) license for our project within the DESCRIPTION file.</p>
<div class="cell" data-filename="Console">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">...</span>
<span id="cb7-2">── R CMD check results ───────────────────────────────────── eds <span class="dv" style="color: #AD0000;">0</span>.<span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">0.9000</span> ────</span>
<span id="cb7-3">Duration<span class="sc" style="color: #5E5E5E;">:</span> <span class="fl" style="color: #AD0000;">5.3</span>s</span>
<span id="cb7-4"></span>
<span id="cb7-5">❯ checking DESCRIPTION meta<span class="sc" style="color: #5E5E5E;">-</span>information ... WARNING</span>
<span id="cb7-6">  Non<span class="sc" style="color: #5E5E5E;">-</span>standard license specification<span class="sc" style="color: #5E5E5E;">:</span></span>
<span id="cb7-7">    <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">use_mit_license()</span><span class="st" style="color: #20794D;">`</span>, <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">use_gpl3_license()</span><span class="st" style="color: #20794D;">`</span> or friends to pick a</span>
<span id="cb7-8">    license</span>
<span id="cb7-9">  Standardizable<span class="sc" style="color: #5E5E5E;">:</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb7-10"></span>
<span id="cb7-11"><span class="dv" style="color: #AD0000;">0</span> errors ✔ <span class="sc" style="color: #5E5E5E;">|</span> <span class="dv" style="color: #AD0000;">1</span> warning ✖ <span class="sc" style="color: #5E5E5E;">|</span> <span class="dv" style="color: #AD0000;">0</span> notes ✔</span></code></pre></div>
</div>
<p>The license file specifies how others may use our code. We will use the permissive <a href="https://choosealicense.com/licenses/mit/">MIT license</a>, which we will add using another function from <code>{usethis}</code>. There are similar helper functions to add other licenses, which you can investigate further at <a href="https://choosealicense.com/">choosealicense.com</a></p>
<p>The <code>{usethis}</code> helper function will add a markdown and plain text version of the license to our directory and reference these in the DESCRIPTION.</p>
<div class="cell" data-filename="Console">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">usethis<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">use_mit_license</span>(<span class="at" style="color: #657422;">copyright_holder =</span> <span class="st" style="color: #20794D;">"Zak Varty"</span>)</span></code></pre></div>
</div>
<div class="cell" data-filename="Console">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">✔ Setting active project to <span class="st" style="color: #20794D;">'/Users/zakvarty/Work/teaching/2022_data_science/eds'</span></span>
<span id="cb9-2">✔ Setting License field <span class="cf" style="color: #003B4F;">in</span> DESCRIPTION to <span class="st" style="color: #20794D;">'MIT + file LICENSE'</span></span>
<span id="cb9-3">✔ Writing <span class="st" style="color: #20794D;">'LICENSE'</span></span>
<span id="cb9-4">✔ Writing <span class="st" style="color: #20794D;">'LICENSE.md'</span></span>
<span id="cb9-5">✔ Adding <span class="st" style="color: #20794D;">'^LICENSE</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.md
  <category>R</category>
  <category>data science</category>
  <category>tutorial</category>
  <guid>https://www.zakvarty.com/blog/2023-01-16-minimal-R-package/index.html</guid>
  <pubDate>Thu, 19 Jan 2023 00:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2023-01-16-minimal-R-package/horst-amazing-function.png" medium="image" type="image/png" height="89" width="144"/>
</item>
<item>
  <title>Data Wrangling</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2023-01-06-data-wrangling/index.html</link>
  <description><![CDATA[ 



<section id="what-is-data-wrangling" class="level2">
<h2 class="anchored" data-anchor-id="what-is-data-wrangling">What is Data Wrangling?</h2>
<div class="medium_right">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2023-01-06-data-wrangling/horst-wrangle-monsters.jpg" alt="Two happy looking round fuzzy monsters, each holding a similarly shaped wrench with the word “wrangle” on it. Between their tools is held up a rectangular data table labeled “TIDY.”"></p>
</div>
<p>Okay, so you’ve got some data. Great start!</p>
<p>You might have had it handed to you by a collaborator, <a href="https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/">requested it via an API</a> or <a href="https://www.zakvarty.com/blog/2022-12-01-rvest/">scraped it from the raw html of a webpage</a>. In the worst case scenario, you’re an <em>actual</em> scientist (not just a <em>data</em> one) and you spent the last several months of your life painstakingly measuring flower petals or car parts. Now we really want to do something useful with that data.</p>
<p>We’ve seen already how you can load the data into R and pivot between wider and longer formats, but that probably isn’t enough to satisfy your curisity. You want to be able to view your data, manipulate and subset it, create new variables from exisiting ones and cross-reference your dataset with others. All of these are things possible in R and are known under various collective names including data manipulation, data munging and data wrangling.</p>
<p>I’ve decided to use the term data wranging here. That’s because data manipulation sounds boring a.f. and data munging is both unpleasant to say and makes me imagine we are squelching through some sort of information swamp.</p>
<p>In what follows I’ll give a fly-by tour of tools for data wrangling in R, showing some examples along the way. I’ll focus on some of the most common and useful operations and link out to some more extensive guides for wrangling your data in R, that you can refer back to as you need them.</p>
</section>
<section id="example-data-sets" class="level2">
<h2 class="anchored" data-anchor-id="example-data-sets">Example Data Sets</h2>
<p>To demonstrate some standard skills we will use some standard datasets that come built into any R installation. These are the <code>penguins</code> data set from <code>{palmerpenguins}</code> and the <code>mtcars</code> data set.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(palmerpenguins)</span>
<span id="cb1-2">pengins <span class="ot" style="color: #003B4F;">&lt;-</span> palmerpenguins<span class="sc" style="color: #5E5E5E;">::</span>penguins</span>
<span id="cb1-3">cars <span class="ot" style="color: #003B4F;">&lt;-</span> datasets<span class="sc" style="color: #5E5E5E;">::</span>mtcars</span></code></pre></div>
</div>
</section>
<section id="viewing-your-data" class="level2">
<h2 class="anchored" data-anchor-id="viewing-your-data">Viewing Your Data</h2>
<section id="view" class="level3">
<h3 class="anchored" data-anchor-id="view"><code>View()</code></h3>
<p>The <code>View()</code> function can be used to crease a spreadsheet-like view of your data. In RStudio this will open as a new tab.</p>
<p><code>View()</code> will work for any “matrix-like” R object, such as a tibble, data frame, vector or matrix. Note the capital letter - the function is called <code>View()</code>, not <code>view()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">View</span>(penguins)</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.zakvarty.com/blog/2023-01-06-data-wrangling/view-penguins-screenshot.png" class="img-fluid figure-img" style="width:60.0%"></p>
<p></p><figcaption class="figure-caption">Screenshot of RStduio files pane, containg a spreadsheet view of the palmer penguins data set.</figcaption><p></p>
</figure>
</div>
</section>
<section id="head" class="level3">
<h3 class="anchored" data-anchor-id="head"><code>head()</code></h3>
<p>For large data sets, you might not want (or be able to) view it all at once. You can then use <code>head()</code> to view the first few rows. The integer argument <code>n</code> specifies the number of rows you would like to return.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">head</span>(<span class="at" style="color: #657422;">x =</span> pengins, <span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 8
  species island    bill_length_mm bill_depth_mm flipper_l…¹ body_…² sex    year
  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;       &lt;int&gt;   &lt;int&gt; &lt;fct&gt; &lt;int&gt;
1 Adelie  Torgersen           39.1          18.7         181    3750 male   2007
2 Adelie  Torgersen           39.5          17.4         186    3800 fema…  2007
3 Adelie  Torgersen           40.3          18           195    3250 fema…  2007
# … with abbreviated variable names ¹​flipper_length_mm, ²​body_mass_g</code></pre>
</div>
</div>
</section>
<section id="str" class="level3">
<h3 class="anchored" data-anchor-id="str"><code>str()</code></h3>
<p>An alternative way to view the a large data set, or one with a complicated format is to examine its structure with <code>str()</code>. This is a useful way to inspect the structure of list-like objects, particularly when they’ve got a nested structure.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">str</span>(penguins)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tibble [344 × 8] (S3: tbl_df/tbl/data.frame)
 $ species          : Factor w/ 3 levels "Adelie","Chinstrap",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ island           : Factor w/ 3 levels "Biscoe","Dream",..: 3 3 3 3 3 3 3 3 3 3 ...
 $ bill_length_mm   : num [1:344] 39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...
 $ bill_depth_mm    : num [1:344] 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...
 $ flipper_length_mm: int [1:344] 181 186 195 NA 193 190 181 195 193 190 ...
 $ body_mass_g      : int [1:344] 3750 3800 3250 NA 3450 3650 3625 4675 3475 4250 ...
 $ sex              : Factor w/ 2 levels "female","male": 2 1 1 NA 1 2 1 2 NA NA ...
 $ year             : int [1:344] 2007 2007 2007 2007 2007 2007 2007 2007 2007 2007 ...</code></pre>
</div>
</div>
</section>
<section id="names" class="level3">
<h3 class="anchored" data-anchor-id="names"><code>names()</code></h3>
<p>Finally, if you just want to access the variable names you can do so with the <code>names()</code> function from base R.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;">names</span>(penguins)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "species"           "island"            "bill_length_mm"   
[4] "bill_depth_mm"     "flipper_length_mm" "body_mass_g"      
[7] "sex"               "year"             </code></pre>
</div>
</div>
<p>Similarly, you can explicitly access the row and column names of a data frame or tibble using <code>colnames()</code> or <code>rownames()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;">colnames</span>(cars)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "mpg"  "cyl"  "disp" "hp"   "drat" "wt"   "qsec" "vs"   "am"   "gear"
[11] "carb"</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;">rownames</span>(cars)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "Mazda RX4"           "Mazda RX4 Wag"       "Datsun 710"         
 [4] "Hornet 4 Drive"      "Hornet Sportabout"   "Valiant"            
 [7] "Duster 360"          "Merc 240D"           "Merc 230"           
[10] "Merc 280"            "Merc 280C"           "Merc 450SE"         
[13] "Merc 450SL"          "Merc 450SLC"         "Cadillac Fleetwood" 
[16] "Lincoln Continental" "Chrysler Imperial"   "Fiat 128"           
[19] "Honda Civic"         "Toyota Corolla"      "Toyota Corona"      
[22] "Dodge Challenger"    "AMC Javelin"         "Camaro Z28"         
[25] "Pontiac Firebird"    "Fiat X1-9"           "Porsche 914-2"      
[28] "Lotus Europa"        "Ford Pantera L"      "Ferrari Dino"       
[31] "Maserati Bora"       "Volvo 142E"         </code></pre>
</div>
</div>
<p>In the <code>cars</code> data, the car model are stored as the row names. This doesn’t really jive with our idea of tidy data - we’ll see how to fix that shortly.</p>
</section>
</section>
<section id="renaming-variables" class="level2">
<h2 class="anchored" data-anchor-id="renaming-variables">Renaming Variables</h2>
<section id="colnames" class="level3">
<h3 class="anchored" data-anchor-id="colnames"><code>colnames()</code></h3>
<p>The function <code>colnames()</code> can be used to set as well as to retrieve column names.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">cars_renamed <span class="ot" style="color: #003B4F;">&lt;-</span> cars </span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;">colnames</span>(cars_renamed)[<span class="dv" style="color: #AD0000;">1</span>] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"miles_per_gallon"</span></span>
<span id="cb13-3"><span class="fu" style="color: #4758AB;">colnames</span>(cars_renamed)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "miles_per_gallon" "cyl"              "disp"             "hp"              
 [5] "drat"             "wt"               "qsec"             "vs"              
 [9] "am"               "gear"             "carb"            </code></pre>
</div>
</div>
</section>
<section id="dplyrrename" class="level3">
<h3 class="anchored" data-anchor-id="dplyrrename"><code>dplyr::rename()</code></h3>
<p>We can also use functions from <code>{dplyr}</code> to rename columns. Let’s alter the second column name.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'dplyr'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:stats':

    filter, lag</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union</code></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">cars_renamed <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rename</span>(<span class="at" style="color: #657422;">.data =</span> cars_renamed, <span class="at" style="color: #657422;">cylinders =</span> cyl)</span>
<span id="cb19-2"><span class="fu" style="color: #4758AB;">colnames</span>(cars_renamed)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "miles_per_gallon" "cylinders"        "disp"             "hp"              
 [5] "drat"             "wt"               "qsec"             "vs"              
 [9] "am"               "gear"             "carb"            </code></pre>
</div>
</div>
<p>This could be done as part of a pipe, if we were making many alterations.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">cars_renamed <span class="ot" style="color: #003B4F;">&lt;-</span> cars_renamed <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb21-2">  <span class="fu" style="color: #4758AB;">rename</span>(<span class="at" style="color: #657422;">displacement =</span> disp) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb21-3">  <span class="fu" style="color: #4758AB;">rename</span>(<span class="at" style="color: #657422;">horse_power =</span> hp) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb21-4">  <span class="fu" style="color: #4758AB;">rename</span>(<span class="at" style="color: #657422;">rear_axel_ratio =</span> drat)</span>
<span id="cb21-5"></span>
<span id="cb21-6"><span class="fu" style="color: #4758AB;">colnames</span>(cars_renamed)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "miles_per_gallon" "cylinders"        "displacement"     "horse_power"     
 [5] "rear_axel_ratio"  "wt"               "qsec"             "vs"              
 [9] "am"               "gear"             "carb"            </code></pre>
</div>
</div>
<p>When using the dplyr function you have to remember the format <code>new_name = old_name</code>. This matches the format used to create a data frame or tibble, but is the opposite order to the python function of the same name and often catches people out.</p>
<p>In the section (#creating-new-variables) on creating new variables, we will see an alternative way of doing this by copying the column and then deleting the original.</p>
</section>
</section>
<section id="subsetting" class="level2">
<h2 class="anchored" data-anchor-id="subsetting">Subsetting</h2>
<section id="base-r" class="level3">
<h3 class="anchored" data-anchor-id="base-r">Base R</h3>
<p>In base R you can extract rows, columns and combinations thereof using index notation.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="co" style="color: #5E5E5E;"># First row</span></span>
<span id="cb23-2">penguins[<span class="dv" style="color: #AD0000;">1</span>, ]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 8
  species island    bill_length_mm bill_depth_mm flipper_l…¹ body_…² sex    year
  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;       &lt;int&gt;   &lt;int&gt; &lt;fct&gt; &lt;int&gt;
1 Adelie  Torgersen           39.1          18.7         181    3750 male   2007
# … with abbreviated variable names ¹​flipper_length_mm, ²​body_mass_g</code></pre>
</div>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="co" style="color: #5E5E5E;"># First Column </span></span>
<span id="cb25-2">penguins[ , <span class="dv" style="color: #AD0000;">1</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 344 × 1
   species
   &lt;fct&gt;  
 1 Adelie 
 2 Adelie 
 3 Adelie 
 4 Adelie 
 5 Adelie 
 6 Adelie 
 7 Adelie 
 8 Adelie 
 9 Adelie 
10 Adelie 
# … with 334 more rows</code></pre>
</div>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="co" style="color: #5E5E5E;"># Rows 2-3 of columns 1, 2 and 4</span></span>
<span id="cb27-2">penguins[<span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">3</span>, <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">4</span>)]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 3
  species island    bill_depth_mm
  &lt;fct&gt;   &lt;fct&gt;             &lt;dbl&gt;
1 Adelie  Torgersen          17.4
2 Adelie  Torgersen          18  </code></pre>
</div>
</div>
<p>Using negative indexing you can remove rows or columns</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="co" style="color: #5E5E5E;"># Drop all but first row</span></span>
<span id="cb29-2">penguins[<span class="sc" style="color: #5E5E5E;">-</span>(<span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">344</span>), ]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 8
  species island    bill_length_mm bill_depth_mm flipper_l…¹ body_…² sex    year
  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;       &lt;int&gt;   &lt;int&gt; &lt;fct&gt; &lt;int&gt;
1 Adelie  Torgersen           39.1          18.7         181    3750 male   2007
# … with abbreviated variable names ¹​flipper_length_mm, ²​body_mass_g</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="co" style="color: #5E5E5E;"># Drop all but first column </span></span>
<span id="cb31-2">penguins[ , <span class="sc" style="color: #5E5E5E;">-</span>(<span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">8</span>)]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 344 × 1
   species
   &lt;fct&gt;  
 1 Adelie 
 2 Adelie 
 3 Adelie 
 4 Adelie 
 5 Adelie 
 6 Adelie 
 7 Adelie 
 8 Adelie 
 9 Adelie 
10 Adelie 
# … with 334 more rows</code></pre>
</div>
</div>
<p>You can also select rows or columns by their names. This can be done using the bracket syntax (<code>[ ]</code>) or the dollar syntax (<code>$</code>).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">pengins[ , <span class="st" style="color: #20794D;">"species"</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 344 × 1
   species
   &lt;fct&gt;  
 1 Adelie 
 2 Adelie 
 3 Adelie 
 4 Adelie 
 5 Adelie 
 6 Adelie 
 7 Adelie 
 8 Adelie 
 9 Adelie 
10 Adelie 
# … with 334 more rows</code></pre>
</div>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">penguins<span class="sc" style="color: #5E5E5E;">$</span>species</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  [1] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
  [8] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [15] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [22] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [29] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [36] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [43] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [50] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [57] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [64] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [71] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [78] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [85] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [92] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [99] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
[106] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
[113] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
[120] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
[127] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
[134] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
[141] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
[148] Adelie    Adelie    Adelie    Adelie    Adelie    Gentoo    Gentoo   
[155] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[162] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[169] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[176] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[183] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[190] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[197] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[204] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[211] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[218] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[225] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[232] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[239] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[246] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[253] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[260] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[267] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[274] Gentoo    Gentoo    Gentoo    Chinstrap Chinstrap Chinstrap Chinstrap
[281] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap
[288] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap
[295] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap
[302] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap
[309] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap
[316] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap
[323] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap
[330] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap
[337] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap
[344] Chinstrap
Levels: Adelie Chinstrap Gentoo</code></pre>
</div>
</div>
<p>Since <code>penguins</code> is a tibble, these return different types of object. Sub-setting a tibble with bracket syntax will return a tibble, while extracting a column using the dollar syntax returns a vector of values.</p>
</section>
<section id="filter-and-select" class="level3">
<h3 class="anchored" data-anchor-id="filter-and-select"><code>filter()</code> and <code>select()</code></h3>
<p><code>{dplyr}</code> has two functions for subsetting, <code>filter()</code> subsets by rows and <code>select()</code> subsets by column.</p>
<p>In both functions you list what you would like to retain. Filter and select calls can be piped together to subset based on row and column values.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb37-2">  <span class="fu" style="color: #4758AB;">select</span>(species, island,body_mass_g)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 344 × 3
   species island    body_mass_g
   &lt;fct&gt;   &lt;fct&gt;           &lt;int&gt;
 1 Adelie  Torgersen        3750
 2 Adelie  Torgersen        3800
 3 Adelie  Torgersen        3250
 4 Adelie  Torgersen          NA
 5 Adelie  Torgersen        3450
 6 Adelie  Torgersen        3650
 7 Adelie  Torgersen        3625
 8 Adelie  Torgersen        4675
 9 Adelie  Torgersen        3475
10 Adelie  Torgersen        4250
# … with 334 more rows</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb39-2">  <span class="fu" style="color: #4758AB;">select</span>(species, island, body_mass_g) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb39-3">  <span class="fu" style="color: #4758AB;">filter</span>(body_mass_g <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">6000</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 3
  species island body_mass_g
  &lt;fct&gt;   &lt;fct&gt;        &lt;int&gt;
1 Gentoo  Biscoe        6300
2 Gentoo  Biscoe        6050</code></pre>
</div>
</div>
<p>Subsetting rows can be inverted by negating the <code>filter()</code> statement.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb41-2">  <span class="fu" style="color: #4758AB;">select</span>(species, island, body_mass_g) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb41-3">  <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span>(body_mass_g <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">6000</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 340 × 3
   species island    body_mass_g
   &lt;fct&gt;   &lt;fct&gt;           &lt;int&gt;
 1 Adelie  Torgersen        3750
 2 Adelie  Torgersen        3800
 3 Adelie  Torgersen        3250
 4 Adelie  Torgersen        3450
 5 Adelie  Torgersen        3650
 6 Adelie  Torgersen        3625
 7 Adelie  Torgersen        4675
 8 Adelie  Torgersen        3475
 9 Adelie  Torgersen        4250
10 Adelie  Torgersen        3300
# … with 330 more rows</code></pre>
</div>
</div>
<p>and dropping columns can done by selecting all columns except the one(s) you want to drop.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb43-2">  <span class="fu" style="color: #4758AB;">select</span>(species, island, body_mass_g) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb43-3">  <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span>(body_mass_g <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">6000</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb43-4">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">c</span>(species, island))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 340 × 1
   body_mass_g
         &lt;int&gt;
 1        3750
 2        3800
 3        3250
 4        3450
 5        3650
 6        3625
 7        4675
 8        3475
 9        4250
10        3300
# … with 330 more rows</code></pre>
</div>
</div>
</section>
</section>
<section id="creating-new-variables" class="level2">
<h2 class="anchored" data-anchor-id="creating-new-variables">Creating New Variables</h2>
<section id="base-r-1" class="level3">
<h3 class="anchored" data-anchor-id="base-r-1">Base R</h3>
<p>We can create new variables in base R by assigning a vector of the correct length to a new column name.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1">cars_renamed<span class="sc" style="color: #5E5E5E;">$</span>weight <span class="ot" style="color: #003B4F;">&lt;-</span> cars_renamed<span class="sc" style="color: #5E5E5E;">$</span>wt</span></code></pre></div>
</div>
<p>If we then drop the original column from the data frame, this gives us an alternative way of renaming columns.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">cars_renamed <span class="ot" style="color: #003B4F;">&lt;-</span> cars_renamed[ ,<span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">which</span>(<span class="fu" style="color: #4758AB;">names</span>(cars_renamed) <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"wt"</span>)]</span>
<span id="cb46-2"><span class="fu" style="color: #4758AB;">head</span>(cars_renamed, <span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                  miles_per_gallon cylinders displacement horse_power
Mazda RX4                     21.0         6          160         110
Mazda RX4 Wag                 21.0         6          160         110
Datsun 710                    22.8         4          108          93
Hornet 4 Drive                21.4         6          258         110
Hornet Sportabout             18.7         8          360         175
                  rear_axel_ratio  qsec vs am gear carb weight
Mazda RX4                    3.90 16.46  0  1    4    4  2.620
Mazda RX4 Wag                3.90 17.02  0  1    4    4  2.875
Datsun 710                   3.85 18.61  1  1    4    1  2.320
Hornet 4 Drive               3.08 19.44  1  0    3    1  3.215
Hornet Sportabout            3.15 17.02  0  0    3    2  3.440</code></pre>
</div>
</div>
<p>One thing to be aware of is that this operation does not preserve column ordering.</p>
<p>Generally speaking, code that relies on columns being in a specific order is fragile - it breaks easily. If possible, you should try to write your code in another way that’s robust to column reordering. I’ve done that here when removing the <code>wt</code> column by looking up the column index as part of my code, rather than assuming it will always be the fourth column.</p>
</section>
<section id="dplyrmutate" class="level3">
<h3 class="anchored" data-anchor-id="dplyrmutate"><code>dplyr::mutate()</code></h3>
<p>The function from <code>{dplyr}</code> to create new columns is <code>mutate()</code>. Let’s create another column that has the car’s weight in kilogrammes rather than tonnes.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">cars_renamed <span class="ot" style="color: #003B4F;">&lt;-</span> cars_renamed <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb48-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">weight_kg =</span> weight <span class="sc" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">1000</span>)</span>
<span id="cb48-3"></span>
<span id="cb48-4">cars_renamed <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb48-5">  <span class="fu" style="color: #4758AB;">select</span>(miles_per_gallon, cylinders, displacement, weight, weight_kg) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb48-6">  <span class="fu" style="color: #4758AB;">head</span>(<span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                  miles_per_gallon cylinders displacement weight weight_kg
Mazda RX4                     21.0         6          160  2.620      2620
Mazda RX4 Wag                 21.0         6          160  2.875      2875
Datsun 710                    22.8         4          108  2.320      2320
Hornet 4 Drive                21.4         6          258  3.215      3215
Hornet Sportabout             18.7         8          360  3.440      3440</code></pre>
</div>
</div>
<p>You can also create new columns that combine multiple other columns</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1">cars_renamed <span class="ot" style="color: #003B4F;">&lt;-</span> cars_renamed <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb50-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">cylinder_adjusted_mpg =</span> miles_per_gallon <span class="sc" style="color: #5E5E5E;">/</span> cylinders)</span></code></pre></div>
</div>
</section>
<section id="rownames_to_column" class="level3">
<h3 class="anchored" data-anchor-id="rownames_to_column"><code>rownames_to_column()</code></h3>
<p>One useful example of adding an additional row to a data frame is to convert its row names to a column of the data fame.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1">cars <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb51-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">model =</span> <span class="fu" style="color: #4758AB;">rownames</span>(cars_renamed)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb51-3">  <span class="fu" style="color: #4758AB;">select</span>(mpg, cyl, model) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb51-4">  <span class="fu" style="color: #4758AB;">head</span>(<span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                   mpg cyl             model
Mazda RX4         21.0   6         Mazda RX4
Mazda RX4 Wag     21.0   6     Mazda RX4 Wag
Datsun 710        22.8   4        Datsun 710
Hornet 4 Drive    21.4   6    Hornet 4 Drive
Hornet Sportabout 18.7   8 Hornet Sportabout</code></pre>
</div>
</div>
<p>Therea neat function called <code>rownames_to_column()</code> in <code>{tibble}</code> which will add this as the first column and remove the row names all in one step.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1">cars <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb53-2">  tibble<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">rownames_to_column</span>(<span class="at" style="color: #657422;">var =</span> <span class="st" style="color: #20794D;">"model"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb53-3">  <span class="fu" style="color: #4758AB;">head</span>(<span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>              model  mpg cyl disp  hp drat    wt  qsec vs am gear carb
1         Mazda RX4 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
2     Mazda RX4 Wag 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
3        Datsun 710 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
4    Hornet 4 Drive 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
5 Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2</code></pre>
</div>
</div>
</section>
<section id="rowids_to_column" class="level3">
<h3 class="anchored" data-anchor-id="rowids_to_column"><code>rowids_to_column()</code></h3>
<p>Another function from <code>{tibble}</code> adds the row id of each observation as a new column. This is often useful when ordering or combining tables.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1">cars <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb55-2">  tibble<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">rowid_to_column</span>(<span class="at" style="color: #657422;">var =</span> <span class="st" style="color: #20794D;">"row_id"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb55-3">  <span class="fu" style="color: #4758AB;">head</span>(<span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  row_id  mpg cyl disp  hp drat    wt  qsec vs am gear carb
1      1 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
2      2 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
3      3 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
4      4 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
5      5 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2</code></pre>
</div>
</div>
</section>
</section>
<section id="summaries" class="level2">
<h2 class="anchored" data-anchor-id="summaries">Summaries</h2>
<p>The <code>summarise()</code> function allows you to collapse a data frame into a single row, which gives a summary statistic of your choosing.</p>
<p>This can be used to calculate a single summary</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb57-1"><span class="fu" style="color: #4758AB;">summarise</span>(penguins, <span class="at" style="color: #657422;">average_bill_length_mm =</span> <span class="fu" style="color: #4758AB;">mean</span>(bill_length_mm))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 1
  average_bill_length_mm
                   &lt;dbl&gt;
1                     NA</code></pre>
</div>
</div>
<p>Since we have missing values, we might instead want to calculate the mean of the recorded values.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb59-1"><span class="fu" style="color: #4758AB;">summarise</span>(penguins, <span class="at" style="color: #657422;">average_bill_length_mm =</span> <span class="fu" style="color: #4758AB;">mean</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 1
  average_bill_length_mm
                   &lt;dbl&gt;
1                   43.9</code></pre>
</div>
</div>
<p>We can also use <code>summarise()</code> to gather multiple summaries in a single data frame.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb61-1">bill_length_mm_summary <span class="ot" style="color: #003B4F;">&lt;-</span> penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb61-2">  <span class="fu" style="color: #4758AB;">summarise</span>(</span>
<span id="cb61-3">    <span class="at" style="color: #657422;">mean =</span> <span class="fu" style="color: #4758AB;">mean</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb61-4">    <span class="at" style="color: #657422;">median =</span> <span class="fu" style="color: #4758AB;">median</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb61-5">    <span class="at" style="color: #657422;">min =</span> <span class="fu" style="color: #4758AB;">max</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb61-6">    <span class="at" style="color: #657422;">q_0 =</span> <span class="fu" style="color: #4758AB;">min</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb61-7">    <span class="at" style="color: #657422;">q_1 =</span> <span class="fu" style="color: #4758AB;">quantile</span>(bill_length_mm, <span class="at" style="color: #657422;">prob =</span> <span class="fl" style="color: #AD0000;">0.25</span>, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb61-8">    <span class="at" style="color: #657422;">q_2 =</span> <span class="fu" style="color: #4758AB;">median</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb61-9">    <span class="at" style="color: #657422;">q_3 =</span> <span class="fu" style="color: #4758AB;">quantile</span>(bill_length_mm, <span class="at" style="color: #657422;">prob =</span> <span class="fl" style="color: #AD0000;">0.25</span>, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb61-10">    <span class="at" style="color: #657422;">q_4 =</span> <span class="fu" style="color: #4758AB;">max</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>))</span>
<span id="cb61-11"></span>
<span id="cb61-12">bill_length_mm_summary</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 8
   mean median   min   q_0   q_1   q_2   q_3   q_4
  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1  43.9   44.4  59.6  32.1  39.2  44.4  39.2  59.6</code></pre>
</div>
</div>
<p>In all this isn’t overly exciting. You might, rightly, wonder why you’d want to use these <code>summarise()</code> calls when we could just use the simpler base R calls directly.</p>
<p>One benefit is that the summarise calls ensure consistent output. However, the main advantage comes when you want to apply these summaries to distinct subgroups of the data.</p>
</section>
<section id="grouped-operations" class="level2">
<h2 class="anchored" data-anchor-id="grouped-operations">Grouped Operations</h2>
<p>The real benefit of <code>summarise()</code> comes from its combination with <code>group_by()</code>. This allows to you calculate the same summary statistics for each level of a factor with only one additional line of code. Here we’re re-calculating the same set of summary statistics we just found for all penguins, but for each individual species.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb63-1">penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb63-2">  <span class="fu" style="color: #4758AB;">group_by</span>(species) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb63-3">  <span class="fu" style="color: #4758AB;">summarise</span>(</span>
<span id="cb63-4">    <span class="at" style="color: #657422;">mean =</span> <span class="fu" style="color: #4758AB;">mean</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb63-5">    <span class="at" style="color: #657422;">median =</span> <span class="fu" style="color: #4758AB;">median</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb63-6">    <span class="at" style="color: #657422;">min =</span> <span class="fu" style="color: #4758AB;">max</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb63-7">    <span class="at" style="color: #657422;">q_0 =</span> <span class="fu" style="color: #4758AB;">min</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb63-8">    <span class="at" style="color: #657422;">q_1 =</span> <span class="fu" style="color: #4758AB;">quantile</span>(bill_length_mm, <span class="at" style="color: #657422;">prob =</span> <span class="fl" style="color: #AD0000;">0.25</span>, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb63-9">    <span class="at" style="color: #657422;">q_2 =</span> <span class="fu" style="color: #4758AB;">median</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb63-10">    <span class="at" style="color: #657422;">q_3 =</span> <span class="fu" style="color: #4758AB;">quantile</span>(bill_length_mm, <span class="at" style="color: #657422;">prob =</span> <span class="fl" style="color: #AD0000;">0.25</span>, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb63-11">    <span class="at" style="color: #657422;">q_4 =</span> <span class="fu" style="color: #4758AB;">max</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 9
  species    mean median   min   q_0   q_1   q_2   q_3   q_4
  &lt;fct&gt;     &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1 Adelie     38.8   38.8  46    32.1  36.8  38.8  36.8  46  
2 Chinstrap  48.8   49.6  58    40.9  46.3  49.6  46.3  58  
3 Gentoo     47.5   47.3  59.6  40.9  45.3  47.3  45.3  59.6</code></pre>
</div>
</div>
<p>You can group by multiple factors to calculate summaries for each distinct combination of levels within your data set. Here we group by combinations of species and the island to which they belong.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb65-1">penguin_summary_stats <span class="ot" style="color: #003B4F;">&lt;-</span> penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb65-2">  <span class="fu" style="color: #4758AB;">group_by</span>(species, island) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb65-3">  <span class="fu" style="color: #4758AB;">summarise</span>(</span>
<span id="cb65-4">    <span class="at" style="color: #657422;">mean =</span> <span class="fu" style="color: #4758AB;">mean</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb65-5">    <span class="at" style="color: #657422;">median =</span> <span class="fu" style="color: #4758AB;">median</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb65-6">    <span class="at" style="color: #657422;">min =</span> <span class="fu" style="color: #4758AB;">max</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb65-7">    <span class="at" style="color: #657422;">q_0 =</span> <span class="fu" style="color: #4758AB;">min</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb65-8">    <span class="at" style="color: #657422;">q_1 =</span> <span class="fu" style="color: #4758AB;">quantile</span>(bill_length_mm, <span class="at" style="color: #657422;">prob =</span> <span class="fl" style="color: #AD0000;">0.25</span>, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb65-9">    <span class="at" style="color: #657422;">q_2 =</span> <span class="fu" style="color: #4758AB;">median</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb65-10">    <span class="at" style="color: #657422;">q_3 =</span> <span class="fu" style="color: #4758AB;">quantile</span>(bill_length_mm, <span class="at" style="color: #657422;">prob =</span> <span class="fl" style="color: #AD0000;">0.25</span>, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb65-11">    <span class="at" style="color: #657422;">q_4 =</span> <span class="fu" style="color: #4758AB;">max</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`summarise()` has grouped output by 'species'. You can override using the
`.groups` argument.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb67-1">penguin_summary_stats</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 10
# Groups:   species [3]
  species   island     mean median   min   q_0   q_1   q_2   q_3   q_4
  &lt;fct&gt;     &lt;fct&gt;     &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1 Adelie    Biscoe     39.0   38.7  45.6  34.5  37.7  38.7  37.7  45.6
2 Adelie    Dream      38.5   38.6  44.1  32.1  36.8  38.6  36.8  44.1
3 Adelie    Torgersen  39.0   38.9  46    33.5  36.7  38.9  36.7  46  
4 Chinstrap Dream      48.8   49.6  58    40.9  46.3  49.6  46.3  58  
5 Gentoo    Biscoe     47.5   47.3  59.6  40.9  45.3  47.3  45.3  59.6</code></pre>
</div>
</div>
<section id="ungrouping" class="level3">
<h3 class="anchored" data-anchor-id="ungrouping">Ungrouping</h3>
<p>By default, each call to <code>summarise()</code> will undo one level of grouping. This means that our previous result was still grouped by species.</p>
<p>(We can see this by examining the structure of the returned data frame. The first line tells us that this this is an S3 object of class “grouped_df”, which inherits its properties from a “tbl_df”, whose properties in turn come from “tbl” and “data.frame” objects.)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb69-1"><span class="fu" style="color: #4758AB;">class</span>(penguin_summary_stats)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "grouped_df" "tbl_df"     "tbl"        "data.frame"</code></pre>
</div>
</div>
<p>Since we have grouped by two variables, R expects us to use two summaries before returning a data frame (or tibble) that is not grouped. One way to satisfy this is to use apply a second summary at the species level of grouping.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb71-1">penguin_summary_stats <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb71-2">  <span class="fu" style="color: #4758AB;">summarise_all</span>(mean, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in mean.default(island, na.rm = TRUE): argument is not numeric or
logical: returning NA

Warning in mean.default(island, na.rm = TRUE): argument is not numeric or
logical: returning NA

Warning in mean.default(island, na.rm = TRUE): argument is not numeric or
logical: returning NA</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 10
  species   island  mean median   min   q_0   q_1   q_2   q_3   q_4
  &lt;fct&gt;      &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1 Adelie        NA  38.8   38.7  45.2  33.4  37.0  38.7  37.0  45.2
2 Chinstrap     NA  48.8   49.6  58    40.9  46.3  49.6  46.3  58  
3 Gentoo        NA  47.5   47.3  59.6  40.9  45.3  47.3  45.3  59.6</code></pre>
</div>
</div>
<p>However, we won’t always want to do apply another summary. In that case, we can undo the grouping using <code>ungroup()</code>. Remembering to ungroup is a gotcha and cause of confusion when working with multiple-group summaries.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb74-1"><span class="fu" style="color: #4758AB;">ungroup</span>(penguin_summary_stats)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 10
  species   island     mean median   min   q_0   q_1   q_2   q_3   q_4
  &lt;fct&gt;     &lt;fct&gt;     &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1 Adelie    Biscoe     39.0   38.7  45.6  34.5  37.7  38.7  37.7  45.6
2 Adelie    Dream      38.5   38.6  44.1  32.1  36.8  38.6  36.8  44.1
3 Adelie    Torgersen  39.0   38.9  46    33.5  36.7  38.9  36.7  46  
4 Chinstrap Dream      48.8   49.6  58    40.9  46.3  49.6  46.3  58  
5 Gentoo    Biscoe     47.5   47.3  59.6  40.9  45.3  47.3  45.3  59.6</code></pre>
</div>
</div>
<p>There’s an alternative method to achieve the same thing in a single step when using <code>{dplyr}</code> versions 1.0.0 and above. This is to to set the <code>.groups</code> parameter of the <code>summarise()</code> function call, which determines the grouping of the returned data frame.</p>
<p>The <code>.groups</code> parameter and can take 4 possible values:</p>
<ul>
<li><p>“drop_last”: dropping the last level of grouping (The only option before v1.0.0);</p></li>
<li><p>“drop”: All levels of grouping are dropped;</p></li>
<li><p>“keep”: Same grouping structure as <code>.data</code>;</p></li>
<li><p>“rowwise”: Each row is its own group.</p></li>
</ul>
<p>By default, “drop_last” is used if all the results have 1 row and “keep” is used otherwise.</p>
</section>
<section id="reordering-factors" class="level3">
<h3 class="anchored" data-anchor-id="reordering-factors">Reordering Factors</h3>
<p>R stored factors as integer values, which it then maps to a set of labels. Only factor levels that appear in your data will be assigned a coded integer value and the mapping between factor levels and integers will depend on the order that the labels appear in your data.</p>
<p>This can be annoying, particularly when your factor levels relate to properties that aren’t numerical but do have an inherent ordering to them. In the example below, we have the t-shirt size of twelve people.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb76-1">tshirts <span class="ot" style="color: #003B4F;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb76-2">  <span class="at" style="color: #657422;">id =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">12</span>, </span>
<span id="cb76-3">  <span class="at" style="color: #657422;">size =</span> <span class="fu" style="color: #4758AB;">as.factor</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"L"</span>, <span class="cn" style="color: #8f5902;">NA</span>, <span class="st" style="color: #20794D;">"M"</span>, <span class="st" style="color: #20794D;">"S"</span>, <span class="st" style="color: #20794D;">"XS"</span>, <span class="st" style="color: #20794D;">"M"</span>, <span class="st" style="color: #20794D;">"XXL"</span>, <span class="st" style="color: #20794D;">"L"</span>, <span class="st" style="color: #20794D;">"XS"</span>, <span class="st" style="color: #20794D;">"M"</span>, <span class="st" style="color: #20794D;">"L"</span>, <span class="st" style="color: #20794D;">"S"</span>))</span>
<span id="cb76-4">)</span>
<span id="cb76-5"></span>
<span id="cb76-6"><span class="fu" style="color: #4758AB;">levels</span>(tshirts<span class="sc" style="color: #5E5E5E;">$</span>size)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "L"   "M"   "S"   "XS"  "XXL"</code></pre>
</div>
</div>
<p>Annoyingly, the sizes aren’t in order and extra large is not included because it is not included in the sample. This leads to awkward summary tables (and plots).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb78-1">tshirts <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">group_by</span>(size) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">count =</span> <span class="fu" style="color: #4758AB;">n</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 2
  size  count
  &lt;fct&gt; &lt;int&gt;
1 L         3
2 M         3
3 S         2
4 XS        2
5 XXL       1
6 &lt;NA&gt;      1</code></pre>
</div>
</div>
<p>We can fix this by creating a new variable with the factors explicitly coded in the correct order. We also need to sepecify that we should not drop empty groups as part of <code>group_by()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb80-1">tidy_tshirt_levels <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"XS"</span>, <span class="st" style="color: #20794D;">"S"</span>, <span class="st" style="color: #20794D;">"M"</span>, <span class="st" style="color: #20794D;">"L"</span>, <span class="st" style="color: #20794D;">"XL"</span>, <span class="st" style="color: #20794D;">"XXL"</span>, <span class="cn" style="color: #8f5902;">NA</span>)</span>
<span id="cb80-2"></span>
<span id="cb80-3">tshirts <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb80-4">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">size_tidy =</span> <span class="fu" style="color: #4758AB;">factor</span>(size, <span class="at" style="color: #657422;">levels =</span> tidy_tshirt_levels)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb80-5">  <span class="fu" style="color: #4758AB;">group_by</span>(size_tidy, <span class="at" style="color: #657422;">.drop =</span> <span class="cn" style="color: #8f5902;">FALSE</span> ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb80-6">  <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">count =</span> <span class="fu" style="color: #4758AB;">n</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 7 × 2
  size_tidy count
  &lt;fct&gt;     &lt;int&gt;
1 XS            2
2 S             2
3 M             3
4 L             3
5 XL            0
6 XXL           1
7 &lt;NA&gt;          1</code></pre>
</div>
</div>
</section>
</section>
<section id="be-aware-factors" class="level2">
<h2 class="anchored" data-anchor-id="be-aware-factors">Be Aware: Factors</h2>
<p>As we have seen a little already, categorical variables can cause issues when wrangling and presenting data in R. All of these problems are solvable using base R techniques but the <code>{forcats}</code> package provides tools for the most common of these problems. This includes functions for changing the order of factor levels or the values with which they are associated.</p>
<p>Some examples functions from the package include:</p>
<ul>
<li><code>fct_reorder()</code>: Reordering a factor by another variable.</li>
<li><code>fct_infreq()</code>: Reordering a factor by the frequency of values.</li>
<li><code>fct_relevel()</code>: Changing the order of a factor by hand.</li>
<li><code>fct_lump()</code>: Collapsing the least/most frequent values of a factor into “other”.</li>
</ul>
<p>Examples of each of these can be found in the <a href="https://forcats.tidyverse.org/articles/forcats.html">forcats vignette</a> or the <a href="(https://r4ds.had.co.nz/factors.html)">factors chapter</a> of R for data science.</p>
</section>
<section id="be-aware-strings" class="level2">
<h2 class="anchored" data-anchor-id="be-aware-strings">Be Aware: Strings</h2>
<p>Working with and analysing text data is a skill unto itself. However, it is useful to be able to do some basic manipulation of character strings programatically.</p>
<p>Because R was developed as a statistical programming language, it is well suited to the computational and modelling aspects of working with text data but the base R string manipulation functions can be a bit unwieldy at times.</p>
<p>The <code>{stringr}</code> package aims to combat this by providing useful helper functions for a range of text management problems. Even when not analysing text data these can be useful, for example to remove prefixes on a lot of column names.</p>
<div class="cell">
<div class="cell-output cell-output-stderr">
<pre><code>Warning: `as_data_frame()` was deprecated in tibble 2.0.0.
ℹ Please use `as_tibble()` instead.
ℹ The signature and semantics have changed, see `?as_tibble`.</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if
`.name_repair` is omitted as of tibble 2.0.0.
ℹ Using compatibility `.name_repair`.
ℹ The deprecated feature was likely used in the tibble package.
  Please report the issue at &lt;]8;;https://github.com/tidyverse/tibble/issueshttps://github.com/tidyverse/tibble/issues]8;;&gt;.</code></pre>
</div>
</div>
<p>Suppose we wanted to keep only the text following an underscore in these column names. We could do that by using a regular expression to extract lower-case or upper-case letters which follow an underscore.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb84-1"><span class="fu" style="color: #4758AB;">head</span>(poorly_named_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 11
  observatio…¹   V1_A   V2_B   V3_C    V4_D    V5_E   V6_F   V7_G   V8_H    V9_I
         &lt;int&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;
1            1 -0.199 -0.729  1.14   0.0205 -0.714  -1.14  0.786  -0.926 -0.740 
2            2 -0.956 -1.71  -0.184  1.44   -1.97   -0.470 0.0393  1.42  -2.49  
3            3  0.585 -1.06  -1.43   0.361   0.0141  0.585 1.01   -1.90  -0.0825
4            4  0.624  1.17   0.263  1.72   -0.0808  0.707 1.93   -0.675  0.448 
5            5  0.425 -0.190 -0.360 -0.443   0.134  -0.339 0.0577  1.21  -1.38  
6            6  0.169  1.40   1.82  -0.999   1.14   -0.377 0.471   0.934  0.604 
# … with 1 more variable: V10_J &lt;dbl&gt;, and abbreviated variable name
#   ¹​observation_id</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb86-1">stringr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">str_extract</span>(<span class="fu" style="color: #4758AB;">names</span>(poorly_named_df), <span class="at" style="color: #657422;">pattern =</span> <span class="st" style="color: #20794D;">"(?&lt;=_)([a-zA-Z]+)"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "id" "A"  "B"  "C"  "D"  "E"  "F"  "G"  "H"  "I"  "J" </code></pre>
</div>
</div>
<p>Alternatively, can avoid using regular expressions. We can split each column name at the underscore and keep only the second part of each string.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb88-1"><span class="co" style="color: #5E5E5E;"># split column names at underscores and inspect structure of resuting object</span></span>
<span id="cb88-2">split_strings <span class="ot" style="color: #003B4F;">&lt;-</span> stringr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">str_split</span>(<span class="fu" style="color: #4758AB;">names</span>(poorly_named_df), <span class="at" style="color: #657422;">pattern =</span> <span class="st" style="color: #20794D;">"_"</span>)</span>
<span id="cb88-3"><span class="fu" style="color: #4758AB;">str</span>(split_strings)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>List of 11
 $ : chr [1:2] "observation" "id"
 $ : chr [1:2] "V1" "A"
 $ : chr [1:2] "V2" "B"
 $ : chr [1:2] "V3" "C"
 $ : chr [1:2] "V4" "D"
 $ : chr [1:2] "V5" "E"
 $ : chr [1:2] "V6" "F"
 $ : chr [1:2] "V7" "G"
 $ : chr [1:2] "V8" "H"
 $ : chr [1:2] "V9" "I"
 $ : chr [1:2] "V10" "J"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb90-1"><span class="co" style="color: #5E5E5E;"># keep only the second element of each character vector in the list</span></span>
<span id="cb90-2">purrr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">map_chr</span>(split_strings, <span class="cf" style="color: #003B4F;">function</span>(x){x[<span class="dv" style="color: #AD0000;">2</span>]})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "id" "A"  "B"  "C"  "D"  "E"  "F"  "G"  "H"  "I"  "J" </code></pre>
</div>
</div>
<p>Again, unless you plan to work extensively with text data, I would recommend that you look up such string manipulations as you need them. The <a href="https://r4ds.had.co.nz/strings.html#strings">strings</a> section of R for Data Science is a useful starting point.</p>
</section>
<section id="be-aware-date-times" class="level2">
<h2 class="anchored" data-anchor-id="be-aware-date-times">Be Aware: Date-Times</h2>
<p>Remember all the fuss we made about storing dates in the ISO standard format? That was because dates and times are complicated enough to work with before adding extra ambiguity.</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Ctext%7BYYYY%7D%20-%20%5Ctext%7BMM%7D%20-%20%5Ctext%7BDD%7D"></p>
<p>Dates, times and time intervals have to reconcile two factors: the physical orbit of the Earth around the sun and the social and geopolitical mechanisms that determine how we measure and record the passing of time. This makes the history of date and time records fascinating and can make working with this type of data complicated.</p>
<p>Moving from larger to smaller time spans: leap years alter the number of days in a year, months are of variable length (with February’s length changing from year to year). If your data are measured in a place that uses daylight saving, then one day a year will be 23 hours long and another will be 25 hours long. To make things worse, the dates and the hour at which the clocks change are not uniform across countries, which might be in distinct time zones that themselves change over time.</p>
<p>Even at the level of minutes and seconds we aren’t safe - since the Earth’s orbit is gradually slowing down a leap second is added approximately every 21 months. Nor are things any better when looking at longer time scales or across cultures, where we might have to account for different calendars: months are added removed and altered over time, other calendar systems still take different approaches to measuring time and using different units and origin points.</p>
<p>With all of these issues you have to be very careful when working with date and time data. Functions to help you with this can be found in the <code>{lubridate}</code> package, with examples in the <a href="https://r4ds.had.co.nz/dates-and-times.html#dates-and-times">dates and times</a> chapter of R for data science.</p>
<!--
- How many days are there in a year? (365-366)
- How many months days are there in a month? (28-31)
- How many hours are there in a day? (23-25)
- How many seconds are there in a minute? (60-61)
- What calendar are you using?
  - How many months are there in the year? 
  - When does a year begin?
-->
</section>
<section id="be-aware-relational-data" class="level2">
<h2 class="anchored" data-anchor-id="be-aware-relational-data">Be Aware: Relational Data</h2>
<p>When the data you need are stored across two or more data frames you need to be able to cross-reference those and match up values for observational unit. This sort of data is know as relational data, and is used extensively in data science.</p>
<p>The variables you use to match observational units across data frames are known as <em>keys</em>. The primary key belongs to the first table and the foreign key belongs to the secondary table. There are various ways to join these data frames, depending on if you want to retain.</p>
<section id="join-types" class="level4">
<h4 class="anchored" data-anchor-id="join-types">Join types</h4>
<p>You might want to keep only observational units that have key variables values in both data frames, this is known as an inner join.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.zakvarty.com/blog/2023-01-06-data-wrangling/join-inner.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Inner join diagram. Source: R for Data Science</figcaption><p></p>
</figure>
</div>
<p>You might instead want to keep all units from the primary table but pad with NAs where there is not a corresponding foreign key in the second table. This results in an <strong>(outer) left-join</strong>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.zakvarty.com/blog/2023-01-06-data-wrangling/join-left-right-full.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Diagram for left, right and outer joins. Source: R for Data Science</figcaption><p></p>
</figure>
</div>
<p>Conversely, you might keep all units from the second table but pad with NAs where there is not a corresponding foreign key in the primary table. This is imaginatively named an <strong>(outer) right-join</strong>.</p>
<p>The final common join type is an outer join, in which all observational units from either table are retained and all missing values are padded with NAs. This is known as an <strong>(outer) full join</strong>.</p>
<p>Things get more complicated when keys do not uniquely identify observational units in one or both tables. I’d recommend you start exploring these ideas with the <a href="">relational data</a> chapter of R for Data Science.</p>
</section>
<section id="why-and-where-to-learn-more" class="level4">
<h4 class="anchored" data-anchor-id="why-and-where-to-learn-more">Why and where to learn more</h4>
<p>Working with relational data is essential to getting any data science up and running out in the wilds of reality. This is because businesses and companies don’t store all of their data in a huge single csv file. For one this isn’t very efficient, because most cells would be empty. Secondly, it’s not a very secure approach, since you can’t grant partial access to the data. That’s why information is usually stored in many data frames (more generically known as tables) within one or more databases.</p>
<p>These data silos are created, maintained, accessed and destroyed using a relational data base management system. These management systems use code to manage and access the stored data, just like we have seen in the dplyr commands above. You might well have heard of the SQL programming language (and its many variants), which is a popular language for data base management and is the inspiration for the dplyr package and verbs.</p>
<p>If you’d like to learn more then there are many excellent introductory SQL books and courses, I’d recommend picking one that focuses on data analysis or data science unless you really want to dig into efficient storage and querying of databases.</p>
</section>
</section>
<section id="wrapping-up" class="level2">
<h2 class="anchored" data-anchor-id="wrapping-up">Wrapping up</h2>
<p>We have:</p>
<ul>
<li><p>Learned how to wrangle tabular data in R with <code>{dplyr}</code></p></li>
<li><p>Met the idea of relational data and <code>{dplyr}</code>’s relationship to SQL</p></li>
<li><p>Become aware of some tricky data types and packages that can help.</p></li>
</ul>


</section>

<div id="quarto-appendix"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{varty2023,
  author = {Zak Varty},
  title = {Data {Wrangling}},
  date = {2023-01-06},
  url = {https://www.zakvarty.com/blog/2023-01-06-data-wrangling},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-varty2023" class="csl-entry quarto-appendix-citeas">
Zak Varty. 2023. <span>“Data Wrangling.”</span> January 6, 2023. <a href="https://www.zakvarty.com/blog/2023-01-06-data-wrangling">https://www.zakvarty.com/blog/2023-01-06-data-wrangling</a>.
</div></div></section></div> ]]></description>
  <category>data science</category>
  <category>data wrangling</category>
  <category>tutorial</category>
  <guid>https://www.zakvarty.com/blog/2023-01-06-data-wrangling/index.html</guid>
  <pubDate>Fri, 06 Jan 2023 00:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2023-01-06-data-wrangling/horst-wrangle-monsters.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Aquiring Data via an API</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/index.html</link>
  <description><![CDATA[ 



<section id="aquiring-data-part-2---using-apis" class="level2">
<h2 class="anchored" data-anchor-id="aquiring-data-part-2---using-apis">Aquiring Data: Part 2 - Using APIs</h2>
<div class="medium_right">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/apis-and-httr.png" alt="The text APIs and httr, written on a black hexagon."></p>
</div>
<p>You can’t always rely on tidy, tabular data to land on your desk. Sometimes you are going to have to go out and gather data for yourself.</p>
<p>I’m not suggesting you will need to do this manually, but you will likely need to get data from the internet that’s been made publicly or privately available to you.</p>
<p>This might be information from a webpage that you gather yourself, or data shared with you by a collaborator using an API.</p>
<p>In this second blog post we will cover the basics of obtaining data via an API. This material draws together the <a href="https://zapier.com/learn/apis/">Introduction to APIs</a> book by Brian Cooksey and the <a href="https://stat545.com/diy-web-data.html#interacting-with-an-api">DIY web data</a> section of STAT545 at the University of British Columbia.</p>
</section>
<section id="why-do-i-need-to-know-about-apis" class="level2">
<h2 class="anchored" data-anchor-id="why-do-i-need-to-know-about-apis">Why do I need to know about APIs?</h2>
<blockquote class="blockquote">
<p>An API, or application programming interface, is a set of rules that allows different software applications to communicate with each other.</p>
</blockquote>
<p>As a data scientist, you will often need to access data that is stored on remote servers or in cloud-based services. APIs provide a convenient way for data scientists to programmatically retrieve this data, without having to manually download data sets or and process them locally on their own computer.</p>
<p>This has multiple benefits including automation and standardisation of data sharing.</p>
<ul>
<li><p><strong>Automation:</strong> It is much faster for a machine to process a data request than a human. Having a machine handling data requests also scales much better as either the number or the complexity of data requests grows. Additionally, there is a lower risk of introducing human error. For example, a human might accidentally share the wrong data, which can have serious legal repercussions.</p></li>
<li><p><strong>Standardisation:</strong> Having a machine process data requests requires the format of these requests and the associated responses to be standardised. This allows data sharing and retrieval to become a reproducible and programmatic aspect of our work.</p></li>
</ul>
</section>
<section id="what-is-an-api" class="level2">
<h2 class="anchored" data-anchor-id="what-is-an-api">What is an API?</h2>
<p>So then, if APIs are so great, what exactly are they?</p>
<p>In human-to-human communication, the set of rules governing acceptable behaviour is known as etiquette. Depending on when or where you live, social etiquette can be rather strict. The rules for computer-to-computer communication take this to a whole new level, because with machines there can be no room left for interpretation.</p>
<p>The set of rules governing interactions between computers or programmes is known as a <strong>protocol</strong>.</p>
<p>APIs provide a standard protocol for different programs to interact with one another. This makes it easier for developers to build complex systems by leveraging the functionality of existing services and platforms. The benefits of working in a standardised and modular way apply equally well to sharing data as they do to writing code or organising files.</p>
<p>There are two sides to communication and when <em>machines</em> communicate these are known as the <strong>server</strong> and the <strong>client</strong>.</p>
<div class="medium_right">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/server-schematic.png" alt="Schematic diagram representing a computer server. Text above reads 'Servers: don't fear a computer with no screen'."></p>
</div>
<p>Servers can seem intimidating, because unlike your laptop or mobile phone they don’t have their own input and output devices; they have no keyboard, no monitor, and no a mouse. Despite this, servers are just regular computers that are designed to store data and run programmes. Servers don’t have their own input or output devices because they are intended to be used <em>remotely</em>, via another computer. There is no need for a screen or a mouse if the user is miles away. Nothing scary going on here!</p>
<p>People often find clients much less intimidating - they are simply any other computer or application that might contact the sever.</p>
</section>
<section id="http" class="level2">
<h2 class="anchored" data-anchor-id="http">HTTP</h2>
<p>This leads us one step further down the rabbit-hole. An API is a protocol that defines the rules of how applications communicate with one another. But how does this communication happen?</p>
<p>HTTP (Hypertext Transfer Protocol) is the dominant mode communication on the World Wide Web. You can see the secure version of HTTP, HTTPS, at the start of most web addresses up at the top of your browser. For example:</p>
<pre class="http"><code>https://www.zakvarty.com/blog</code></pre>
<p>HTTP is the foundation of data communication on the web and is used to transfer files (such as text, images, and videos) between web servers and clients.</p>
<div class="medium_left">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/request-response.png" alt="Schematic diagram showing a request being sent from a client to a server, which returns a response."></p>
</div>
<p>To understand HTTP communications, I find it helpful to imagine the client and the server as being a customer and a waiter at a restaurant. The client makes some request to the server, which then tries to comply before giving a response. The server might respond to confirm that the request was completed successfully. Alternatively, the server might respond with an error message, which is (hopefully) informative about why the request could not be completed.</p>
<p>This request-response model is the basis for HTTP, the communication system used by the majority of APIs.</p>
</section>
<section id="http-requests" class="level2">
<h2 class="anchored" data-anchor-id="http-requests">HTTP Requests</h2>
<p>An HTML request consists of:</p>
<ul>
<li>Uniform Resource Locator (URL) [unique identifier for a thing]</li>
<li>Method [tells server the type of action requested by client]</li>
<li>Headers [meta-information about request, e.g.&nbsp;device type]</li>
<li>Body [Data the client wants to send to the server]</li>
</ul>
<div class="medium_right">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/html-request.png" alt="Schematic diagram showing the structure of an HTML request, composed of: a URL, method, headers and body."></p>
</div>
<section id="url" class="level3">
<h3 class="anchored" data-anchor-id="url">URL</h3>
<p>The URL in a HTTP request specifies where that request is going to be made, for example <code>http://example.com</code>.</p>
</section>
<section id="method" class="level3">
<h3 class="anchored" data-anchor-id="method">Method</h3>
<p>The action that the client wants to take is indicated by a set of well-defined methods or HTTP verbs. The most common HTTP verbs are <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>PATCH</code>, and <code>DELETE</code>.</p>
<p>The <code>GET</code> verb is used to retrieve a resource from the server, such as a web page or an image. The <code>POST</code> verb is used to send data to the server, such as when submitting a form or uploading a file. The <code>PUT</code> verb is used to replace a resource on the server with a new one, while the <code>PATCH</code> verb is used to update a resource on the server without replacing it entirely. Finally, the <code>DELETE</code> verb is used to delete a resource from the server.</p>
<p>In addition to these common HTTP verbs, there are also several less frequently used verbs. These are used for specialized purposes, such as requesting only the headers of a resource, or testing the connectivity between the client and the server.</p>
</section>
<section id="header" class="level3">
<h3 class="anchored" data-anchor-id="header">Header</h3>
<p>The request headers contain meta-information about the request. This is where information about the device type would be included within the request.</p>
</section>
<section id="body" class="level3">
<h3 class="anchored" data-anchor-id="body">Body</h3>
<p>Finally, the body of the request contains the data that the client is providing to the server.</p>
</section>
</section>
<section id="http-responses" class="level2">
<h2 class="anchored" data-anchor-id="http-responses">HTTP Responses</h2>
<p>When the server receives a request it will attempt to fulfil it and then send a response back to the client.</p>
<div class="medium_left">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/html-response.png" alt="Schematic diagram showing the structure of an HTML response, composed of: a status code, headers and body."></p>
</div>
<p>A response has a similar structure to a request apart from:</p>
<ul>
<li>responses <strong>do not have</strong> a URL,</li>
<li>responses <strong>do not have</strong> a method,</li>
<li>responses <strong>have</strong> a status code.</li>
</ul>
<section id="status-codes" class="level3">
<h3 class="anchored" data-anchor-id="status-codes">Status Codes</h3>
<p>The status code is a 3 digit number, each of which has a specific meaning. Some common error codes that you might (already have) come across are:</p>
<ul>
<li>200: Success,</li>
<li>404: Page not found (all 400s are errors),</li>
<li>503: Page down.</li>
</ul>
<p>In a data science context, a successful response will return the requested data within the data field. This will most likely be given in JSON or XML format.</p>
</section>
</section>
<section id="authentication" class="level2">
<h2 class="anchored" data-anchor-id="authentication">Authentication</h2>
<p>Now that we know <em>how</em> applications communicate, you might ask how we can control who has access to the API and what types of request they can make. This can be done by the server setting appropriate permissions for each client. But then how does the server verify that the client is really who is claims to be?</p>
<p><strong>Authentication</strong> is a way to ensure that only authorized clients are able to access an API. This is typically done by the server requiring each client to provide some secret information that uniquely identifies them, whenever they make requests to the API. This information allows the API server to validate the authenticity this user before it authorises the request.</p>
<section id="basic-authentication" class="level3">
<h3 class="anchored" data-anchor-id="basic-authentication">Basic Authentication</h3>
<p>There are various ways to implement API authentication.</p>
<p>Basic authentication involves each legitimate client having a username and password. An encrypted version of these is included in the <code>Authorization</code> header of the HTTP request. If the hear matches with the server’s records then the request is processed. If not, then a special status code (401) is returned to the client.</p>
<p>Basic authentication is dangerous because it does not put any restrictions on what a client can do once they are authorised. Additional, individualised restrictions can be added by using an alternative authentication scheme.</p>
</section>
<section id="api-key-authentication" class="level3">
<h3 class="anchored" data-anchor-id="api-key-authentication">API Key Authentication</h3>
<p>An API key is long, random string of letters and numbers that is assigned to each authorised user. An API key is distinct from the user’s password and keys are typically issued by the service that provides an API. Using keys rather than basic authentication allows the API provider to track and limit the usage of their API.</p>
<p>For example, a provider may issue a unique API key to each developer or organization that wants to use the API. The provider can then limit access to certain data. They could also limit the number of requests that each key can make in a given time period or prevent access to certain administrative functions, like changing passwords or deleting accounts.</p>
<p>Unlike Basic Authentication, there is no standard way of a client sharing a key with the server. Depending on the API this might be in the <code>Authorization</code> field of the header, at the end of the URL (<code>http://example.com?api_key=my_secret_key</code>), or within the body of the data.</p>
</section>
</section>
<section id="api-wrappers" class="level2">
<h2 class="anchored" data-anchor-id="api-wrappers">API wrappers</h2>
<p>We’ve learned a lot about how the internet works. Fortunately, a lot of the time we won’t have to worry about all of that new information other than for debugging purposes.</p>
<p>In the best case scenario, a very kind developer has written a “wrapper” function for the API. These wrappers are functions in R that will construct the HTML request for you. If you are particularly lucky, the API wrapper will also format the response for you, converting it from XML or JSON back into an R object that is ready for immediate use.</p>
</section>
<section id="geonames-wrapper" class="level2">
<h2 class="anchored" data-anchor-id="geonames-wrapper"><code>{geonames}</code> wrapper</h2>
<p><a href="https://ropensci.org/">rOpenSci</a> has a curated list of many wrappers for accessing scientific data using R. We will focus on the <a href="https://www.geonames.org/">GeoNames API</a>, which gives open access to a geographical database. To access this data, we will use wrapper functions provided by the <code>{geonames}</code> <a href="https://docs.ropensci.org/geonames/">package</a>.</p>
<p>The aim here is to illustrate the important steps of getting started with a new API.</p>
<section id="set-up" class="level3">
<h3 class="anchored" data-anchor-id="set-up">Set up</h3>
<p>Before we can get any data from the GeoNames API, we first need to do a little bit of set up.</p>
<ol type="1">
<li>Install and load <code>{geonames}</code> from CRAN</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;">#install.packages("geonames")</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">library</span>(geonames)</span></code></pre></div>
</div>
<ol start="2" type="1">
<li>Create a user account for the GeoNames API</li>
</ol>
<p><img style="border-radius: 0%;" src="https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/sign-up.png" alt="Screenshot of the GeoNames login page. Example text has been added in the fields to create a new user account."></p>
<ol start="3" type="1">
<li>Activate the account (see activation email)</li>
</ol>
<p><img style="border-radius: 0%;" src="https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/confirmation-email.png" alt="Screenshot of the GeoNames confirmation email, which gives a link to click in order to confirm the new account."></p>
<ol start="4" type="1">
<li><p>Enable the free web services for your GeoNames account by logging in at this <a href="http://www.geonames.org/enablefreewebservice">link</a>.</p></li>
<li><p>Tell R your credentials for GeoNames.</p></li>
</ol>
<div class="callout-warning callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>We could use the following code to tell R our credentials, but we absolutely should not.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">options</span>(<span class="at" style="color: #657422;">geonamesUsername=</span><span class="st" style="color: #20794D;">"example_username"</span>)</span></code></pre></div>
</div>
<p>This would save our username as an environment variable, but it <em>also</em> puts our API credentials directly into the script. If we share the script with our others (internally, externally or publicly) we would be sharing our credentials too. Not good!</p>
</div>
</div>
</section>
</section>
<section id="keep-it-secret-keep-it-safe" class="level2">
<h2 class="anchored" data-anchor-id="keep-it-secret-keep-it-safe">Keep it Secret, Keep it Safe</h2>
<p>The solution to this problem is to add our credentials as environment variables in our <code>.Rprofile</code> rather than in this script. The <code>.Rprofile</code> is an R script that is run at the start of every session. IT can be created and edited directly, but can also be created and edited from within R.</p>
<p>To make/open your <code>.Rprofile</code> use the <code>edit_r_profile()</code> function from the <code>{usethis}</code> package.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">library</span>(usethis)</span>
<span id="cb4-2">usethis<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">edit_r_profile</span>()</span></code></pre></div>
</div>
<p>Within this file, add <code>options(geonamesUsername="example_username")</code> on a new line, remembering to replace <code>example_username</code> with your own GeoNames username.</p>
<p>The final step is to <strong>check this this file ends with a blank line</strong>, save it and restart R. Then we are all set to start using <code>{geonames}</code>.</p>
<p>This set up procedure is indicative of most API wrappers, but of course the details will vary between each API. This is why good documentation is important!</p>
</section>
<section id="using-geonames" class="level2">
<h2 class="anchored" data-anchor-id="using-geonames">Using <code>{geonames}</code></h2>
<p>GeoNames has a whole host of <a href="http://www.geonames.org/export/ws-overview.html">different geo-datasets</a> that you can explore. As a first example, let’s get all of the geo-tagged wikipedia articles that are within 1km of Imperial College London.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">imperial_coords <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">lat =</span> <span class="fl" style="color: #AD0000;">51.49876</span>, <span class="at" style="color: #657422;">lon =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.1749</span>)</span>
<span id="cb5-2">search_radius_km <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb5-3"></span>
<span id="cb5-4">imperial_neighbours <span class="ot" style="color: #003B4F;">&lt;-</span> geonames<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">GNfindNearbyWikipedia</span>(</span>
<span id="cb5-5">  <span class="at" style="color: #657422;">lat =</span> imperial_coords<span class="sc" style="color: #5E5E5E;">$</span>lat,</span>
<span id="cb5-6">  <span class="at" style="color: #657422;">lng =</span> imperial_coords<span class="sc" style="color: #5E5E5E;">$</span>lon, </span>
<span id="cb5-7">  <span class="at" style="color: #657422;">radius =</span> search_radius_km,</span>
<span id="cb5-8">  <span class="at" style="color: #657422;">lang =</span> <span class="st" style="color: #20794D;">"en"</span>,                <span class="co" style="color: #5E5E5E;"># english language articles</span></span>
<span id="cb5-9">  <span class="at" style="color: #657422;">maxRows =</span> <span class="dv" style="color: #AD0000;">500</span>              <span class="co" style="color: #5E5E5E;"># maximum number of results to return </span></span>
<span id="cb5-10">)</span></code></pre></div>
</div>
<p>Looking at the structure of <code>imperial_neighbours</code> we can see that it is a data frame with one row per geo-tagged wikipedia article.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">str</span>(imperial_neighbours)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   204 obs. of  13 variables:
 $ summary     : chr  "The Department of Mechanical Engineering is responsible for teaching and research in mechanical engineering at "| __truncated__ "Imperial College Business School is a global business school located in London. The business school was opened "| __truncated__ "Exhibition Road is a street in South Kensington, London which is home to several major museums and academic est"| __truncated__ "Imperial College School of Medicine (ICSM) is the medical school of Imperial College London in England, and one"| __truncated__ ...
 $ elevation   : chr  "20" "18" "19" "24" ...
 $ feature     : chr  "edu" "edu" "landmark" "edu" ...
 $ lng         : chr  "-0.1746" "-0.1748" "-0.17425" "-0.1757" ...
 $ distance    : chr  "0.0335" "0.0494" "0.0508" "0.0558" ...
 $ rank        : chr  "81" "91" "90" "96" ...
 $ lang        : chr  "en" "en" "en" "en" ...
 $ title       : chr  "Department of Mechanical Engineering, Imperial College London" "Imperial College Business School" "Exhibition Road" "Imperial College School of Medicine" ...
 $ lat         : chr  "51.498524" "51.4992" "51.4989722222222" "51.4987" ...
 $ wikipediaUrl: chr  "en.wikipedia.org/wiki/Department_of_Mechanical_Engineering%2C_Imperial_College_London" "en.wikipedia.org/wiki/Imperial_College_Business_School" "en.wikipedia.org/wiki/Exhibition_Road" "en.wikipedia.org/wiki/Imperial_College_School_of_Medicine" ...
 $ countryCode : chr  NA "AE" NA "GB" ...
 $ thumbnailImg: chr  NA NA NA NA ...
 $ geoNameId   : chr  NA NA NA NA ...</code></pre>
</div>
</div>
<p>To confirm we have the correct location we can inspect the title of the first five neighbours.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">imperial_neighbours<span class="sc" style="color: #5E5E5E;">$</span>title[<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Department of Mechanical Engineering, Imperial College London"             
[2] "Imperial College Business School"                                          
[3] "Exhibition Road"                                                           
[4] "Imperial College School of Medicine"                                       
[5] "Department of Civil and Environmental Engineering, Imperial College London"</code></pre>
</div>
</div>
<p>Nothing too surprising here, mainly departments of the college and Exhibition Road, which runs along one side of the campus. These sorts of check are important - I initially forgot the minus in the longitude and was getting results in East London!</p>
</section>
<section id="what-if-there-is-no-wrapper" class="level2">
<h2 class="anchored" data-anchor-id="what-if-there-is-no-wrapper">What if there is no wrapper?</h2>
<p>If there is not a wrapper function, we can still access APIs fairly easilty using the <code>{httr}</code> package.</p>
<p>We will look at an example using <a href="http://www.omdbapi.com/">OMDb</a>, which is an open source version of <a href="https://www.imdb.com/">IMDb</a>, to get information about the movie Mean Girls.</p>
<p>To use the OMDB API you will once again need to <a href="http://www.omdbapi.com/apikey.aspx">request a free API key</a>, follow a verification link and add your API key to your <code>.Rprofile</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># Add this to .Rprofile, pasting in your own API key</span></span>
<span id="cb10-2"><span class="fu" style="color: #4758AB;">options</span>(<span class="at" style="color: #657422;">OMDB_API_Key =</span> <span class="st" style="color: #20794D;">"PASTE YOUR KEY HERE"</span>)</span></code></pre></div>
</div>
<p>You can then restart R and safely access your API key from within your R session.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># Load your API key into the current R session,</span></span>
<span id="cb11-2">ombd_api_key <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">getOption</span>(<span class="st" style="color: #20794D;">"OMDB_API_Key"</span>)</span></code></pre></div>
</div>
<p>Using the documentation for the API, requests have URLs of the following form, where terms in angular brackets should be replaced by you.</p>
<pre><code>http://www.omdbapi.com/?t=&lt;TITLE&gt;&amp;y=&lt;YEAR&gt;&amp;plot=&lt;LENGTH&gt;&amp;r=&lt;FORMAT&gt;&amp;apikey=&lt;API_KEY&gt;</code></pre>
<p>With a little bit of effort, we can write a function that composes this type of request URL for us. We will using the <code>{glue}</code> package to help us join strings together.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;">#' Compose search requests for the OMBD API</span></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;">#'</span></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;">#' @param title String defining title to search for. Words are separated by "+".</span></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;">#' @param year String defining release year to search for</span></span>
<span id="cb13-5"><span class="co" style="color: #5E5E5E;">#' @param plot String defining whether "short" or "full" plot is returned</span></span>
<span id="cb13-6"><span class="co" style="color: #5E5E5E;">#' @param format String defining return format. One of "json" or "xml"</span></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;">#' @param api_key String defining your OMDb API key.</span></span>
<span id="cb13-8"><span class="co" style="color: #5E5E5E;">#'</span></span>
<span id="cb13-9"><span class="co" style="color: #5E5E5E;">#' @return String giving a OMBD search request URL</span></span>
<span id="cb13-10"><span class="co" style="color: #5E5E5E;">#'</span></span>
<span id="cb13-11"><span class="co" style="color: #5E5E5E;">#' @examples </span></span>
<span id="cb13-12"><span class="co" style="color: #5E5E5E;">#' omdb_url("mean+girls", "2004", "short", "json", getOption(OMBD_API_Key))</span></span>
<span id="cb13-13"><span class="co" style="color: #5E5E5E;">#' </span></span>
<span id="cb13-14">omdb_url <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(title, year, plot, format, api_key) {</span>
<span id="cb13-15">  glue<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">glue</span>(<span class="st" style="color: #20794D;">"http://www.omdbapi.com/?t={title}&amp;y={year}&amp;plot={plot}&amp;r={format}&amp;apikey={api_key}"</span>)</span>
<span id="cb13-16">}</span></code></pre></div>
</div>
<p>Running the example we get:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">mean_girls_request <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">omdb_url</span>(</span>
<span id="cb14-2">  <span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"mean+girls"</span>,</span>
<span id="cb14-3">  <span class="at" style="color: #657422;">year =</span>  <span class="st" style="color: #20794D;">"2004"</span>,</span>
<span id="cb14-4">  <span class="at" style="color: #657422;">plot =</span> <span class="st" style="color: #20794D;">"short"</span>,</span>
<span id="cb14-5">  <span class="at" style="color: #657422;">format =</span>  <span class="st" style="color: #20794D;">"json"</span>,</span>
<span id="cb14-6">  <span class="at" style="color: #657422;">api_key =</span>  <span class="fu" style="color: #4758AB;">getOption</span>(<span class="st" style="color: #20794D;">"OMDB_API_Key"</span>))</span></code></pre></div>
</div>
<p>We can then use the <code>{httr}</code> package to construct our request and store the response we get.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">response <span class="ot" style="color: #003B4F;">&lt;-</span> httr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">GET</span>(<span class="at" style="color: #657422;">url =</span> mean_girls_request)</span>
<span id="cb15-2">httr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">status_code</span>(response)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 200</code></pre>
</div>
</div>
<p>Thankfully it was a success! If you get a 401 error code here, check that you have clicked the activation link for your API key.</p>
<p>The full structure of the response is quite complicated, but we can easily extract the requested data using <code>content()</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">httr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">content</span>(response)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$Title
[1] "Mean Girls"

$Year
[1] "2004"

$Rated
[1] "PG-13"

$Released
[1] "30 Apr 2004"

$Runtime
[1] "97 min"

$Genre
[1] "Comedy"

$Director
[1] "Mark Waters"

$Writer
[1] "Rosalind Wiseman, Tina Fey"

$Actors
[1] "Lindsay Lohan, Jonathan Bennett, Rachel McAdams"

$Plot
[1] "Cady Heron is a hit with The Plastics, the A-list girl clique at her new school, until she makes the mistake of falling for Aaron Samuels, the ex-boyfriend of alpha Plastic Regina George."

$Language
[1] "English, German, Vietnamese, Swahili"

$Country
[1] "United States, Canada"

$Awards
[1] "7 wins &amp; 25 nominations"

$Poster
[1] "https://m.media-amazon.com/images/M/MV5BMjE1MDQ4MjI1OV5BMl5BanBnXkFtZTcwNzcwODAzMw@@._V1_SX300.jpg"

$Ratings
$Ratings[[1]]
$Ratings[[1]]$Source
[1] "Internet Movie Database"

$Ratings[[1]]$Value
[1] "7.1/10"


$Ratings[[2]]
$Ratings[[2]]$Source
[1] "Rotten Tomatoes"

$Ratings[[2]]$Value
[1] "84%"


$Ratings[[3]]
$Ratings[[3]]$Source
[1] "Metacritic"

$Ratings[[3]]$Value
[1] "66/100"



$Metascore
[1] "66"

$imdbRating
[1] "7.1"

$imdbVotes
[1] "385,107"

$imdbID
[1] "tt0377092"

$Type
[1] "movie"

$DVD
[1] "21 Sep 2004"

$BoxOffice
[1] "$86,058,055"

$Production
[1] "N/A"

$Website
[1] "N/A"

$Response
[1] "True"</code></pre>
</div>
</div>
</section>
<section id="wrapping-up" class="level2">
<h2 class="anchored" data-anchor-id="wrapping-up">Wrapping up</h2>
<p>We have learned a bit more about how the internet works, the benefits of using an API to share data and how to request data from Open APIs.</p>
<p>When obtaining data from the internet it’s vital that you keep your credentials safe, and that don’t do more work than is needed.</p>
<ul>
<li><p>Keep your API keys out of your code. Store them in your <code>.Rprofile</code> (and make sure this is not under version control!)</p></li>
<li><p>Scraping is always a last resort. Is there an API already?</p></li>
<li><p>Writing your own code to access an API can be more painful than necessary.</p></li>
<li><p>Don’t repeat other people, if a suitable wrapper exists then use it.</p></li>
</ul>


</section>

<div id="quarto-appendix"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{varty2022,
  author = {Zak Varty},
  title = {Aquiring {Data} via an {API}},
  date = {2022-12-14},
  url = {https://www.zakvarty.com/blog/2022-12-14-apis-and-httr},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-varty2022" class="csl-entry quarto-appendix-citeas">
Zak Varty. 2022. <span>“Aquiring Data via an API.”</span> December 14,
2022. <a href="https://www.zakvarty.com/blog/2022-12-14-apis-and-httr">https://www.zakvarty.com/blog/2022-12-14-apis-and-httr</a>.
</div></div></section></div> ]]></description>
  <category>data science</category>
  <category>data acquisition</category>
  <category>tutorial</category>
  <guid>https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/index.html</guid>
  <pubDate>Wed, 14 Dec 2022 00:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/apis-and-httr.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Git: putting your new feature out into the world.</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2022-12-13-git-remote-branches/index.html</link>
  <description><![CDATA[ 



<div class="small_left">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2022-12-13-git-remote-branches/git-logo.png" alt="git logo. This is a red-orange square with rounded corners, it is rotated by 45 degrees so that it is standing on one corner and has a cut-out design representing a branching graph."></p>
</div>
<p>So you’ve added a new feature to your project. You were responsible and didn’t do this in the <code>main</code> branch. Congrats on being responsible, have some brownie points.</p>
<p>Now how the heck to you get everything moved across and delete your <code>new-feature</code> branch?</p>
<section id="check-that-your-local-main-is-up-to-date." class="level2">
<h2 class="anchored" data-anchor-id="check-that-your-local-main-is-up-to-date.">1. Check that your local <code>main</code> is up to date.</h2>
<p>Be in the <code>main</code> branch and pull any changes to the remote <code>main</code> branch.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;">git</span> checkout main </span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">git</span> pull origin main</span></code></pre></div>
<p>This might require you to resolve some merge conflicts, but these should be pretty straightforward if you are following a branch-and-merge workflow.</p>
</section>
<section id="check-that-you-remote-new-feature-is-up-to-date." class="level2">
<h2 class="anchored" data-anchor-id="check-that-you-remote-new-feature-is-up-to-date.">2. Check that you remote <code>new-feature</code> is up to date.</h2>
<p>We might mess things up while merging. Let’s make sure that if that happens we can get back to this good position with our new feature.</p>
<pre><code>git checkout new-feature
git status</code></pre>
<p>If needed: <code>add</code>, <code>commit</code> and <code>push</code>.</p>
</section>
<section id="merge-any-changes-to-main-into-your-local-new-feature-branch" class="level2">
<h2 class="anchored" data-anchor-id="merge-any-changes-to-main-into-your-local-new-feature-branch">3. Merge any changes to <code>main</code> into your local <code>new-feature</code> branch</h2>
<p>Next, we will make sure we have any changes to <code>main</code> moved across to our local <code>new-feature</code> branch.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="fu" style="color: #4758AB;">git</span> merge main</span></code></pre></div>
<p>This might again require resolving some merge conflicts. Keep calm and take tea breaks are required.</p>
</section>
<section id="commit-and-push-to-remote." class="level2">
<h2 class="anchored" data-anchor-id="commit-and-push-to-remote.">4. Commit and push to remote.</h2>
<p>Now that we have our local <code>new-feature</code> branch compatible with the remote <code>main</code> branch, lets push that to the remote.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="fu" style="color: #4758AB;">git</span> add <span class="op" style="color: #5E5E5E;">&lt;</span>YOUR_FILES_TO_COMMIT<span class="op" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;">git</span> commit <span class="at" style="color: #657422;">-m</span> <span class="st" style="color: #20794D;">"merge changes to main in preparation for PR"</span></span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;">git</span> push</span></code></pre></div>
</section>
<section id="open-a-pull-request-on-github" class="level2">
<h2 class="anchored" data-anchor-id="open-a-pull-request-on-github">5. Open a pull request on Github</h2>
<p>Wait for someone to review approve your new feature (or wait a few hours/days and do it yourself for a solo project).</p>
</section>
<section id="delete-the-local-branch" class="level2">
<h2 class="anchored" data-anchor-id="delete-the-local-branch">6. Delete the local branch</h2>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="fu" style="color: #4758AB;">git</span> checkout main</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;">git</span> branch <span class="at" style="color: #657422;">--delete</span> new-feature</span></code></pre></div>
</section>
<section id="delete-the-remote-branch" class="level2">
<h2 class="anchored" data-anchor-id="delete-the-remote-branch">7. Delete the remote branch</h2>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="fu" style="color: #4758AB;">git</span> push origin <span class="at" style="color: #657422;">--delete</span> new-feature</span></code></pre></div>
<p>On older versions of git (&lt; 1.7.0) you might need to use the alternative syntax below. This is effectively pushing nothing to the new-feature branch of origin.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="fu" style="color: #4758AB;">git</span> push origin :new-feature</span></code></pre></div>
<p>Bam! You did it! Your <code>new-feature</code> is out there in the wild, making the world a marginally better place.</p>


</section>

 ]]></description>
  <category>workflows</category>
  <category>git</category>
  <guid>https://www.zakvarty.com/blog/2022-12-13-git-remote-branches/index.html</guid>
  <pubDate>Tue, 13 Dec 2022 00:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2022-12-13-git-remote-branches/git-logo.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Web Scraping with {rvest}</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2022-12-01-rvest/index.html</link>
  <description><![CDATA[ 



<section id="aquiring-data-part-1---scraping-webpage-data-using-rvest" class="level2">
<h2 class="anchored" data-anchor-id="aquiring-data-part-1---scraping-webpage-data-using-rvest">Aquiring Data: Part 1 - Scraping webpage data using {rvest}</h2>
<div class="medium_right">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2022-12-01-rvest/rvest-logo.png" alt="Hexagonal logo of the rvest package; a sickle cutting wheat on a red background."></p>
</div>
<p>You can’t always rely on tidy, tabular data to land on your desk. Sometimes you are going to have to go out and gather data for yourself.</p>
<p>I’m not suggesting you will need to do this manually, but you will likely need to get data from the internet that’s been made publicly or privately available to you.</p>
<p>This might be information from a webpage that you gather yourself, or data shared with you by a collaborator using an API.</p>
<p>In this first blog post we will cover the basics of scraping webpages, following the <a href="https://cran.r-project.org/web/packages/rvest/vignettes/rvest.html#fnref3">vignette</a> for the {rvest} package.</p>
</section>
<section id="what-is-a-webpage" class="level2">
<h2 class="anchored" data-anchor-id="what-is-a-webpage">What is a webpage?</h2>
<p>Before we can even hope to get data from a webpage, we first need to understand <em>what</em> a webpage is.</p>
<p>Webpages are written in a similar way to LaTeX: the content and styling of webpages are handled separately and are coded using plain text files.</p>
<p>In fact, websites go one step further than LaTeX. The content and styling of websites are written in different files and in different languages. HTML (HyperText Markup Language) is used to write the content and then CSS (Cascading Style Sheets) are used to control the appearance of that content when it’s displayed to the user.</p>
</section>
<section id="html" class="level2">
<h2 class="anchored" data-anchor-id="html">HTML</h2>
<p>A basic HTML page with no styling applied might look something like this:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb1-1"><span class="kw" style="color: #003B4F;">&lt;html&gt;</span></span>
<span id="cb1-2"><span class="kw" style="color: #003B4F;">&lt;head&gt;</span></span>
<span id="cb1-3">  <span class="kw" style="color: #003B4F;">&lt;title&gt;</span>Page title<span class="kw" style="color: #003B4F;">&lt;/title&gt;</span></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;">&lt;/head&gt;</span></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;">&lt;body&gt;</span></span>
<span id="cb1-6">  <span class="kw" style="color: #003B4F;">&lt;h1</span> <span class="er" style="color: #AD0000;">id</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">'first'</span><span class="kw" style="color: #003B4F;">&gt;</span>A level 1 heading<span class="kw" style="color: #003B4F;">&lt;/h1&gt;</span></span>
<span id="cb1-7">  <span class="kw" style="color: #003B4F;">&lt;p&gt;</span>Hello World!<span class="kw" style="color: #003B4F;">&lt;/p&gt;</span></span>
<span id="cb1-8">  <span class="kw" style="color: #003B4F;">&lt;p&gt;</span>Here is some plain text <span class="dv" style="color: #AD0000;">&amp;amp;</span> <span class="kw" style="color: #003B4F;">&lt;b&gt;</span>some bold text.<span class="kw" style="color: #003B4F;">&lt;/b&gt;&lt;/p&gt;</span></span>
<span id="cb1-9">  <span class="kw" style="color: #003B4F;">&lt;img</span> <span class="er" style="color: #AD0000;">src</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">'myimg.png'</span> <span class="er" style="color: #AD0000;">width</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">'100'</span> <span class="er" style="color: #AD0000;">height</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">'100'</span><span class="kw" style="color: #003B4F;">&gt;</span></span>
<span id="cb1-10"><span class="kw" style="color: #003B4F;">&lt;/body&gt;</span></span></code></pre></div>
<section id="html-elements" class="level3">
<h3 class="anchored" data-anchor-id="html-elements">HTML elements</h3>
<!-- for presentation 
```{.html}
#| code-line-numbers: "3"
<html>
<head>
  <title>Page title</title>
</head>
<body>
  <h1 id='first'>A level 1 heading</h1>
  <p>Hello World!</p>
  <p>Here is some plain text &amp; <b>some bold text.</b></p>
  <img src='myimg.png' width='100' height='100'>
</body>
```
-->
<p>Just like XML data files, HTML has a hierarchical structure. This structure is crafted using HTML elements. Each HTML element is made up of of a start tag, optional attributes, an end tag.</p>
<p>We can see each of these in the first level header, where <code>&lt;h1&gt;</code> is the opening tag, <code>id='first'</code> is an additional attribute and <code>&lt;/h1&gt;</code> is the closing tag. Everything between the opening and closing tag are the contents of that element. There are also some special elements that consist of only a single tag and its optional attributes. An example of this is the <code>&lt;img&gt;</code> tag.</p>
<p>Since <code>&lt;</code> and <code>&gt;</code> are used for start and end tags, you can’t write them directly in an HTML document. Instead, you have to use escape characters. This sounds fancy, but it’s just an alternative way to write characters that serve some special function within a language.</p>
<p>You can write greater than <code>&amp;gt;</code> and less than as <code>&amp;lt;</code>. You might notice that those escapes use an ampersand (&amp;). This means that if you want a literal ampersand on your webpage, you have to escape too using <code>&amp;amp;</code>.</p>
<p>There are a wide range of possible HTML tags and escapes. We’ll cover the most common tags in this lecture and you don’t need to worry about escapes too much because <code>{rvest}</code> will automatically handle them for you.</p>
</section>
<section id="important-html-elements" class="level3">
<h3 class="anchored" data-anchor-id="important-html-elements">Important HTML Elements</h3>
<p>In all, there are in excess of 100 HTML elements. The most important ones for you to know about are:</p>
<ul>
<li><p>The <code>&lt;html&gt;</code> element, that must enclose every HTML page. The <code>&lt;html&gt;</code> element must have two child elements within it. The <code>&lt;head&gt;</code> element contains metadata about the document, like the page title that is shown in the browser tab and the CSS style sheet that should be applied. The <code>&lt;body&gt;</code> element then contains all of the content that you see in the browser.</p></li>
<li><p>Block elements are used to give structure to the page. These are elements like headings, sub-headings and so on from <code>&lt;h1&gt;</code> all the way down to <code>&lt;h6&gt;</code>. This category also contains paragraph elements <code>&lt;p&gt;</code>, ordered lists <code>&lt;ol&gt;</code> unordered lists <code>&lt;ul&gt;</code>.</p></li>
<li><p>Finally, inline tags like <code>&lt;b&gt;</code> for bold, <code>&lt;i&gt;</code> for italics, and <code>&lt;a&gt;</code> for hyperlinks are used to format text inside block elements.</p></li>
</ul>
<p>When you come across a tag that you’ve never seen before, you can find out what it does with just a little bit of googling. A good resource here is the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML">MDN Web Docs</a> which are produced by Mozilla, the company that makes the Firefox web browser. The <a href="https://www.w3schools.com/html/default.asp">W3schools website</a> is another great resource for web development and coding resources more generally.</p>
</section>
</section>
<section id="html-attributes" class="level2">
<h2 class="anchored" data-anchor-id="html-attributes">HTML Attributes</h2>
<p>We’ve seen one example of a header with an additional attribute. More generally, all tags can have named attributes. These attributes are contained within the opening tag and look something like:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb2-1"><span class="kw" style="color: #003B4F;">&lt;tag</span> <span class="er" style="color: #AD0000;">attribute1</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">'value1'</span> <span class="er" style="color: #AD0000;">attribute2</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">'value2'</span><span class="kw" style="color: #003B4F;">&gt;</span>element contents<span class="kw" style="color: #003B4F;">&lt;/tag&gt;</span></span></code></pre></div>
<p>Two of the most important attributes are <code>id</code> and <code>class</code>. These attributes are used in conjunction with the CSS file to control the visual appearance of the page. These are often very useful to identify the elements that you are interested in when scraping data off a page.</p>
</section>
<section id="css-selectors" class="level2">
<h2 class="anchored" data-anchor-id="css-selectors">CSS Selectors</h2>
<p>The Cascading Style Sheet is used to describe how your HTML content will be displayed. To do this, CSS has it’s own system for selecting elements of a webpage, called CSS selectors.</p>
<p>CSS selectors define patterns for locating the HTML elements that a particular style should be applied to. A happy side-effect of this is that they can sometimes be very useful for scraping, because they provide a concise way of describing which elements you want to extract.</p>
<p>CSS Selectors can work on the level of an element type, a class, or a tag and these can be used in a nested (or <em>cascading</em>) way.</p>
<ul>
<li><p>The <code>p</code> selector will select all paragraph <code>&lt;p&gt;</code> elements.</p></li>
<li><p>The <code>.title</code> selector will select all elements with class <code>“title”</code>.</p></li>
<li><p>The <code>p.special</code> selector will select all<code>&lt;p&gt;</code> elements with class <code>“special”</code>.</p></li>
<li><p>The <code>#title</code> selector will select the element with the id attribute <code>“title”</code>.</p></li>
</ul>
<p>When you want to select a single element <code>id</code> attributes are particularly useful because that <em>must</em> be unique within a html document. Unfortunately, this is only helpful if the developer added an <code>id</code> attribute to the element(s) you want to scrape!</p>
<p>If you want to learn more CSS selectors I recommend starting with the fun <a href="https://flukeout.github.io/">CSS dinner tutorial</a> to build a base of knowledge and then using the <a href="https://www.w3schools.com/css/default.asp">W3schools resources</a> as a reference to explore more webpages in the wild.</p>
</section>
<section id="which-attributes-and-selectors-do-you-need" class="level2">
<h2 class="anchored" data-anchor-id="which-attributes-and-selectors-do-you-need">Which Attributes and Selectors Do You Need?</h2>
<p>To scrape data from a webpage, you first have to identify the tag and attribute combinations that you are interested in gathering.</p>
<p>To find your elements of interest, you have three options. These go from hardest to easiest but also from most to least robust.</p>
<ul>
<li>right click + “inspect page source” (F12)</li>
<li>right click + “inspect”</li>
<li>Rvest <a href="https://rvest.tidyverse.org/articles/selectorgadget.html">Selector Gadget</a> (very useful but fallible)</li>
</ul>
<p>Inspecting the source of some familiar websites can be a useful way to get your head around these concepts. Beware though that sophisticated webpages can be quite intimidating. A good place to start is with simpler, static websites such as personal websites, rather than the dynamic webpages of online retailers or social media platforms.</p>
</section>
<section id="reading-html-with-rvest" class="level2">
<h2 class="anchored" data-anchor-id="reading-html-with-rvest">Reading HTML with <code>{rvest}</code></h2>
<p>With <code>{rvest}</code>, reading a html page can be as simple as loading in tabular data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">html <span class="ot" style="color: #003B4F;">&lt;-</span> rvest<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">read_html</span>(<span class="st" style="color: #20794D;">"https://www.zakvarty.com/professional/teaching.html"</span>)</span></code></pre></div>
</div>
<p>The <code>class</code> of the resulting object is an <code>xml_document</code>. This type of object is from the low-level package <code>{xml2}</code>, which allows you to read xml files into R.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">class</span>(html)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "xml_document" "xml_node"    </code></pre>
</div>
</div>
<p>We can see that this object is split into several components: first is some metadata on the type of document we have scraped, followed by the head and then the body of that html document.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">html</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{html_document}
&lt;html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en"&gt;
[1] &lt;head&gt;\n&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8 ...
[2] &lt;body class="nav-fixed"&gt;\n\n&lt;div id="quarto-search-results"&gt;&lt;/div&gt;\n  &lt;he ...</code></pre>
</div>
</div>
<p>We have several possible approaches to extracting information from this document.</p>
</section>
<section id="extracting-html-elements" class="level2">
<h2 class="anchored" data-anchor-id="extracting-html-elements">Extracting HTML elements</h2>
<p>In <code>{rvest}</code> you can extract a single element with <code>html_element()</code>, or all matching elements with <code>html_elements()</code>. Both functions take a document object and one or more CSS selectors as inputs.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;">library</span>(rvest)</span>
<span id="cb8-2">html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_elements</span>(<span class="st" style="color: #20794D;">"h1"</span>)</span>
<span id="cb8-3"><span class="do" style="color: #5E5E5E;
font-style: italic;">## {xml_nodeset (1)}</span></span>
<span id="cb8-4"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [1] &lt;h1&gt;Teaching&lt;/h1&gt;</span></span>
<span id="cb8-5">html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_elements</span>(<span class="st" style="color: #20794D;">"h2"</span>)</span>
<span id="cb8-6"><span class="do" style="color: #5E5E5E;
font-style: italic;">## {xml_nodeset (2)}</span></span>
<span id="cb8-7"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [1] &lt;h2 id="toc-title"&gt;On this page&lt;/h2&gt;</span></span>
<span id="cb8-8"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [2] &lt;h2 class="anchored" data-anchor-id="course-history"&gt;Course History&lt;/h2&gt;</span></span>
<span id="cb8-9">html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_elements</span>(<span class="st" style="color: #20794D;">"p"</span>)</span>
<span id="cb8-10"><span class="do" style="color: #5E5E5E;
font-style: italic;">## {xml_nodeset (2)}</span></span>
<span id="cb8-11"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [1] &lt;p&gt;I am fortunate to have had the opportunity to teach in a variety of ro ...</span></span>
<span id="cb8-12"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [2] &lt;p&gt;I am an associate fellow of the Higher Education Academy, which you ca ...</span></span></code></pre></div>
</div>
<p>You can also combine and nest these selectors. For example you might want to extract all links that are within paragraphs <em>and</em> all second level headers.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_elements</span>(<span class="st" style="color: #20794D;">"p a,h2"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{xml_nodeset (3)}
[1] &lt;h2 id="toc-title"&gt;On this page&lt;/h2&gt;
[2] &lt;a href="https://www.advance-he.ac.uk/fellowship/associate-fellowship"&gt;he ...
[3] &lt;h2 class="anchored" data-anchor-id="course-history"&gt;Course History&lt;/h2&gt;</code></pre>
</div>
</div>
</section>
<section id="extracting-data-from-html-elements" class="level2">
<h2 class="anchored" data-anchor-id="extracting-data-from-html-elements">Extracting Data From HTML Elements</h2>
<p>Now that we’ve got the elements we care about extracted from the complete document. But how do we get the data we need out of those elements?</p>
<p>You’ll usually get the data from either the contents of the HTML element or else from one of it’s attributes. If you’re really lucky, the data you need will already be formatted for you as a HTML table or list.</p>
<section id="extracting-text" class="level3">
<h3 class="anchored" data-anchor-id="extracting-text">Extracting text</h3>
<p>The functions <code>rvest::html_text()</code> and <code>rvest::html_text2()</code> can be used to extract the plain text contents of an HTML element.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;">html_elements</span>(<span class="st" style="color: #20794D;">"#teaching li"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;">html_text2</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "one-to-one tuition for high school students;"                                   
[2] "running workshops and computer labs for undergraduate and postgraduate modules;"
[3] "delivering short courses on scientific communication and LaTeX;"                
[4] "supervising an undergraduate research project;"                                 
[5] "developing and lecturing postgraduate modules in statistics and data science."  </code></pre>
</div>
</div>
<p>The difference between <code>html_text()</code> and <code>html_text2()</code> is in how they handle whitespace. In HTML whitespace and line breaks have very little influence over how the code is interpreted by the computer (this is similar to R but very different from Python). <code>html_text()</code> will extract the text as it is in the raw html, while <code>html_text2()</code> will do its best to extract the text in a way that gives you something similar to what you’d see in the browser.</p>
</section>
<section id="extracting-attributes" class="level3">
<h3 class="anchored" data-anchor-id="extracting-attributes">Extracting Attributes</h3>
<p>Attributes are also used to record information that you might like to collect. For example, the destination of links are stored in the <code>href</code> attribute and the source of images is stored in the <code>src</code> attribute.</p>
<p>As an example of this, consider trying to extract the twitter link from the icon in the page footer. This is quite tricky to locate in the html source, so I used the <a href="https://rvest.tidyverse.org/articles/selectorgadget.html">Selector Gadget</a> to help find the correct combination of elements.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_element</span>(<span class="st" style="color: #20794D;">".compact:nth-child(1) .nav-link"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{html_node}
&lt;a class="nav-link" href="https://www.twitter.com/zakvarty"&gt;
[1] &lt;i class="bi bi-twitter" role="img"&gt;\n&lt;/i&gt;</code></pre>
</div>
</div>
<p>To extract the <code>href</code> attribute from the scraped element, we use the <code>rvest::html_attr()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-2">  <span class="fu" style="color: #4758AB;">html_elements</span>(<span class="st" style="color: #20794D;">".compact:nth-child(1) .nav-link"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-3">  <span class="fu" style="color: #4758AB;">html_attr</span>(<span class="st" style="color: #20794D;">"href"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "https://www.twitter.com/zakvarty"</code></pre>
</div>
</div>
<p><strong>Note:</strong> <code>rvest::html_attr()</code> will always return a character string (or list of character strings). If you are extracting an attribute that describes a quantity, such as the width of an image, you’ll need to convert this from a string to your required data type. For example, of the width is measures in pixels you might use <code>as.integer()</code>.</p>
</section>
<section id="extracting-tables" class="level3">
<h3 class="anchored" data-anchor-id="extracting-tables">Extracting tables</h3>
<p>HTML tables are composed in a similar, nested manner to LaTeX tables.</p>
<p>There are four main elements to know about that make up an HTML table:</p>
<ul>
<li><code>&lt;table&gt;</code>,</li>
<li><code>&lt;tr&gt;</code> (table row),</li>
<li><code>&lt;th&gt;</code> (table heading),</li>
<li><code>&lt;td&gt;</code> (table data).</li>
</ul>
<p>Here’s our simple example data, formatted as an HTML table:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">html_2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">minimal_html</span>(<span class="st" style="color: #20794D;">"</span></span>
<span id="cb17-2"><span class="st" style="color: #20794D;">  &lt;table&gt;</span></span>
<span id="cb17-3"><span class="st" style="color: #20794D;">    &lt;tr&gt;</span></span>
<span id="cb17-4"><span class="st" style="color: #20794D;">      &lt;th&gt;Name&lt;/th&gt;</span></span>
<span id="cb17-5"><span class="st" style="color: #20794D;">      &lt;th&gt;Number&lt;/th&gt;</span></span>
<span id="cb17-6"><span class="st" style="color: #20794D;">    &lt;/tr&gt;</span></span>
<span id="cb17-7"><span class="st" style="color: #20794D;">    &lt;tr&gt;</span></span>
<span id="cb17-8"><span class="st" style="color: #20794D;">      &lt;td&gt;A&lt;/td&gt;</span></span>
<span id="cb17-9"><span class="st" style="color: #20794D;">      &lt;td&gt;1&lt;/td&gt;</span></span>
<span id="cb17-10"><span class="st" style="color: #20794D;">    &lt;/tr&gt;</span></span>
<span id="cb17-11"><span class="st" style="color: #20794D;">    &lt;tr&gt;</span></span>
<span id="cb17-12"><span class="st" style="color: #20794D;">      &lt;td&gt;B&lt;/td&gt;</span></span>
<span id="cb17-13"><span class="st" style="color: #20794D;">      &lt;td&gt;2&lt;/td&gt;</span></span>
<span id="cb17-14"><span class="st" style="color: #20794D;">    &lt;/tr&gt;</span></span>
<span id="cb17-15"><span class="st" style="color: #20794D;">    &lt;tr&gt;</span></span>
<span id="cb17-16"><span class="st" style="color: #20794D;">      &lt;td&gt;C&lt;/td&gt;</span></span>
<span id="cb17-17"><span class="st" style="color: #20794D;">      &lt;td&gt;3&lt;/td&gt;</span></span>
<span id="cb17-18"><span class="st" style="color: #20794D;">    &lt;/tr&gt;</span></span>
<span id="cb17-19"><span class="st" style="color: #20794D;">  &lt;/table&gt;</span></span>
<span id="cb17-20"><span class="st" style="color: #20794D;">  "</span>)</span></code></pre></div>
</div>
<p>Since tables are a common way to store data, <code>{rvest}</code> includes a useful function <code>html_table()</code> that converts directly from an HTML table into a tibble.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">html_2 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;">html_element</span>(<span class="st" style="color: #20794D;">"table"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-3">  <span class="fu" style="color: #4758AB;">html_table</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 2
  Name  Number
  &lt;chr&gt;  &lt;int&gt;
1 A          1
2 B          2
3 C          3</code></pre>
</div>
</div>
<p>Applying this to our real scraped data we can easily extract the table of taught courses.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;">html_element</span>(<span class="st" style="color: #20794D;">"table"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-3">  <span class="fu" style="color: #4758AB;">html_table</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 25 × 3
   Year      Course                                   Role                      
   &lt;chr&gt;     &lt;chr&gt;                                    &lt;chr&gt;                     
 1 "2021-22" Supervised Learning                      Lecturer                  
 2 ""        Ethics in Data Science I                 Lecturer                  
 3 ""        Ethics in Data Science II                Lecturer                  
 4 "—"       —                                        —                         
 5 "2020-21" MATH562/582: Extreme Value Theory        Lecturer                  
 6 ""        MATH331: Bayesian Inference              Graduate teaching assista…
 7 ""        MATH330: Likelihood Inference            Graduate teaching assista…
 8 "2019-20" DSCI485: Introduction to LaTeX           Co-leading short course   
 9 ""        MATH566: Longitudinal Data Analysis      Graduate teaching assista…
10 "2018-19" STOR-i Internship: Introduction to LaTeX Co-leading short course   
# … with 15 more rows</code></pre>
</div>
</div>
</section>
</section>
<section id="tip-for-building-tibbles" class="level2">
<h2 class="anchored" data-anchor-id="tip-for-building-tibbles">Tip for Building Tibbles</h2>
<p>When scraping data from a webpage, your end-goal is typically going to be constructing a data.frame or a tibble.</p>
<p>If you are following our description of tidy data, you’ll want each row to correspond some repeated unit on the HTML page. In this case, you should</p>
<ol type="1">
<li>Use <code>html_elements()</code> to select the elements that contain each observation unit;</li>
<li>Use <code>html_element()</code> to extract the variables from each of those observations.</li>
</ol>
<p>Taking this approach guarantees that you’ll get the same number of values for each variable, because <code>html_element()</code> always returns the same number of outputs as inputs. This is vital when you have missing data - when not every observation unit has a value for every variable of interest.</p>
<p>As an example, consider this extract of text about the <a href="https://dplyr.tidyverse.org/reference/starwars.html#ref-examples">starwars dataset</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">starwars_html <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">minimal_html</span>(<span class="st" style="color: #20794D;">"</span></span>
<span id="cb22-2"><span class="st" style="color: #20794D;">  &lt;ul&gt;</span></span>
<span id="cb22-3"><span class="st" style="color: #20794D;">    &lt;li&gt;&lt;b&gt;C-3PO&lt;/b&gt; is a &lt;i&gt;droid&lt;/i&gt; that weighs &lt;span class='weight'&gt;167 kg&lt;/span&gt;&lt;/li&gt;</span></span>
<span id="cb22-4"><span class="st" style="color: #20794D;">    &lt;li&gt;&lt;b&gt;R2-D2&lt;/b&gt; is a &lt;i&gt;droid&lt;/i&gt; that weighs &lt;span class='weight'&gt;96 kg&lt;/span&gt;&lt;/li&gt;</span></span>
<span id="cb22-5"><span class="st" style="color: #20794D;">    &lt;li&gt;&lt;b&gt;Yoda&lt;/b&gt; weighs &lt;span class='weight'&gt;66 kg&lt;/span&gt;&lt;/li&gt;</span></span>
<span id="cb22-6"><span class="st" style="color: #20794D;">    &lt;li&gt;&lt;b&gt;R4-P17&lt;/b&gt; is a &lt;i&gt;droid&lt;/i&gt;&lt;/li&gt;</span></span>
<span id="cb22-7"><span class="st" style="color: #20794D;">  &lt;/ul&gt;</span></span>
<span id="cb22-8"><span class="st" style="color: #20794D;">  "</span>)</span></code></pre></div>
</div>
<p>This is an unordered list where each list item corresponds to one observational unit (one character from the starwars universe). The name of the character is given in bold, the character species is specified in italics and the weight of the character is denoted by the <code>.weight</code> class. However, some characters have only a subset of these variables defined: for example Yoda has no species entry.</p>
<p>If we try to extract each element directly, our vectors of variable values are of different lengths. We don’t know where the missing values should be, so we can’t line them back up to make a tibble.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">starwars_html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_elements</span>(<span class="st" style="color: #20794D;">"b"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_text2</span>()</span>
<span id="cb23-2"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [1] "C-3PO"  "R2-D2"  "Yoda"   "R4-P17"</span></span>
<span id="cb23-3">starwars_html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_elements</span>(<span class="st" style="color: #20794D;">"i"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_text2</span>()</span>
<span id="cb23-4"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [1] "droid" "droid" "droid"</span></span>
<span id="cb23-5">starwars_html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_elements</span>(<span class="st" style="color: #20794D;">".weight"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_text2</span>()</span>
<span id="cb23-6"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [1] "167 kg" "96 kg"  "66 kg"</span></span></code></pre></div>
</div>
<p>What we should do instead is start by extracting all of the list item elements using <code>html_elements()</code>. Once we have done this, we can then use <code>html_element()</code> to extract each variable for all characters. This will pad with NAs, so that we can collate them into a tibble.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">starwars_characters <span class="ot" style="color: #003B4F;">&lt;-</span> starwars_html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_elements</span>(<span class="st" style="color: #20794D;">"li"</span>)</span>
<span id="cb24-2"></span>
<span id="cb24-3">starwars_characters <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_element</span>(<span class="st" style="color: #20794D;">"b"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_text2</span>()</span>
<span id="cb24-4"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [1] "C-3PO"  "R2-D2"  "Yoda"   "R4-P17"</span></span>
<span id="cb24-5">starwars_characters <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_element</span>(<span class="st" style="color: #20794D;">"i"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_text2</span>()</span>
<span id="cb24-6"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [1] "droid" "droid" NA      "droid"</span></span>
<span id="cb24-7">starwars_characters <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_element</span>(<span class="st" style="color: #20794D;">".weight"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_text2</span>()</span>
<span id="cb24-8"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [1] "167 kg" "96 kg"  "66 kg"  NA</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">tibble<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb25-2">  <span class="at" style="color: #657422;">name =</span> starwars_characters <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_element</span>(<span class="st" style="color: #20794D;">"b"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_text2</span>(),</span>
<span id="cb25-3">  <span class="at" style="color: #657422;">species =</span> starwars_characters <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_element</span>(<span class="st" style="color: #20794D;">"i"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_text2</span>(),</span>
<span id="cb25-4">  <span class="at" style="color: #657422;">weight =</span> starwars_characters <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_element</span>(<span class="st" style="color: #20794D;">".weight"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_text2</span>()</span>
<span id="cb25-5">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 3
  name   species weight
  &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt; 
1 C-3PO  droid   167 kg
2 R2-D2  droid   96 kg 
3 Yoda   &lt;NA&gt;    66 kg 
4 R4-P17 droid   &lt;NA&gt;  </code></pre>
</div>
</div>


</section>

<div id="quarto-appendix"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{varty2022,
  author = {Zak Varty},
  title = {Web {Scraping} with `\{Rvest\}`},
  date = {2022-12-01},
  url = {https://www.zakvarty.com/blog/2022-12-01-rvest},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-varty2022" class="csl-entry quarto-appendix-citeas">
Zak Varty. 2022. <span>“Web Scraping with `{Rvest}`.”</span> December 1,
2022. <a href="https://www.zakvarty.com/blog/2022-12-01-rvest">https://www.zakvarty.com/blog/2022-12-01-rvest</a>.
</div></div></section></div> ]]></description>
  <category>data science</category>
  <category>data acquisition</category>
  <category>tutorial</category>
  <guid>https://www.zakvarty.com/blog/2022-12-01-rvest/index.html</guid>
  <pubDate>Thu, 01 Dec 2022 00:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2022-12-01-rvest/rvest-logo.png" medium="image" type="image/png" height="167" width="144"/>
</item>
<item>
  <title>Good Enough Practices in Scientific Computing</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2022-10-19-good-enough-practices-in-scientific-computing/index.html</link>
  <description><![CDATA[ 



<!--Photo by <a href="https://unsplash.com/@qwitka?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Maksym Kaharlytskyi</a> on <a href="https://unsplash.com/s/photos/filing-cabinet?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a> -->
<section id="reading-summary" class="level2">
<h2 class="anchored" data-anchor-id="reading-summary">Reading Summary</h2>
<p><code>wilson2017good</code></p>
<p><strong>Title:</strong> <em>Good Enough Practices in Scientific Computing. {PLOS Computational Biology, 2017} (20 pages).</em></p>
<p><strong>Authors:</strong> <em>Greg Wilson, Jennifer Bryan, Karen Cranston, Justin Kitzes, Lex Nederbragt and Tracy K. Teal.</em></p>
<p><strong>Key words:</strong> <em>computing</em>, <em>research skills</em>, <em>reproducibilty</em>, <em>guides</em>.</p>
<p>In this paper by <span class="citation" data-cites="wilson2017good">Wilson et al. (2017)</span>, a collection of experienced researchers and instructors give simple ways to implement good computing practices during a research project. They do this by providing a list of concrete recommendations that every researcher can adopt, regardless of their current computational skills. This is important to help the transition toward open, documented and reproducible research. The article is aimed specifically at people who are new to computational research but also contains useful guidance for more experienced researchers.</p>
</section>
<section id="notes" class="level2">
<h2 class="anchored" data-anchor-id="notes">Notes</h2>
<p>This article describes some of the best-practices in software development and how those ideas can be implemented in a reasearch project. This focus here is on implementing these approaches without requiring reseachers to learn how to use lots of peripheral technologies (for example git and LaTeX / markdown).</p>
<p>An earlier paper “Best Practices for Scientifc Computing” <span class="citation" data-cites="wilson2014best">(Wilson et al. 2014)</span>, is aimed at those who have or would like to develop such peripheral skills.</p>
</section>
<section id="suggested-best-practices" class="level2">
<h2 class="anchored" data-anchor-id="suggested-best-practices">Suggested Best Practices</h2>
<p>Best practices are grouped into 6 main themes.</p>
<section id="data-management" class="level3">
<h3 class="anchored" data-anchor-id="data-management">1. Data Management</h3>
<section id="create-the-data-you-wish-to-see-in-the-world" class="level4">
<h4 class="anchored" data-anchor-id="create-the-data-you-wish-to-see-in-the-world">Create the data you wish to see in the world</h4>
<p>Raw data should be created in a format that is ammenable to analysis and where multiple tables are used, a unique identifer used to link each record across these tables.</p>
</section>
<section id="keep-it-backed-up-keep-it-intact" class="level4">
<h4 class="anchored" data-anchor-id="keep-it-backed-up-keep-it-intact">Keep it backed up, keep it intact</h4>
<p>This raw data should be backed up in more than one location and preserved during the analysis (i.e.&nbsp;<strong>not</strong> directly edited). When cleaning, handling and modelling the data keep a record of all steps used.</p>
</section>
<section id="share-the-data" class="level4">
<h4 class="anchored" data-anchor-id="share-the-data">Share the data</h4>
<p>To allow your future self (and others) to access and cite your hard won data, submit it to a reputable DOI-issuing repository.</p>
</section>
</section>
<section id="software" class="level3">
<h3 class="anchored" data-anchor-id="software">2. Software</h3>
<section id="script-files" class="level4">
<h4 class="anchored" data-anchor-id="script-files">Script files</h4>
<p>Start each script with a brief explanatory comment of its purpose and a description of any dependencies.</p>
<p>Within scripts, ruthlessly eliminate duplication. Do this by creating functions for any repeated operations and provide simple examples of how those functions work.</p>
<p>When making functions and variables, give them meaningful names. As rule of thumb: fuctions are verbs, variables are nouns.</p>
<p>If you need your script to perform different actions, control this behaviour programmatically rather than by commenting/uncommenting sections of code.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Uncomment for weekly reports</span></span>
<span id="cb1-2">output_dir <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"weekly_reports/"</span>,year,<span class="st" style="color: #20794D;">"/"</span>,week_of_year,<span class="st" style="color: #20794D;">"/"</span>)</span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;"># Uncomment for annual reports</span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;">#output_dir &lt;- paste0("annual_reports/",year,"/")</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">report_type <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"weekly"</span></span>
<span id="cb2-2">year <span class="ot" style="color: #003B4F;">=</span> <span class="dv" style="color: #AD0000;">2022</span></span>
<span id="cb2-3">week_of_year <span class="ot" style="color: #003B4F;">=</span> <span class="dv" style="color: #AD0000;">21</span></span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="cf" style="color: #003B4F;">if</span> (report_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"weekly"</span>) {</span>
<span id="cb2-6">  output_dir <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"weekly_reports/"</span>,year,<span class="st" style="color: #20794D;">"/"</span>,week_of_year,<span class="st" style="color: #20794D;">"/"</span>)</span>
<span id="cb2-7">} <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (report_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"annual"</span>) {</span>
<span id="cb2-8">  output_dir <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"annual_reports/"</span>,year,<span class="st" style="color: #20794D;">"/"</span>)</span>
<span id="cb2-9">} <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb2-10">  <span class="fu" style="color: #4758AB;">stop</span>(<span class="st" style="color: #20794D;">"report_type should be 'weekly' or 'annual'."</span>)</span>
<span id="cb2-11">}</span></code></pre></div>
</div>
<p>Submit the final code for your research project to to a reputable DOI-issuing repository.</p>
</section>
<section id="external-code" class="level4">
<h4 class="anchored" data-anchor-id="external-code">External Code</h4>
<p>Before writing your own code, check if someone else got there first. Are there well-maintained software libraries that already do what you need?</p>
<p>If so, test the code (extensively!) before relying on it. Keep a record of what you have tested and add to this as you find awkward edge cases.</p>
</section>
</section>
<section id="collaboration" class="level3">
<h3 class="anchored" data-anchor-id="collaboration">3. Collaboration</h3>
<section id="collaborating-within-your-team" class="level4">
<h4 class="anchored" data-anchor-id="collaborating-within-your-team">Collaborating within your team</h4>
<p>Create a single file called <code>README</code> giving an overview of your project. This should describe aim of the project and how to get started working with the data/code/writing. A good rule of thumb is to write this as though it were for either a new-starter on your team. Future you will thank you!</p>
<p>Create a shared to-do list for the project in a file called <code>TODO</code> and decide on how you will communicate during the project. For example, what channels will you use for group meetings, quick questions, assigning tasks and setting deadlines?</p>
</section>
<section id="opening-up-to-the-wider-world" class="level4">
<h4 class="anchored" data-anchor-id="opening-up-to-the-wider-world">Opening up to the wider world</h4>
<p>Add another file called <code>LICENSE</code> giving the licensing information for the project. This says who can use it and for what purposes. No license implies you are keeping all rights and nobody is allowed to reuse or modify the materials. For more information on licenses see <a href="choosealicense.com">choosealicense.com</a> or <a href="https://opensource.guide/legal/#which-open-source-license-is-appropriate-for-my-project">The Open Source Guide</a>. Consult your company’s legal folks as needed.</p>
<p>Create a final file called <code>CITATION</code> letting other people know how they should give proper attribution to your work if they use it.</p>
</section>
</section>
<section id="project-organisation" class="level3">
<h3 class="anchored" data-anchor-id="project-organisation">4. Project Organisation</h3>
<p>Each project should be self-contained in its own directory (folder) and this directory should be named after the project.</p>
<p>Create subdirectories called:</p>
<ul>
<li><code>docs/</code> for all text documents associated with the project</li>
<li><code>data/raw/</code> for all raw data and metadata</li>
<li><code>data/derived/</code> for all data files during cleanup and analysis</li>
<li><code>src</code> for all code you write as part of this project</li>
<li><code>bin</code> for all external code or compiled programs that you use in this project</li>
</ul>
<p>When adding files and subdirectories within this structure, name these to clearly reflect their content or function.</p>
</section>
<section id="tracking-changes" class="level3">
<h3 class="anchored" data-anchor-id="tracking-changes">5. Tracking Changes</h3>
<p>As soon as any file is created by a human, back it up in multiple locations. If you make a huge file, then consult your IT folks about how to store and back it up.</p>
<p>Add a file called <code>CHANGELOG</code> to the docs subfolder. Use this to track all changes made within the project by all contributers, describing when the changes happened and why they were made.</p>
<p>Keep these changes as small as possible and share among collaborators frequently to avoid getting out of sync.</p>
<p>Make a Copy the entire project whenever a significant change has been made.</p>
<p>Better yet, use a dedicated version control system such as git if that is a realistic option.</p>
</section>
<section id="manuscripts" class="level3">
<h3 class="anchored" data-anchor-id="manuscripts">6. Manuscripts</h3>
<p>Pick one and stick to it within each project. The former has a much lower bar to entry and has most of the benefits of the latter (other than manuscripts being stored in the same place as everything else).</p>
<ol type="1">
<li><p>Write the manuscript using online tools with rich formatting, change tracking and reference management. (e.g.&nbsp;Overleaf, Google Docs)</p></li>
<li><p>Write the manuscript in plain text format the permits version control (e.g.&nbsp;tex + git or markdown + git)</p></li>
</ol>



</section>
</section>

<div id="quarto-appendix"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-wilson2014best" class="csl-entry">
Wilson, Greg, D. A. Aruliah, C. Titus Brown, Neil P. Chue Hong, Matt Davis, Richard T. Guy, Steven H. D. Haddock, et al. 2014. <span>“Best Practices for Scientific Computing.”</span> <em>PLOS Biology</em> 12 (January): 1–7. <a href="https://doi.org/10.1371/journal.pbio.1001745">https://doi.org/10.1371/journal.pbio.1001745</a>.
</div>
<div id="ref-wilson2017good" class="csl-entry">
Wilson, Greg, Jennifer Bryan, Karen Cranston, Justin Kitzes, Lex Nederbragt, and Tracy K Teal. 2017. <span>“Good Enough Practices in Scientific Computing.”</span> <em>PLoS Computational Biology</em> 13 (June): 1–20. <a href="https://doi.org/10.1371/journal.pcbi.1005510">https://doi.org/10.1371/journal.pcbi.1005510</a>.
</div>
</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section></div> ]]></description>
  <category>academic skills</category>
  <category>computing</category>
  <category>reproducible research</category>
  <category>reading summary</category>
  <guid>https://www.zakvarty.com/blog/2022-10-19-good-enough-practices-in-scientific-computing/index.html</guid>
  <pubDate>Tue, 18 Oct 2022 23:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2022-10-19-good-enough-practices-in-scientific-computing/gepisc-image.png" medium="image" type="image/png" height="68" width="144"/>
</item>
<item>
  <title>Data Journalism: Recreating a Professional Plot</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2022-10-15-BBC-temperature-plot/index.html</link>
  <description><![CDATA[ 



<section id="bbc-temperature-records" class="level1">
<h1>BBC Temperature Records</h1>
<p>On Friday 2022-10-14, the BBC Data Journalism Team released this excellent <a href="https://www.bbc.co.uk/news/science-environment-63244353">article</a> about the record temperatures in the UK during this summer’s heatwave. The article has some amazing data visualisations, and draws on a recent Met Office report.</p>
<p>I wanted to try and recreate one of the plots to test the limits of my ggplot knowledge. Since I had already tackled a stacked bar plot, I figured I might have a go at their dumbbell plot that shows the weather stations which exceeded their previous records largest margins.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.zakvarty.com/blog/2022-10-15-BBC-temperature-plot/bbc-temperature-records.png.webp" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">bbc temperature records dumbbell plot</figcaption><p></p>
</figure>
</div>
<p>I couldn’t find the data source, so spent <strong>far</strong> too long with a printed copy of the original figure to make my own version of the data set.</p>
<p>It took a while, but I got most of the way there with it and am happy with the final result.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.zakvarty.com/blog/2022-10-15-BBC-temperature-plot/zdv-temperature-records.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">my attempt at recreating the same plot</figcaption><p></p>
</figure>
</div>
<p>There were a few things that still have me stumped, that I might revisit at some later date:</p>
<ul class="task-list">
<li><input type="checkbox" disabled="" checked="">
Left aligning title and caption (Thanks to Jack Davison for this!)</li>
<li><input type="checkbox" disabled="">
Using gradients on multiple parts of the plot</li>
<li><input type="checkbox" disabled="">
Using the YeOrRd gradient, rather than default blues</li>
<li><input type="checkbox" disabled="">
Adding a non-BBC logo to the bottom right.</li>
</ul>
<p>If anyone with superior ggplot skills would like to help with those or give pointers, then I would be most grateful!</p>
<p>Code and figure down below ↓</p>
<div class="cell" data-fig.dpi="100">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Load packages ----</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(bbplot)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(showtext)</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;"># Import fonts ----</span></span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;">font_add_google</span>(<span class="at" style="color: #657422;">name =</span> <span class="st" style="color: #20794D;">"Roboto Slab"</span>, <span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">"roboto-slab"</span>)</span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;">font_add_google</span>(<span class="at" style="color: #657422;">name =</span> <span class="st" style="color: #20794D;">"Roboto"</span>, <span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">"roboto"</span>)</span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;">showtext_auto</span>()</span>
<span id="cb1-10">title_font <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"roboto-slab"</span></span>
<span id="cb1-11">font <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"roboto"</span></span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;"># Input data (estimated values from article) ---</span></span>
<span id="cb1-14">temperatures <span class="ot" style="color: #003B4F;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">tribble</span>(</span>
<span id="cb1-15">  <span class="sc" style="color: #5E5E5E;">~</span>location, <span class="sc" style="color: #5E5E5E;">~</span>max_prev, <span class="sc" style="color: #5E5E5E;">~</span>max_2022,</span>
<span id="cb1-16">  <span class="st" style="color: #20794D;">"Cranwell"</span>, <span class="fl" style="color: #AD0000;">36.6</span>, <span class="fl" style="color: #AD0000;">39.9</span>,</span>
<span id="cb1-17">  <span class="st" style="color: #20794D;">"Nottingham"</span>, <span class="fl" style="color: #AD0000;">36.0</span>, <span class="fl" style="color: #AD0000;">39.8</span>,</span>
<span id="cb1-18">  <span class="st" style="color: #20794D;">"Bramham"</span>, <span class="fl" style="color: #AD0000;">33.5</span>, <span class="fl" style="color: #AD0000;">39.8</span>,</span>
<span id="cb1-19">  <span class="st" style="color: #20794D;">"Sutton Boningon"</span>, <span class="fl" style="color: #AD0000;">35.9</span>, <span class="fl" style="color: #AD0000;">39.4</span>,</span>
<span id="cb1-20">  <span class="st" style="color: #20794D;">"Sheffield"</span>, <span class="fl" style="color: #AD0000;">35.6</span>, <span class="fl" style="color: #AD0000;">39.4</span>,</span>
<span id="cb1-21">  <span class="st" style="color: #20794D;">"Leeming"</span>, <span class="fl" style="color: #AD0000;">34.4</span>, <span class="fl" style="color: #AD0000;">38.7</span>,</span>
<span id="cb1-22">  <span class="st" style="color: #20794D;">"Goudhurst"</span>, <span class="fl" style="color: #AD0000;">34.7</span>, <span class="fl" style="color: #AD0000;">37.9</span>,</span>
<span id="cb1-23">  <span class="st" style="color: #20794D;">"Whitby"</span>, <span class="fl" style="color: #AD0000;">33.1</span>, <span class="fl" style="color: #AD0000;">37.8</span>,</span>
<span id="cb1-24">  <span class="st" style="color: #20794D;">"Bradford"</span>, <span class="fl" style="color: #AD0000;">33.9</span>, <span class="fl" style="color: #AD0000;">37.8</span>,</span>
<span id="cb1-25">  <span class="st" style="color: #20794D;">"High Mowthorpe"</span>, <span class="fl" style="color: #AD0000;">33.1</span>, <span class="fl" style="color: #AD0000;">37.2</span>,</span>
<span id="cb1-26">  <span class="st" style="color: #20794D;">"Blackpool"</span>, <span class="fl" style="color: #AD0000;">33.6</span>, <span class="fl" style="color: #AD0000;">37.2</span>,</span>
<span id="cb1-27">  <span class="st" style="color: #20794D;">"Durham"</span>, <span class="fl" style="color: #AD0000;">32.9</span>, <span class="fl" style="color: #AD0000;">36.9</span>,</span>
<span id="cb1-28">  <span class="st" style="color: #20794D;">"Preston"</span>, <span class="fl" style="color: #AD0000;">33.1</span>, <span class="fl" style="color: #AD0000;">36.5</span>,</span>
<span id="cb1-29">  <span class="st" style="color: #20794D;">"Morecambe"</span>, <span class="fl" style="color: #AD0000;">32.7</span>, <span class="fl" style="color: #AD0000;">36.4</span>,</span>
<span id="cb1-30">  <span class="st" style="color: #20794D;">"Stonyhurst"</span>, <span class="fl" style="color: #AD0000;">32.6</span>, <span class="fl" style="color: #AD0000;">36.3</span>,</span>
<span id="cb1-31">  <span class="st" style="color: #20794D;">"Keele"</span>, <span class="fl" style="color: #AD0000;">32.9</span>, <span class="fl" style="color: #AD0000;">36.2</span>,</span>
<span id="cb1-32">  <span class="st" style="color: #20794D;">"Bude"</span>, <span class="fl" style="color: #AD0000;">32.2</span>, <span class="fl" style="color: #AD0000;">36.1</span>,</span>
<span id="cb1-33">  <span class="st" style="color: #20794D;">"Buxton"</span>, <span class="fl" style="color: #AD0000;">32.7</span>, <span class="fl" style="color: #AD0000;">36.0</span>,</span>
<span id="cb1-34">  <span class="st" style="color: #20794D;">"Kielder Castle"</span>, <span class="fl" style="color: #AD0000;">29.6</span>, <span class="fl" style="color: #AD0000;">35.0</span>,</span>
<span id="cb1-35">  <span class="st" style="color: #20794D;">"Bala"</span>, <span class="fl" style="color: #AD0000;">31.9</span>, <span class="fl" style="color: #AD0000;">34.9</span></span>
<span id="cb1-36">)</span>
<span id="cb1-37"></span>
<span id="cb1-38"><span class="co" style="color: #5E5E5E;"># Data preparation ----</span></span>
<span id="cb1-39"></span>
<span id="cb1-40"><span class="do" style="color: #5E5E5E;
font-style: italic;">## For the points ----</span></span>
<span id="cb1-41">temperatures <span class="ot" style="color: #003B4F;">&lt;-</span> temperatures <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb1-42">  dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">max_ever =</span> <span class="fu" style="color: #4758AB;">pmax</span>(max_2022, max_prev))</span>
<span id="cb1-43"></span>
<span id="cb1-44">temperatures<span class="sc" style="color: #5E5E5E;">$</span>location <span class="ot" style="color: #003B4F;">&lt;-</span> forcats<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">fct_reorder</span>(<span class="fu" style="color: #4758AB;">as.factor</span>(temperatures<span class="sc" style="color: #5E5E5E;">$</span>location), <span class="at" style="color: #657422;">.x =</span> temperatures<span class="sc" style="color: #5E5E5E;">$</span>max_ever)</span>
<span id="cb1-45"></span>
<span id="cb1-46">temp_long <span class="ot" style="color: #003B4F;">&lt;-</span> tidyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">pivot_longer</span>(temperatures, <span class="at" style="color: #657422;">cols =</span> <span class="fu" style="color: #4758AB;">c</span>(max_2022, max_prev), <span class="at" style="color: #657422;">names_to =</span> <span class="st" style="color: #20794D;">"year"</span>,<span class="at" style="color: #657422;">values_to =</span> <span class="st" style="color: #20794D;">"temperature"</span>)</span>
<span id="cb1-47"></span>
<span id="cb1-48"><span class="do" style="color: #5E5E5E;
font-style: italic;">## For the bars ----</span></span>
<span id="cb1-49">n_interp <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">501</span></span>
<span id="cb1-50">temp_interpolated <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tibble</span>(<span class="fu" style="color: #4758AB;">rep</span>(<span class="cn" style="color: #8f5902;">NA</span>, n_interp<span class="sc" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">20</span>))</span>
<span id="cb1-51">temp_interpolated[[<span class="dv" style="color: #AD0000;">1</span>]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rep</span>(temperatures<span class="sc" style="color: #5E5E5E;">$</span>location, <span class="at" style="color: #657422;">each =</span> n_interp)</span>
<span id="cb1-52">temp_interpolated[[<span class="dv" style="color: #AD0000;">2</span>]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rep</span>(<span class="cn" style="color: #8f5902;">NA_real_</span>, n_interp<span class="sc" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">20</span>)</span>
<span id="cb1-53"><span class="fu" style="color: #4758AB;">names</span>(temp_interpolated) <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"location"</span>, <span class="st" style="color: #20794D;">"interp_value"</span>)</span>
<span id="cb1-54"><span class="cf" style="color: #003B4F;">for</span> (i <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">20</span>) {</span>
<span id="cb1-55">  temp_interpolated<span class="sc" style="color: #5E5E5E;">$</span>interp_value[(<span class="dv" style="color: #AD0000;">1</span> <span class="sc" style="color: #5E5E5E;">+</span> n_interp <span class="sc" style="color: #5E5E5E;">*</span> (i <span class="sc" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>))<span class="sc" style="color: #5E5E5E;">:</span>(n_interp<span class="sc" style="color: #5E5E5E;">*</span>i)] <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb1-56">    <span class="fu" style="color: #4758AB;">seq</span>(temperatures<span class="sc" style="color: #5E5E5E;">$</span>max_prev[i], temperatures<span class="sc" style="color: #5E5E5E;">$</span>max_2022[i], <span class="at" style="color: #657422;">length.out =</span> n_interp)</span>
<span id="cb1-57">}</span>
<span id="cb1-58"></span>
<span id="cb1-59">str_wrap_break <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x, break_limit) {</span>
<span id="cb1-60">  <span class="co" style="color: #5E5E5E;"># Function from {usefunc} by N Rennie (https://github.com/nrennie/usefunc)</span></span>
<span id="cb1-61">  <span class="fu" style="color: #4758AB;">sapply</span>(<span class="fu" style="color: #4758AB;">strwrap</span>(x, break_limit, <span class="at" style="color: #657422;">simplify =</span> <span class="cn" style="color: #8f5902;">FALSE</span>), paste, <span class="at" style="color: #657422;">collapse =</span> <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">"</span>)</span>
<span id="cb1-62">}</span>
<span id="cb1-63"></span>
<span id="cb1-64">title_string <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"Huge breaks from previous records in 2022"</span></span>
<span id="cb1-65">subtitle_string <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">str_wrap_break</span>(<span class="st" style="color: #20794D;">"Stations with largest gaps between previous and new records, ordered by highest new temperature"</span>,<span class="dv" style="color: #AD0000;">60</span>)</span>
<span id="cb1-66">caption_string <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"Only includes active weather stations with at least 50 years of observations"</span></span>
<span id="cb1-67"></span>
<span id="cb1-68"></span>
<span id="cb1-69"></span>
<span id="cb1-70"></span>
<span id="cb1-71"></span>
<span id="cb1-72">p <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-73">  <span class="fu" style="color: #4758AB;">geom_line</span>(<span class="at" style="color: #657422;">data =</span> temp_interpolated, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> interp_value, <span class="at" style="color: #657422;">y =</span> location, <span class="at" style="color: #657422;">color =</span> interp_value), <span class="at" style="color: #657422;">lwd =</span> <span class="dv" style="color: #AD0000;">3</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-74">  <span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb1-75">  <span class="fu" style="color: #4758AB;">geom_label</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"2022 record"</span>, <span class="at" style="color: #657422;">x =</span> <span class="fl" style="color: #AD0000;">38.7</span>, <span class="at" style="color: #657422;">y =</span> <span class="fl" style="color: #AD0000;">7.2</span>), <span class="at" style="color: #657422;">family =</span> font, <span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">6.5</span>, <span class="at" style="color: #657422;">label.size =</span> <span class="cn" style="color: #8f5902;">NA</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-76">  <span class="fu" style="color: #4758AB;">geom_curve</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">38</span>, <span class="at" style="color: #657422;">y =</span> <span class="fl" style="color: #AD0000;">7.9</span>, <span class="at" style="color: #657422;">xend =</span> <span class="fl" style="color: #AD0000;">36.9</span>, <span class="at" style="color: #657422;">yend =</span> <span class="fl" style="color: #AD0000;">8.9</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-77">  <span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb1-78">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Previous </span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;"> record"</span>, <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">31</span>, <span class="at" style="color: #657422;">y =</span> <span class="dv" style="color: #AD0000;">11</span>), <span class="at" style="color: #657422;">family =</span> font, <span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">6.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-79">  <span class="fu" style="color: #4758AB;">geom_curve</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">xend =</span> <span class="dv" style="color: #AD0000;">32</span>, <span class="at" style="color: #657422;">yend =</span> <span class="dv" style="color: #AD0000;">11</span>, <span class="at" style="color: #657422;">x =</span> <span class="fl" style="color: #AD0000;">32.9</span>, <span class="at" style="color: #657422;">y =</span> <span class="fl" style="color: #AD0000;">8.9</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-80">  <span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb1-81">  <span class="fu" style="color: #4758AB;">geom_label</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Biggest leap"</span>, <span class="at" style="color: #657422;">x =</span> <span class="fl" style="color: #AD0000;">33.7</span>, <span class="at" style="color: #657422;">y =</span> <span class="dv" style="color: #AD0000;">20</span>), <span class="at" style="color: #657422;">family =</span> font, <span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">6.5</span>, <span class="at" style="color: #657422;">label.size =</span> <span class="cn" style="color: #8f5902;">NA</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-82">  <span class="fu" style="color: #4758AB;">geom_label</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"6.3C"</span>, <span class="at" style="color: #657422;">x =</span> <span class="fl" style="color: #AD0000;">34.0</span>, <span class="at" style="color: #657422;">y =</span> <span class="dv" style="color: #AD0000;">19</span>), <span class="at" style="color: #657422;">family =</span> font, <span class="at" style="color: #657422;">fontface=</span><span class="st" style="color: #20794D;">"bold"</span>, <span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">6.5</span>, <span class="at" style="color: #657422;">label.size =</span> <span class="cn" style="color: #8f5902;">NA</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-83">  <span class="fu" style="color: #4758AB;">geom_curve</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">xend =</span> <span class="fl" style="color: #AD0000;">34.7</span>, <span class="at" style="color: #657422;">yend =</span> <span class="fl" style="color: #AD0000;">19.5</span>, <span class="at" style="color: #657422;">x =</span> <span class="fl" style="color: #AD0000;">35.7</span>, <span class="at" style="color: #657422;">y =</span> <span class="dv" style="color: #AD0000;">18</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-84">  <span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb1-85">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">data =</span> temp_long, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> temperature, <span class="at" style="color: #657422;">y =</span> location, <span class="at" style="color: #657422;">fill =</span> temperature), <span class="at" style="color: #657422;">shape =</span> <span class="dv" style="color: #AD0000;">21</span>, <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"black"</span>, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">6</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-86">  <span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb1-87">  <span class="fu" style="color: #4758AB;">scale_x_continuous</span>(<span class="at" style="color: #657422;">breaks =</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="dv" style="color: #AD0000;">30</span>, <span class="dv" style="color: #AD0000;">40</span>, <span class="at" style="color: #657422;">by =</span> <span class="fl" style="color: #AD0000;">2.5</span>),<span class="at" style="color: #657422;">labels =</span> <span class="fu" style="color: #4758AB;">paste0</span>(<span class="fu" style="color: #4758AB;">seq</span>(<span class="dv" style="color: #AD0000;">30</span>, <span class="dv" style="color: #AD0000;">40</span>, <span class="at" style="color: #657422;">by =</span> <span class="fl" style="color: #AD0000;">2.5</span>),<span class="st" style="color: #20794D;">"C"</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-88">  <span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb1-89">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> title_string,</span>
<span id="cb1-90">       <span class="at" style="color: #657422;">subtitle =</span> subtitle_string,</span>
<span id="cb1-91">       <span class="at" style="color: #657422;">caption =</span> caption_string) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-92">  <span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb1-93">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">plot.title =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">family=</span>title_font,</span>
<span id="cb1-94">                                  <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">28</span>,</span>
<span id="cb1-95">                                  <span class="at" style="color: #657422;">face=</span><span class="st" style="color: #20794D;">"bold"</span>,</span>
<span id="cb1-96">                                  <span class="at" style="color: #657422;">color=</span><span class="st" style="color: #20794D;">"#222222"</span>),</span>
<span id="cb1-97">        <span class="at" style="color: #657422;">plot.subtitle =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">family=</span>font,</span>
<span id="cb1-98">                                     <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">18</span>,</span>
<span id="cb1-99">                                     <span class="at" style="color: #657422;">margin=</span>ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">margin</span>(<span class="dv" style="color: #AD0000;">9</span>,<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">9</span>,<span class="dv" style="color: #AD0000;">0</span>)),</span>
<span id="cb1-100">        <span class="at" style="color: #657422;">plot.caption =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">family =</span> font, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">14</span>,<span class="at" style="color: #657422;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span>),</span>
<span id="cb1-101">        <span class="at" style="color: #657422;">plot.title.position =</span> <span class="st" style="color: #20794D;">'plot'</span>,</span>
<span id="cb1-102">        <span class="at" style="color: #657422;">plot.caption.position =</span> <span class="st" style="color: #20794D;">'plot'</span>,</span>
<span id="cb1-103">        <span class="at" style="color: #657422;">axis.title =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb1-104">        <span class="at" style="color: #657422;">axis.text =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">family=</span>font,</span>
<span id="cb1-105">                                          <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">18</span>,</span>
<span id="cb1-106">                                          <span class="at" style="color: #657422;">color=</span><span class="st" style="color: #20794D;">"grey47"</span>),</span>
<span id="cb1-107">        <span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"none"</span>,</span>
<span id="cb1-108">        <span class="at" style="color: #657422;">title =</span> <span class="fu" style="color: #4758AB;">element_text</span>(),</span>
<span id="cb1-109">        <span class="at" style="color: #657422;">axis.line.x =</span> <span class="fu" style="color: #4758AB;">element_line</span>(<span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">0.7</span>, <span class="at" style="color: #657422;">linetype =</span> <span class="st" style="color: #20794D;">"solid"</span>),</span>
<span id="cb1-110">        <span class="at" style="color: #657422;">axis.ticks.y =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb1-111">        <span class="at" style="color: #657422;">axis.ticks.length.x =</span> <span class="fu" style="color: #4758AB;">unit</span>(<span class="dv" style="color: #AD0000;">7</span>, <span class="at" style="color: #657422;">units =</span> <span class="st" style="color: #20794D;">"points"</span> ),</span>
<span id="cb1-112">        <span class="at" style="color: #657422;">axis.text.x =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">margin=</span><span class="fu" style="color: #4758AB;">margin</span>(<span class="at" style="color: #657422;">t =</span> <span class="dv" style="color: #AD0000;">15</span>, <span class="at" style="color: #657422;">b =</span> <span class="dv" style="color: #AD0000;">10</span>)),</span>
<span id="cb1-113">        <span class="at" style="color: #657422;">panel.grid.minor =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb1-114">        <span class="at" style="color: #657422;">panel.grid.major.y =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_line</span>(<span class="at" style="color: #657422;">color=</span><span class="st" style="color: #20794D;">"#cbcbcb"</span>),</span>
<span id="cb1-115">        <span class="at" style="color: #657422;">panel.grid.major.x =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb1-116">        <span class="at" style="color: #657422;">panel.background =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb1-117">  )</span>
<span id="cb1-118"></span>
<span id="cb1-119">p</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://www.zakvarty.com/blog/2022-10-15-BBC-temperature-plot/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid" alt="My dumbbell plot showing stations with the largest gaps between previous and new records, ordered by the highest new temperature." width="960"></p>
</div>
</div>


</section>

 ]]></description>
  <category>data visualisation</category>
  <guid>https://www.zakvarty.com/blog/2022-10-15-BBC-temperature-plot/index.html</guid>
  <pubDate>Fri, 14 Oct 2022 23:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2022-10-15-BBC-temperature-plot/zdv-temperature-records.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Tidy Tuesday: Ravelry Yarn</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2022-10-11-ravelry-tidy-tuesday/index.html</link>
  <description><![CDATA[ 



<p>For my first Tidy Tuesday I kept things simple with a stacked bar chart.</p>
<p>I have made several plots using <code>{ggplot2}</code> before, but this was my first attempt at making one aesthetically pleasing (forgive the pun).</p>
<p>When making this plot I learned about using custom font, colours, annotations and arrows from a lot of <a href="https://twitter.com/nrennie" title="Nicola Rennie - Twitter">@nrennie</a>’s past examples.</p>
<p>Code and figure down below ↓</p>
<div class="cell" data-fig.dpi="100">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Load Packages ----</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(tidyr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">library</span>(forcats)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;">library</span>(showtext)</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;"># Load Fonts ----</span></span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;">font_add_google</span>(<span class="at" style="color: #657422;">name =</span> <span class="st" style="color: #20794D;">"Indie Flower"</span>, <span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">"indie-flower"</span>)</span>
<span id="cb1-10"><span class="fu" style="color: #4758AB;">font_add_google</span>(<span class="at" style="color: #657422;">name =</span> <span class="st" style="color: #20794D;">"Permanent Marker"</span>, <span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">"marker"</span>)</span>
<span id="cb1-11"><span class="fu" style="color: #4758AB;">showtext_auto</span>()</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;"># Load Data ----</span></span>
<span id="cb1-14">url <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"https://github.com/rfordatascience/tidytuesday/raw/master/data/2022/2022-10-11/yarn.csv"</span></span>
<span id="cb1-15">yarn <span class="ot" style="color: #003B4F;">&lt;-</span> readr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">read_csv</span>(<span class="at" style="color: #657422;">file =</span> url)</span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;"># Data Handling ----</span></span>
<span id="cb1-18"></span>
<span id="cb1-19">other_weight_names <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb1-20">  <span class="st" style="color: #20794D;">"Thread"</span>,</span>
<span id="cb1-21">  <span class="st" style="color: #20794D;">"Cobweb"</span>,</span>
<span id="cb1-22">  <span class="st" style="color: #20794D;">"Jumbo"</span>,</span>
<span id="cb1-23">  <span class="st" style="color: #20794D;">"DK / Sport"</span>,</span>
<span id="cb1-24">  <span class="st" style="color: #20794D;">"Aran / Worsted"</span>,</span>
<span id="cb1-25">  <span class="st" style="color: #20794D;">"No weight specified"</span>)</span>
<span id="cb1-26"></span>
<span id="cb1-27">yarn_data <span class="ot" style="color: #003B4F;">&lt;-</span> yarn <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-28">  <span class="fu" style="color: #4758AB;">select</span>(yarn_weight_name) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-29">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">yarn_weight_name =</span> <span class="fu" style="color: #4758AB;">as.character</span>(yarn_weight_name)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-30">  <span class="fu" style="color: #4758AB;">mutate_at</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"yarn_weight_name"</span>), <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">replace_na</span>(.,<span class="st" style="color: #20794D;">"Missing"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-31">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">name =</span> <span class="fu" style="color: #4758AB;">fct_collapse</span>(yarn_weight_name, <span class="at" style="color: #657422;">Other =</span> other_weight_names)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-32">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">name =</span> <span class="fu" style="color: #4758AB;">fct_collapse</span>(name, <span class="st" style="color: #20794D;">"Double Knit"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"DK"</span>))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-33">  <span class="fu" style="color: #4758AB;">group_by</span>(name) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-34">  <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">value =</span> <span class="fu" style="color: #4758AB;">n</span>())</span>
<span id="cb1-35"></span>
<span id="cb1-36"><span class="co" style="color: #5E5E5E;"># Helper data frames for adding arrows to plot</span></span>
<span id="cb1-37">arrow_df_1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">x1 =</span> <span class="dv" style="color: #AD0000;">27000</span>, <span class="at" style="color: #657422;">x2 =</span> <span class="dv" style="color: #AD0000;">27000</span>, <span class="at" style="color: #657422;">y1 =</span> <span class="fl" style="color: #AD0000;">7.5</span>, <span class="at" style="color: #657422;">y2 =</span> <span class="fl" style="color: #AD0000;">10.4</span>)</span>
<span id="cb1-38">arrow_df_2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">x1 =</span> <span class="dv" style="color: #AD0000;">27000</span>, <span class="at" style="color: #657422;">x2 =</span> <span class="dv" style="color: #AD0000;">19000</span>, <span class="at" style="color: #657422;">y1 =</span> <span class="fl" style="color: #AD0000;">7.5</span>, <span class="at" style="color: #657422;">y2 =</span> <span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb1-39"></span>
<span id="cb1-40"><span class="co" style="color: #5E5E5E;"># Making Plot ----</span></span>
<span id="cb1-41"></span>
<span id="cb1-42">bar_colour <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"#483248"</span></span>
<span id="cb1-43">bg_colour <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"#FEFBEA"</span></span>
<span id="cb1-44">title_font <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"marker"</span></span>
<span id="cb1-45">main_font <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"indie-flower"</span></span>
<span id="cb1-46"></span>
<span id="cb1-47">yarn_plot <span class="ot" style="color: #003B4F;">&lt;-</span> yarn_data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-48">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">reorder</span>(name, value), <span class="at" style="color: #657422;">x =</span> value)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-49">  <span class="fu" style="color: #4758AB;">geom_bar</span>(<span class="at" style="color: #657422;">stat =</span> <span class="st" style="color: #20794D;">"identity"</span>, <span class="at" style="color: #657422;">fill =</span> bar_colour) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-50">  <span class="fu" style="color: #4758AB;">theme_void</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-51">  <span class="fu" style="color: #4758AB;">ggtitle</span>(<span class="st" style="color: #20794D;">" </span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;"> Yarn weights on Ravelry, ordered by frequency"</span>,<span class="at" style="color: #657422;">subtitle =</span> <span class="st" style="color: #20794D;">" "</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-52">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">axis.title =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb1-53">        <span class="at" style="color: #657422;">axis.text =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb1-54">        <span class="at" style="color: #657422;">axis.ticks =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb1-55">        <span class="at" style="color: #657422;">text =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">family =</span> main_font),</span>
<span id="cb1-56">        <span class="at" style="color: #657422;">plot.background =</span> <span class="fu" style="color: #4758AB;">element_rect</span>(<span class="at" style="color: #657422;">fill =</span> bg_colour, <span class="at" style="color: #657422;">colour =</span> bg_colour),</span>
<span id="cb1-57">        <span class="at" style="color: #657422;">panel.background =</span> <span class="fu" style="color: #4758AB;">element_rect</span>(<span class="at" style="color: #657422;">fill =</span> bg_colour, <span class="at" style="color: #657422;">colour =</span> bg_colour),</span>
<span id="cb1-58">        <span class="at" style="color: #657422;">plot.title =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">family =</span> title_font, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">22</span>, <span class="at" style="color: #657422;">hjust =</span> <span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb1-59">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-60">  <span class="fu" style="color: #4758AB;">lims</span>(<span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">28000</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-61">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> name, <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">200</span>),</span>
<span id="cb1-62">            <span class="at" style="color: #657422;">color =</span> bg_colour,</span>
<span id="cb1-63">            <span class="at" style="color: #657422;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb1-64">            <span class="at" style="color: #657422;">family =</span> main_font,</span>
<span id="cb1-65">            <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-66">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> value),</span>
<span id="cb1-67">            <span class="at" style="color: #657422;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb1-68">            <span class="at" style="color: #657422;">nudge_x =</span> <span class="dv" style="color: #AD0000;">200</span>,</span>
<span id="cb1-69">            <span class="at" style="color: #657422;">color =</span> bar_colour,</span>
<span id="cb1-70">            <span class="at" style="color: #657422;">family =</span> main_font,</span>
<span id="cb1-71">            <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">6</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-72">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"The most popular yarn weights </span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">  are 'Fingering' and 'Double Knit'"</span>,</span>
<span id="cb1-73">                <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">20000</span>,</span>
<span id="cb1-74">                <span class="at" style="color: #657422;">y =</span> <span class="fl" style="color: #AD0000;">6.7</span>),</span>
<span id="cb1-75">            <span class="at" style="color: #657422;">family =</span> main_font,</span>
<span id="cb1-76">            <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">7</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-77">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"There were more missing yarn weights </span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;"> than in all remaining categories combined"</span>,</span>
<span id="cb1-78">                <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">18000</span>,</span>
<span id="cb1-79">                <span class="at" style="color: #657422;">y =</span> <span class="fl" style="color: #AD0000;">1.6</span>),</span>
<span id="cb1-80">            <span class="at" style="color: #657422;">family =</span> main_font,</span>
<span id="cb1-81">            <span class="at" style="color: #657422;">size  =</span> <span class="dv" style="color: #AD0000;">7</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-82">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"}"</span>),</span>
<span id="cb1-83">            <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">7000</span>,</span>
<span id="cb1-84">            <span class="at" style="color: #657422;">y =</span> <span class="fl" style="color: #AD0000;">1.5</span>,</span>
<span id="cb1-85">            <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">19</span>,</span>
<span id="cb1-86">            <span class="at" style="color: #657422;">family =</span> main_font) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-87">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Tidy Tuesday 11 Oct 2022 | Data: Ravelry |  @zakvarty"</span>),</span>
<span id="cb1-88">            <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">29000</span>,</span>
<span id="cb1-89">            <span class="at" style="color: #657422;">y =</span> <span class="fl" style="color: #AD0000;">4.5</span>,</span>
<span id="cb1-90">            <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">5</span>,</span>
<span id="cb1-91">            <span class="at" style="color: #657422;">family =</span> main_font,</span>
<span id="cb1-92">            <span class="at" style="color: #657422;">angle =</span> <span class="dv" style="color: #AD0000;">270</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-93">  <span class="fu" style="color: #4758AB;">geom_curve</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> x1, <span class="at" style="color: #657422;">y =</span> y1, <span class="at" style="color: #657422;">xend =</span> x2, <span class="at" style="color: #657422;">yend =</span> y2),</span>
<span id="cb1-94">             <span class="at" style="color: #657422;">data =</span> arrow_df_1,</span>
<span id="cb1-95">             <span class="at" style="color: #657422;">arrow =</span> <span class="fu" style="color: #4758AB;">arrow</span>(<span class="at" style="color: #657422;">length =</span> <span class="fu" style="color: #4758AB;">unit</span>(<span class="fl" style="color: #AD0000;">0.03</span>, <span class="st" style="color: #20794D;">"npc"</span>))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-96">  <span class="fu" style="color: #4758AB;">geom_curve</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> x1, <span class="at" style="color: #657422;">y =</span> y1, <span class="at" style="color: #657422;">xend =</span> x2, <span class="at" style="color: #657422;">yend =</span> y2),</span>
<span id="cb1-97">             <span class="at" style="color: #657422;">data =</span> arrow_df_2,</span>
<span id="cb1-98">             <span class="at" style="color: #657422;">arrow =</span> <span class="fu" style="color: #4758AB;">arrow</span>(<span class="at" style="color: #657422;">length =</span> <span class="fu" style="color: #4758AB;">unit</span>(<span class="fl" style="color: #AD0000;">0.03</span>, <span class="st" style="color: #20794D;">"npc"</span>)))</span>
<span id="cb1-99"></span>
<span id="cb1-100">yarn_plot</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://www.zakvarty.com/blog/2022-10-11-ravelry-tidy-tuesday/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid" alt="Stacked bar chart of yarn weights on Ravelry. Bars are descending order by their frequency, with yarn-type labels written within the bars and count values to the right of the bars. Annotations indicate that the most popular yarn weights are 'Fingering' and 'Double Knit', and that there were more missing yarn weights than in all remaining categories combined." width="768"></p>
</div>
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Exported as 8x8 inch pdf and 800x700 png</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;"># (next time start by setting canvas size!)</span></span></code></pre></div>
</details>
</div>



 ]]></description>
  <category>data visualisation</category>
  <category>tidy tuesday</category>
  <guid>https://www.zakvarty.com/blog/2022-10-11-ravelry-tidy-tuesday/index.html</guid>
  <pubDate>Tue, 11 Oct 2022 23:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2022-10-11-ravelry-tidy-tuesday/2022-10-11-tidy-tuesday-ravelry.png" medium="image" type="image/png" height="126" width="144"/>
</item>
<item>
  <title>Recommended Statistics Books</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2022-10-10-statistics-books/index.html</link>
  <description><![CDATA[ 



<section id="statistics-and-statistical-inference-books" class="level2">
<h2 class="anchored" data-anchor-id="statistics-and-statistical-inference-books">Statistics and Statistical Inference Books</h2>
<div class="medium_right">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2022-10-10-statistics-books/blackwells-maths-section.jpg" alt="Photograph of the mathematics section of Blackwell's book shop in Oxford."></p>
</div>
<p>While teaching a course on supervised learning last year, several students asked about what books I would recommended on statistical inference and modelling.</p>
<p>For context, the students on this course are all highly numerate and studying at the postgraduate level. What makes this request challenging is the broad range of student backgrounds, some students had a maths degree but the majority are trained and work as engineers, physicists or computer scientists.</p>
<p>This variety in backgrounds and exposure to undergraduate level statistics made recommending a single book difficult. Instead, I compiled a list of books that I have enjoyed or found useful. For each book I tried to give some guidance on whether it might match with their current statistical knowledge and what they are trying to achieve. I gave a brief description of the level and target audience of each text, which I reproduce below.</p>
<p>When evaluating whether these resources might suit your current needs, I find it helpful to skim through a section on a topic that you already know (such as linear regression). This is usually the fastest and most reliable way to assess if the book is going to be a good fit for you.</p>
<p>This list is by no means exhaustive. If you know of any gems that I have not included in this list, please do let me know!</p>
<section id="mathematical-statistics-and-data-analysis---john-a.-rice" class="level3">
<h3 class="anchored" data-anchor-id="mathematical-statistics-and-data-analysis---john-a.-rice">Mathematical Statistics and Data Analysis - John A. Rice</h3>
<p><br></p>
<div class="small_left">
<p><img style="border-radius: 2%;" src="https://www.zakvarty.com/blog/2022-10-10-statistics-books/rice.jpg" alt="Cover of Mathematical Statistics and Data Analysis by John A. Rice."></p>
</div>
<p><span class="citation" data-cites="rice2007mathematical">Rice (2007)</span> covers the basics of probability and statistics usually contained in the first couple of undergraduate statistics courses. Generally the first university courses are a bit dry, building up the required knowledge to do interesting things. This book is slightly better than the average treatment in terms of readability and is fairly comprehensive, making it well suited as a reference text. This is a book full of all the stuff you might once have known but have now forgotten, or never studied before.</p>
<p><br></p>
</section>
<section id="essential-medical-statistics---betty-kirkwood-and-jonathan-sterne" class="level3">
<h3 class="anchored" data-anchor-id="essential-medical-statistics---betty-kirkwood-and-jonathan-sterne">Essential Medical Statistics - Betty Kirkwood and Jonathan Sterne</h3>
<div class="small_left">
<p><img style="border-radius: 2%;" src="https://www.zakvarty.com/blog/2022-10-10-statistics-books/kirkwood.jpg" alt="Cover of Essential Medical Statistics by Betty Kirkwood and Jonathan Sterne."></p>
</div>
<p><br></p>
<p><span class="citation" data-cites="kirkwood2010essential">Kirkwood and Sterne (2010)</span> focuses on more advanced topics in statistics, such as inference, hypothesis testing and modelling. However, it approaches these from an applications perspective. While all of the applications it uses are from medical statistics, the authors give sufficient context that you do not need to be familiar with this area before reading. This is a very readable book, with a moderate amount of mathematical detail. I find myself revisiting it quite often.</p>
<p><br></p>
</section>
<section id="core-statistics---simon-wood" class="level3">
<h3 class="anchored" data-anchor-id="core-statistics---simon-wood">Core Statistics - Simon Wood</h3>
<div class="small_left">
<p><img style="border-radius: 2%;" src="https://www.zakvarty.com/blog/2022-10-10-statistics-books/wood.jpg" alt="Cover of Core Statistics by Simon Wood."></p>
</div>
<p><span class="citation" data-cites="wood2015core">Wood (2015)</span> gives an introduction to the core topics in statistics aimed at new graduate-level students. It is mathematically dense but written in an approachable manner and (unsurprisingly) covers all the core ideas of statistics. This means that is often a good source to get an overview of a topic and to cover the key points in that area quickly. It is probably wise to supplement this with a more applied text to see worked examples and to a more detailed text for topics that you need to explore in greater detail.</p>
<p><br></p>
</section>
<section id="in-all-likelihood---yudi-pawitan" class="level3">
<h3 class="anchored" data-anchor-id="in-all-likelihood---yudi-pawitan">In All Likelihood - Yudi Pawitan</h3>
<div class="small_left">
<p><img style="border-radius: 2%;" src="https://www.zakvarty.com/blog/2022-10-10-statistics-books/pawitan.jpg" alt="Cover of In All Likelihood by Yudi Pawitan."></p>
</div>
<p><br></p>
<p><span class="citation" data-cites="pawitan2001all">Pawitan (2001)</span> focuses entirely on likelihood inference and covers both theory and applications in a great deal of detail. I highly recommend this to supplement frequentist topics covered in core statistics and the elements of statistical learning. It builds up from very little assumed knowledge but also goes on to cover some very advanced topics in later chapters.</p>
<p><br> <br></p>
</section>
<section id="kendalls-advanced-theory-of-statistics---alan-stuart-et-al." class="level3">
<h3 class="anchored" data-anchor-id="kendalls-advanced-theory-of-statistics---alan-stuart-et-al.">Kendall’s Advanced Theory of Statistics - Alan Stuart et al.</h3>
<div class="small_left">
<p><img style="border-radius: 2%;" src="https://www.zakvarty.com/blog/2022-10-10-statistics-books/kendall-1.webp" alt="Cover of Kendall's Advanced Theory of Statistics."></p>
</div>
<p><br></p>
<p><span class="citation" data-cites="kendall1987kendall">Kendall, Stuart, and Ord (1987)</span> is an alternative to In All Likelihood, aimed at a similar audience and level. Split over several volumes this is good to do a deep-dive into a particular topic but probably not one to try and read cover to cover!</p>
<p><br> <br> <br> <br></p>
</section>
</section>
<section id="bayesian-statistics" class="level2">
<h2 class="anchored" data-anchor-id="bayesian-statistics">Bayesian Statistics</h2>
<p>We only consider frequentist approaches to inference in this course. However, I would be remiss to not include some Bayesian texts and leave you with the impression that classical or frequentist approaches to statistics are the only option.</p>
<p>Many of the topics we cover in supervised learning can be considered from a Bayesian perspective. A Bayesian statistician does not treat our model parameters as fixed but unknown quantities, instead they consider the parameters as random variables and use probability distributions to describe their (or our) beliefs about the parameter values.</p>
<p>You might find the following books useful, either during or after the Bayesian inference course. The former is more theoretical, while the latter has a more applied focus.</p>
<p><em>Kendall’s advanced theory of statistics. Vol. 2B, Bayesian inference.</em> <span class="citation" data-cites="ohagan2004kendall">(O’Hagan and Forster 2004)</span></p>
<p><em>Bayesian Data Analysis - Gelman et al.</em> <span class="citation" data-cites="gelman2013bayesian">(Gelman et al. 2013)</span></p>



</section>

<div id="quarto-appendix"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-gelman2013bayesian" class="csl-entry">
Gelman, Andrew, John B Carlin, Hal S. Stern, David B Dunson, Aki Vehtari, and Donald B Rubin. 2013. <em>Bayesian Data Analysis</em>. 3rd ed. <span>Chapman and Hall</span>.
</div>
<div id="ref-kendall1987kendall" class="csl-entry">
Kendall, Maurice George, Alan Stuart, and J Keith Ord. 1987. <em>Kendall’s Advanced Theory of Statistics</em>. Oxford University Press.
</div>
<div id="ref-kirkwood2010essential" class="csl-entry">
Kirkwood, Betty R, and Jonathan AC Sterne. 2010. <em>Essential Medical Statistics</em>. John Wiley &amp; Sons.
</div>
<div id="ref-ohagan2004kendall" class="csl-entry">
O’Hagan, Anthony, and Jonathan J Forster. 2004. <em>Kendall’s Advanced Theory of Statistics, Volume 2b: Bayesian Inference</em>. Vol. 2b. Arnold.
</div>
<div id="ref-pawitan2001all" class="csl-entry">
Pawitan, Yudi. 2001. <em>In All Likelihood: Statistical Modelling and Inference Using Likelihood</em>. Oxford University Press.
</div>
<div id="ref-rice2007mathematical" class="csl-entry">
Rice, John A. 2007. <em>Mathematical Statistics and Data Analysis</em>. Thomson.
</div>
<div id="ref-wood2015core" class="csl-entry">
Wood, Simon N. 2015. <em>Core Statistics</em>. Cambridge University Press.
</div>
</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{varty2022,
  author = {Zak Varty},
  title = {Recommended {Statistics} {Books}},
  date = {2022-10-10},
  url = {https://www.zakvarty.com/blog/2022-10-10-statistics-books},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-varty2022" class="csl-entry quarto-appendix-citeas">
Zak Varty. 2022. <span>“Recommended Statistics Books.”</span> October
10, 2022. <a href="https://www.zakvarty.com/blog/2022-10-10-statistics-books">https://www.zakvarty.com/blog/2022-10-10-statistics-books</a>.
</div></div></section></div> ]]></description>
  <category>academic skills</category>
  <category>reading</category>
  <guid>https://www.zakvarty.com/blog/2022-10-10-statistics-books/index.html</guid>
  <pubDate>Sun, 09 Oct 2022 23:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2022-10-10-statistics-books/blackwells-maths-section.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Writing a rhetorical précis</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2022-10-07-rhetorical-precis/index.html</link>
  <description><![CDATA[ 



<p>Photo by <a href="https://unsplash.com/@qwitka?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Maksym Kaharlytskyi</a> on <a href="https://unsplash.com/s/photos/filing-cabinet?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a></p>
<section id="what-is-a-rhetorical-precis" class="level2">
<h2 class="anchored" data-anchor-id="what-is-a-rhetorical-precis">What is a rhetorical precis?</h2>
<div class="medium_right">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2022-10-07-rhetorical-precis/maksym-kaharlytskyi-Q9y3LRuuxmg-unsplash.jpg" alt="Photograph of a filing cabinet filled with library index cards."></p>
</div>
<p>A rhetorical precis is a short summary and analysis of a piece of writing, which considers both the content and the delivery of the piece.</p>
<p>A rhetorical precis serves to summarise and analyse the text through:</p>
<ul>
<li>an accurate bibliographic reference to the text,</li>
<li>a list of keywords relating to the text,</li>
<li>a highly structured four-sentence paragraph providing a summary and analysis of the text.</li>
</ul>
</section>
<section id="why-write-one" class="level2">
<h2 class="anchored" data-anchor-id="why-write-one">Why write one?</h2>
<p>Keeping a rhetorical precis for each text that you read is a fantasitc way to build the skills of active reading and succinct writing. A rhetorical precis is more informative than a bib entry and more easily reviewed <em>(read: waded through)</em> than a stack of annotated papers.</p>
<p>Taken collectively, a set of rhetorical precis summaries provide a reading record that can be a tremendously useful when trying to recall the contents of a paper or book long after you originally read it.</p>
</section>
<section id="how-to-store-them" class="level2">
<h2 class="anchored" data-anchor-id="how-to-store-them">How to store them?</h2>
<p>Writing and storing these reading summaries electronically can make them even more useful. This allows you to search for topics, target audiences or keywords.</p>
<p>For this reason it can be helpful to keep them all together in one word document or plain text file. Alternatively, having a single folder with each summary as a plain text or markdown file works well if you are comfortable with searching at the command line. The same can be achieved by writing these summaries within a reference manager, if that is something you are invested in already.</p>
</section>
<section id="definition" class="level2">
<h2 class="anchored" data-anchor-id="definition">Definition</h2>
<p>Just to prove that I’m not making all this up:</p>
<blockquote class="blockquote">
<p>A rhetorical precis analyzes both the content (the what) and the delivery (the how) of a unit of spoken or written discourse. It is a highly structured four-sentence paragraph blending summary and analysis. Each of the four sentences requires specific information; students are expected to use brief quotations (to convey a sense of the author’s style and tone) and to include a terminal bibliographic reference. Practicing this sort of writing fosters precision in both reading and writing, forcing a writer to employ a variety of sentence structures and to develop a discerning eye for connotative shades of meaning. <br> <strong>Attribution:</strong> <a href="https://courses.lumenlearning.com/englishcomp2kscopex92x2/chapter/rhetorical-precis/">lumenlearning.com</a></p>
</blockquote>
</section>
<section id="format" class="level2">
<h2 class="anchored" data-anchor-id="format">Format</h2>
<p>Four sentences summarising the aim of the work, how this is addressed, why it is important and a description of the target audience.</p>
<ol type="1">
<li>Name of author, [optional phrase describing author], genre and title of work, date in parentheses (additional publishing information in parentheses); a rhetorically accurate verb (such as “asserts,” “argues,” suggests,” “implies,” claims,” etc.); a THAT clause containing the major assertion or thesis statement of the work.</li>
<li>An explanation of <em>how</em> the author develops and/or supports the thesis, usually in chronological order.</li>
<li>A statement of the author’s purpose followed by an “in order to” phrase.</li>
<li>A description of the intended audience and/or the essay’s tone</li>
</ol>
</section>
<section id="a-self-indulgent-example" class="level2">
<h2 class="anchored" data-anchor-id="a-self-indulgent-example">A (self-indulgent) example</h2>
<p>Here is a rather self-indulgent example of a rhetorical precis.</p>
<hr>
<p><code>varty2021inference</code></p>
<p><strong>Title:</strong> <em>Inference for extreme earthquake magnitudes accounting for a time-varying measurement process. {ArXiV preprint, 2021} (20 pages).</em></p>
<p><strong>Authors:</strong> <em>Zak Varty, Jonathan Tawn, Peter Atkinson and Stijn Bierman.</em></p>
<p><strong>Key words:</strong> <em>extreme value</em>, <em>earthquake</em>, <em>threshold selection</em>, <em>magnitude of completion</em>, <em>seismology</em>, <em>bootstrap.</em></p>
<p>In this paper, Varty et al (2021) propose a new threshold selection method for modelling earthquake catalogues, where the magnitude distribution is stationary but detection of small events improves over time. The paper generalises the Gutenberg-Richter law to the GPD and uses metrics based on PP and QQ plots to balance between bias and variance when selecting a time-varying threshold. This procedure more than doubles the usable catalogue size for Groningen earthquakes and gives the first emprircal evidence that the magnitude distribution in this region has a finite upper end point. The paper is targeted at applied and research statisticians with an interest in EVT but would also be accessible to a statistically-minded seismologist.</p>
<hr>
</section>
<section id="a-template-for-new-entries" class="level2">
<h2 class="anchored" data-anchor-id="a-template-for-new-entries">A template for new entries</h2>
<hr>
<p><code>firstauthorYYYYkeyword</code></p>
<p><strong>Title:</strong> <em>Title goes here. {Journal, YYYY} (NN pages).</em></p>
<p><strong>Authors:</strong> <em>Author One, Author Two and Author Three. (optional affiliations)</em></p>
<p><strong>Key words:</strong> <em>key word 1</em>, <em>key word 2</em>, <em>key work 3</em>.</p>
<ol type="1">
<li><em>What</em> is the document and <em>what</em> does it say?</li>
<li><em>How</em> do they do / show this?</li>
<li><em>Why</em> are they bothering to do this in the first place?</li>
<li><em>Who</em> is the intended audience for this work?</li>
</ol>
<p>In this DOC_TYPE, AUTHOUR VERB that THESIS_STATEMENT. They DO/SHOW this by ACTIONS. This is important to PEOPLE because REASONS. This work would be useful when PEOPLE are doing ACTIVITY.</p>
<hr>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb1-1"><span class="in" style="color: #5E5E5E;">`firstauthorYYYYkeyword`</span></span>
<span id="cb1-2"></span>
<span id="cb1-3">**Title:** _Title goes here. {Journal, YYYY} (NN pages)._</span>
<span id="cb1-4"></span>
<span id="cb1-5">**Authors:** _Author One, Author Two and Author Three. (optional affiliations)_</span>
<span id="cb1-6"></span>
<span id="cb1-7">**Key words:** _key word 1_, _key word 2_, _key work 3_. </span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="ss" style="color: #20794D;">1. </span>_What_ is the document and _what_ does it say? </span>
<span id="cb1-10"><span class="ss" style="color: #20794D;">2. </span>_How_ do they do / show this?</span>
<span id="cb1-11"><span class="ss" style="color: #20794D;">3. </span>_Why_ are they bothering to do this in the first place?</span>
<span id="cb1-12"><span class="ss" style="color: #20794D;">4. </span>_Who_ is the intended audience for this work?</span>
<span id="cb1-13"></span>
<span id="cb1-14">In this DOC_TYPE, AUTHOUR VERB that THESIS<span class="sc" style="color: #5E5E5E;">\_</span>STATEMENT.</span>
<span id="cb1-15">They DO/SHOW this by ACTIONS. </span>
<span id="cb1-16">This is important to PEOPLE because REASONS. </span>
<span id="cb1-17">This work would be useful when PEOPLE are doing ACTIVITY.</span></code></pre></div>
<hr>


</section>

<div id="quarto-appendix"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{varty2022,
  author = {Zak Varty},
  title = {Writing a Rhetorical Précis},
  date = {2022-10-07},
  url = {https://www.zakvarty.com/blog/2022-10-07-rhetorical-precis},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-varty2022" class="csl-entry quarto-appendix-citeas">
Zak Varty. 2022. <span>“Writing a Rhetorical Précis.”</span> October 7,
2022. <a href="https://www.zakvarty.com/blog/2022-10-07-rhetorical-precis">https://www.zakvarty.com/blog/2022-10-07-rhetorical-precis</a>.
</div></div></section></div> ]]></description>
  <category>academic skills</category>
  <category>writing</category>
  <category>reading</category>
  <guid>https://www.zakvarty.com/blog/2022-10-07-rhetorical-precis/index.html</guid>
  <pubDate>Thu, 06 Oct 2022 23:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2022-10-07-rhetorical-precis/maksym-kaharlytskyi-Q9y3LRuuxmg-unsplash.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Setting up a quarto blog</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2022-09-26-adding-a-quarto-blog/index.html</link>
  <description><![CDATA[ 



<section id="what-am-i-trying-to-do" class="level1">
<h1>What am I trying to do?</h1>
<div class="medium_right">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2022-09-26-adding-a-quarto-blog/florian-klauer-mk7D-4UCfmg-unsplash.jpg" alt="Mechanical typewriter on white background"></p>
</div>
<p>My aim here is to set up a blog within an existing quarto website. I want the blog to be a sub-domain of the main site (<code>zakvarty.com/blog</code>) and for it to inherit the styling of that site.</p>
<p>It probably would have been easier to make the blog a sub domain (<code>blog.zakvarty.com</code>) and use two separate but matching style files to make those sites look coherent. However, I wanted to make the most of the built in search features on quarto websites and am a glutton for punishment.</p>
<p>Credit to <a href="https://ddimmery.com/">Drew Dimmery</a>, whose website I used alongside the <a href="https://quarto.org/docs/guide/">quarto docs</a> to work out how to get all these pieces working together.</p>
</section>
<section id="steps" class="level1">
<h1>Steps</h1>
<ol type="1">
<li>Create a subdirectory of the website called <code>blog/</code>. This has sub-folders for each blog post and will contain the files of metadata that are common to all blog posts (e.g.&nbsp;default settings for YAML headers information and a bibliography file). <!-- --></li>
<li>Create a <a href="https://quarto.org/docs/websites/website-listings.html">listing page</a> called <code>blog.qmd</code> in the root directory. This will become the blog “landing page” and what we will point to from the website header. <!-- --></li>
<li>Add a “Blog” header item to the <code>_quarto.yml</code> file for the website and set the <code>link:</code> for this to be <code>blog.qmd</code> <!-- --></li>
<li>Added a simple example post to the <code>blog/</code> directory. See for example my <a href="https://www.github.com/zakvarty/quarto-website/blog/hello-world/">hello-world</a> post. <!-- --></li>
<li>Adjust the default YAML parameters for the blog posts by making the file <code>blog/_metadata.yml</code>. These default values can be overwritten by specifying them again in the YAML header at the top of any individual post. For examples of what you might want to include see <a href="https://www.github.com/zakvarty/quarto-website/blog/_metadata.yml">my file</a> or the <a href="https://quarto.org/docs/projects/quarto-projects.html">projects section</a> of the quarto docs. <!-- --></li>
<li>Add a simple bibliography file, called <code>library.bib</code> or similar to the <code>blog/</code> directory. Set this as the default bibliography file for each blog post by adding <code>bibliography: ../library.bib</code> to <code>blog/_metadata.yml</code>. <!-- --></li>
<li>(optional) Create a post template so that you don’t have to memorise header fields. <!-- --></li>
<li>Set your “Hello, World!” and template posts to have <code>draft: true</code> in their headers. This will prevent them from showing up on your website. <!-- --></li>
<li>Set your “Hello, World!” and template posts to have <code>freeze: true</code> in their headers. This will prevent any code in them from re-running each time the website is rendered.</li>
</ol>
<p>Freezing the code within posts will improve the build speed, as well as make the website more stable and portable. See the quarto docs on <a href="https://quarto.org/docs/websites/website-blog.html#freezing-posts">freezing posts</a> for more details. My current plan is to have this as <code>false</code> by default and change to <code>true</code> on publication of each post.</p>
</section>
<section id="checking-that-references-work" class="level1">
<h1>Checking that references work</h1>
<p>I have set up a single bibtex file in which to store references for all posts. This lives in the <code>blog/</code> directory and is set as the default <code>bibliography</code> parameter for each post in the file <code>blog/_metadata.yml</code>.</p>
<p>This is an in-line reference to <span class="citation" data-cites="wan2020network">Wan et al. (2020)</span> written as <code>@citationkey</code>. Parenthetical references, such as <span class="citation" data-cites="wan2020network">(Wan et al. 2020)</span>, are written using <code>[@citationkey]</code>. These can be strung together by separating each citation key with a semicolon, for example <span class="citation" data-cites="wan2020network wan2020network">(Wan et al. 2020, 2020)</span>.</p>
<p>To let people know the license your work is under and how they should cite your blog posts you can use the <code>appendix-style</code> argument. This can be added to the YAML header of individual blog posts or you can specify a default value in <code>blog/_metadata.yml</code>. There are three options for this parameter:</p>
<ul>
<li><code>default</code> does some nice formatting and makes the text a bit smaller than the rest of the article;</li>
<li><code>plain</code> matches the style of the rest of your post;</li>
<li><code>none</code> does not add any citation details to the end of your post.</li>
</ul>
<p>I’m currently using some pretty hacky CSS to style this website so am limited to the latter two options for now. In the process of writing this article I stumbled across some neat SCSS that I hope will fix this issue that I have made for myself! [Update: I changed to SCSS and this is now fixed!]</p>
<p><em>Note: When adding references to your posts, make sure that the <code>site-URL</code> field in your website’s <code>quarto.yml</code> does not have a trailing slash - this will be copied into the reference and break the links.</em></p>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-wan2020network" class="csl-entry">
Wan, Phyllis, Tiandong Wang, Richard A Davis, and Sidney I Resnick. 2020. <span>“Are Extreme Value Estimation Methods Useful for Network Data?”</span> <em>Extremes</em> 23 (1): 171–95.
</div>
</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{varty2022,
  author = {Zak Varty},
  title = {Setting up a Quarto Blog},
  date = {2022-09-26},
  url = {https://www.zakvarty.com/blog/2022-09-26-adding-a-quarto-blog},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-varty2022" class="csl-entry quarto-appendix-citeas">
Zak Varty. 2022. <span>“Setting up a Quarto Blog.”</span> September 26,
2022. <a href="https://www.zakvarty.com/blog/2022-09-26-adding-a-quarto-blog">https://www.zakvarty.com/blog/2022-09-26-adding-a-quarto-blog</a>.
</div></div></section></div> ]]></description>
  <category>quarto</category>
  <category>tutorial</category>
  <guid>https://www.zakvarty.com/blog/2022-09-26-adding-a-quarto-blog/index.html</guid>
  <pubDate>Sun, 25 Sep 2022 23:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2022-09-26-adding-a-quarto-blog/florian-klauer-mk7D-4UCfmg-unsplash.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Hello, World!</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2022-09-26-hello-world/index.html</link>
  <description><![CDATA[ 



<section id="some-text" class="level1">
<h1>Some Text</h1>
<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry’s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>
</section>
<section id="some-code" class="level1">
<h1>Some Code</h1>
<div class="cell" data-layout-align="center">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">par</span>(<span class="at" style="color: #657422;">bg =</span> <span class="cn" style="color: #8f5902;">NA</span>)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">plot</span>(</span>
<span id="cb1-3">    <span class="at" style="color: #657422;">x =</span> mtcars<span class="sc" style="color: #5E5E5E;">$</span>mpg,</span>
<span id="cb1-4">    <span class="at" style="color: #657422;">y =</span> mtcars<span class="sc" style="color: #5E5E5E;">$</span>cyl,</span>
<span id="cb1-5">    <span class="at" style="color: #657422;">xlab =</span> <span class="st" style="color: #20794D;">"miles per gallon"</span>,</span>
<span id="cb1-6">    <span class="at" style="color: #657422;">ylab =</span> <span class="st" style="color: #20794D;">"cyclider count"</span>,</span>
<span id="cb1-7">    <span class="at" style="color: #657422;">pch =</span> <span class="dv" style="color: #AD0000;">16</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.zakvarty.com/blog/2022-09-26-hello-world/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>Quarto</category>
  <category>Templates</category>
  <guid>https://www.zakvarty.com/blog/2022-09-26-hello-world/index.html</guid>
  <pubDate>Sun, 25 Sep 2022 23:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2022-09-26-hello-world/hello-world-image.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
</span> to <span class="st" style="color: #20794D;">'.Rbuildignore'</span></span></code></pre></div>
</div>
<p>Our DESCRIPTION file should now look something like this.</p>
<div class="cell" data-filename="DESCRIPTION">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">Package<span class="sc" style="color: #5E5E5E;">:</span> eds</span>
<span id="cb10-2">Title<span class="sc" style="color: #5E5E5E;">:</span> What the Package <span class="fu" style="color: #4758AB;">Does</span> (One Line, Title Case)</span>
<span id="cb10-3">Version<span class="sc" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">0.9000</span></span>
<span id="cb10-4">Authors<span class="sc" style="color: #5E5E5E;">@</span>R<span class="sc" style="color: #5E5E5E;">:</span> </span>
<span id="cb10-5">    <span class="fu" style="color: #4758AB;">person</span>(<span class="st" style="color: #20794D;">"First"</span>, <span class="st" style="color: #20794D;">"Last"</span>, , <span class="st" style="color: #20794D;">"first.last@example.com"</span>, <span class="at" style="color: #657422;">role =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"aut"</span>, <span class="st" style="color: #20794D;">"cre"</span>),</span>
<span id="cb10-6">           <span class="at" style="color: #657422;">comment =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="at" style="color: #657422;">ORCID =</span> <span class="st" style="color: #20794D;">"YOUR-ORCID-ID"</span>))</span>
<span id="cb10-7">Description<span class="sc" style="color: #5E5E5E;">:</span> What the package <span class="fu" style="color: #4758AB;">does</span> (one paragraph).</span>
<span id="cb10-8">License<span class="sc" style="color: #5E5E5E;">:</span> MIT <span class="sc" style="color: #5E5E5E;">+</span> file LICENSE</span>
<span id="cb10-9">Encoding<span class="sc" style="color: #5E5E5E;">:</span> UTF<span class="dv" style="color: #AD0000;">-8</span></span>
<span id="cb10-10">Roxygen<span class="sc" style="color: #5E5E5E;">:</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">markdown =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb10-11">RoxygenNote<span class="sc" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">7</span>.<span class="fl" style="color: #AD0000;">2.3</span></span></code></pre></div>
</div>
<p>While we are here we can fill out a few additional details. Where the template used argument order to define a <code>person()</code>, I have named these explicitly and removed the ORCID field.</p>
<p>The package <code>Title</code> should be short and in title case, while the package <code>Description</code> can be more detailed (a single paragraph) and split over multiple lines. Anything beyond the first line should be indented with four spaces (<em>note:</em> four spaces != 1 tab).</p>
<div class="cell" data-filename="DESCRIPTION">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">Package<span class="sc" style="color: #5E5E5E;">:</span> eds</span>
<span id="cb11-2">Title<span class="sc" style="color: #5E5E5E;">:</span> Helper Functions <span class="cf" style="color: #003B4F;">for</span> Effective Data Science <span class="dv" style="color: #AD0000;">2022-23</span></span>
<span id="cb11-3">Version<span class="sc" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">0.9000</span></span>
<span id="cb11-4">Authors<span class="sc" style="color: #5E5E5E;">@</span>R<span class="sc" style="color: #5E5E5E;">:</span> </span>
<span id="cb11-5">    <span class="fu" style="color: #4758AB;">person</span>(</span>
<span id="cb11-6">    <span class="at" style="color: #657422;">given =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Zak"</span>,<span class="st" style="color: #20794D;">"D"</span>),</span>
<span id="cb11-7">    <span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">"Varty"</span>,</span>
<span id="cb11-8">    <span class="at" style="color: #657422;">email =</span> <span class="st" style="color: #20794D;">"z.varty@imperial.ac.uk"</span>,</span>
<span id="cb11-9">    <span class="at" style="color: #657422;">role =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"aut"</span>, <span class="st" style="color: #20794D;">"cre"</span>))</span>
<span id="cb11-10">Description<span class="sc" style="color: #5E5E5E;">:</span> A minimal example R package created during the first lives session </span>
<span id="cb11-11">    of Effective Data Science <span class="dv" style="color: #AD0000;">2022</span><span class="fl" style="color: #AD0000;">-23.</span> This countains a simple <span class="cf" style="color: #003B4F;">function</span> to </span>
<span id="cb11-12">    calculate a moving average.</span>
<span id="cb11-13">License<span class="sc" style="color: #5E5E5E;">:</span> MIT <span class="sc" style="color: #5E5E5E;">+</span> file LICENSE</span>
<span id="cb11-14">Encoding<span class="sc" style="color: #5E5E5E;">:</span> UTF<span class="dv" style="color: #AD0000;">-8</span></span>
<span id="cb11-15">Roxygen<span class="sc" style="color: #5E5E5E;">:</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">markdown =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb11-16">RoxygenNote<span class="sc" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">7</span>.<span class="fl" style="color: #AD0000;">2.3</span></span></code></pre></div>
</div>
<p>Let’s now check the package again and see that this has resolved our issues</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">devtools<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">check</span>()</span></code></pre></div>
</div>
<div class="cell" data-filename="Console">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">...</span>
<span id="cb13-2">✔  checking loading without being on the library search path ...</span>
<span id="cb13-3">─  checking examples ... NONE</span>
<span id="cb13-4">✔  checking <span class="cf" style="color: #003B4F;">for</span> non<span class="sc" style="color: #5E5E5E;">-</span>standard things <span class="cf" style="color: #003B4F;">in</span> the check directory</span>
<span id="cb13-5">✔  checking <span class="cf" style="color: #003B4F;">for</span> detritus <span class="cf" style="color: #003B4F;">in</span> the temp directory</span>
<span id="cb13-6">   </span>
<span id="cb13-7">   </span>
<span id="cb13-8">── R CMD check results ─────────────────────────────────────────── eds <span class="dv" style="color: #AD0000;">0</span>.<span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">0.9000</span> ────</span>
<span id="cb13-9">Duration<span class="sc" style="color: #5E5E5E;">:</span> <span class="fl" style="color: #AD0000;">5.5</span>s</span>
<span id="cb13-10"></span>
<span id="cb13-11"><span class="dv" style="color: #AD0000;">0</span> errors ✔ <span class="sc" style="color: #5E5E5E;">|</span> <span class="dv" style="color: #AD0000;">0</span> warnings ✔ <span class="sc" style="color: #5E5E5E;">|</span> <span class="dv" style="color: #AD0000;">0</span> notes ✔</span></code></pre></div>
</div>
<p>Fantastic! Our package has no errors, warnings or notes.</p>
</section>
<section id="adding-a-first-function" class="level2">
<h2 class="anchored" data-anchor-id="adding-a-first-function">Adding a first function</h2>
<p>The first function we will add to the package is the helper function I wrote to left- and right-pad a vector with NAs.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">pad_with_NAs <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x, n_left, n_right){</span>
<span id="cb14-2">  <span class="fu" style="color: #4758AB;">c</span>(<span class="fu" style="color: #4758AB;">rep</span>(<span class="cn" style="color: #8f5902;">NA</span>, n_left), x, <span class="fu" style="color: #4758AB;">rep</span>(<span class="cn" style="color: #8f5902;">NA</span>, n_right))</span>
<span id="cb14-3">}</span></code></pre></div>
</div>
<p>To add this function to <code>eds</code>, we save it within the <code>R/</code> directory. Until your package becomes large, it is good form to save each function in its own R file, named after the function. If the package becomes large, you can then think about refactoring your code to have one script for each family or group of functions.</p>
<p>We can create <code>R/pad_with_NAs.R</code> manually, or with a helper function from <code>{usethis}</code>. The helper function is useful because it will either open an existing R file or create one if it does not yet exist.</p>
<div class="cell" data-filename="Console">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">usethis<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">use_r</span>(<span class="st" style="color: #20794D;">"pad_with_NAs"</span>)</span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;">#• Modify 'R/pad_with_NAs.R'</span></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;">#• Call `use_test()` to create a matching test file</span></span></code></pre></div>
</div>
<p>We can then paste our function definition into this file and save it.</p>
<div class="cell" data-filename="R/pad_with_NAs.R">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">pad_with_NAs <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x, n_left, n_right){</span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;">c</span>(<span class="fu" style="color: #4758AB;">rep</span>(<span class="cn" style="color: #8f5902;">NA</span>, n_left), x, <span class="fu" style="color: #4758AB;">rep</span>(<span class="cn" style="color: #8f5902;">NA</span>, n_right))</span>
<span id="cb16-3">}</span></code></pre></div>
</div>
</section>
<section id="try-it-out" class="level2">
<h2 class="anchored" data-anchor-id="try-it-out">Try it out</h2>
<p>To try out our padding function, we need to make it available in our current R session. One way we could do this is to call <code>source(R/pad_with_NAs.R)</code>. This doesn’t match with our experience of loading a package though - it would make <code>pad_with_NAs()</code> appear in our global environment pane.</p>
<p>Instead, we can load all functions from the package using <code>load_all()</code>. This simulates the process of building, installing and loading <code>{eds}</code>, but is much faster than actually doing so. This speed difference becomes more and more beneficial as your package grows, allowing you to get an accurate sense of how users will experience your package even when you have functions that depend on each other or depend on functions from other packages.</p>
<div class="cell" data-filename="Console">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">devtools<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">load_all</span>()</span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;">#ℹ Loading eds</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;">pad_with_NAs</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">5</span>, <span class="at" style="color: #657422;">n_left =</span> <span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #657422;">n_right =</span> <span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] NA NA  1  2  3  4  5 NA</code></pre>
</div>
</div>
</section>
<section id="adding-documentation" class="level2">
<h2 class="anchored" data-anchor-id="adding-documentation">Adding Documentation</h2>
<p>It would be great if we had handy pop-ups to explain our function arguments and help pages to explain what our function does. We can add these using {roxygen2}. This package allows you to write markdown-like comments above function definitions that are automatically converted into documentation files in the <code>man/</code> directory.</p>
<p>To add skeleton documentation, go to the menu and select Code &gt; Insert Roxygen Skeleton. (This can also be done using the keyboard shortcut on that menu button when your cursor is inside the curly braces of the function.)</p>
<p>Now our function padding function file should look something like this:</p>
<div class="cell" data-filename="R/pad_with_NAs.R">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="co" style="color: #5E5E5E;">#' Title</span></span>
<span id="cb20-2"><span class="co" style="color: #5E5E5E;">#'</span></span>
<span id="cb20-3"><span class="co" style="color: #5E5E5E;">#' @param x </span></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;">#' @param n_left </span></span>
<span id="cb20-5"><span class="co" style="color: #5E5E5E;">#' @param n_right </span></span>
<span id="cb20-6"><span class="co" style="color: #5E5E5E;">#'</span></span>
<span id="cb20-7"><span class="co" style="color: #5E5E5E;">#' @return</span></span>
<span id="cb20-8"><span class="co" style="color: #5E5E5E;">#' @export</span></span>
<span id="cb20-9"><span class="co" style="color: #5E5E5E;">#'</span></span>
<span id="cb20-10"><span class="co" style="color: #5E5E5E;">#' @examples</span></span>
<span id="cb20-11">pad_with_NAs <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x, n_left, n_right){</span>
<span id="cb20-12">  <span class="fu" style="color: #4758AB;">c</span>(<span class="fu" style="color: #4758AB;">rep</span>(<span class="cn" style="color: #8f5902;">NA</span>, n_left), x, <span class="fu" style="color: #4758AB;">rep</span>(<span class="cn" style="color: #8f5902;">NA</span>, n_right))</span>
<span id="cb20-13">}</span></code></pre></div>
</div>
<p>Filling out the relevant fields, we get something like this.</p>
<div class="cell" data-filename="pad_with_NAs.R">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="co" style="color: #5E5E5E;">#' Add NAs to a vector</span></span>
<span id="cb21-2"><span class="co" style="color: #5E5E5E;">#'</span></span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;">#' @param x Vector to which NAs will be added.</span></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;">#' @param n_left Number of NAs to add before x.</span></span>
<span id="cb21-5"><span class="co" style="color: #5E5E5E;">#' @param n_right Number of NAs to add after x.</span></span>
<span id="cb21-6"><span class="co" style="color: #5E5E5E;">#'</span></span>
<span id="cb21-7"><span class="co" style="color: #5E5E5E;">#' @return A vector containing x with the requested number of NA values before and after.</span></span>
<span id="cb21-8"><span class="co" style="color: #5E5E5E;">#'</span></span>
<span id="cb21-9"><span class="co" style="color: #5E5E5E;">#' @export</span></span>
<span id="cb21-10"><span class="co" style="color: #5E5E5E;">#' @examples</span></span>
<span id="cb21-11"><span class="co" style="color: #5E5E5E;">#' pad_with_NAs(1:5, n_left = 0, n_right = 3)</span></span>
<span id="cb21-12"><span class="co" style="color: #5E5E5E;">#' pad_with_NAs(c("spider", "mouse", "cat", "dog"), n_left = 1, n_right = 2)</span></span>
<span id="cb21-13"><span class="co" style="color: #5E5E5E;">#'</span></span>
<span id="cb21-14">pad_with_NAs <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x, n_left, n_right){</span>
<span id="cb21-15">  <span class="fu" style="color: #4758AB;">c</span>(<span class="fu" style="color: #4758AB;">rep</span>(<span class="cn" style="color: #8f5902;">NA</span>, n_left), x, <span class="fu" style="color: #4758AB;">rep</span>(<span class="cn" style="color: #8f5902;">NA</span>, n_right))</span>
<span id="cb21-16">}</span></code></pre></div>
</div>
<p>The final step is to save these changes and then convert the comments to documentation using <code>document()</code>.</p>
<div class="cell" data-filename="Console">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">devtools<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">document</span>()</span>
<span id="cb22-2"><span class="co" style="color: #5E5E5E;"># ℹ Updating eds documentation</span></span>
<span id="cb22-3"><span class="co" style="color: #5E5E5E;"># ℹ Loading eds</span></span>
<span id="cb22-4"><span class="co" style="color: #5E5E5E;"># Writing pad_with_NAs.Rd</span></span></code></pre></div>
</div>
<p>This will allow you to preview the help file for <code>pad_with_NAs()</code>. I say preview here, rather than view because the documentation really only gets made when you build the package (which also adds things like links between help files and a package index). This is what the “Rendering development documentation …”” message is trying to remind you.</p>
<div class="cell" data-filename="Console">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">?pad_with_NAs</span>
<span id="cb23-2"><span class="co" style="color: #5E5E5E;"># ℹ Rendering development documentation for "pad_with_NAs"</span></span></code></pre></div>
</div>
</section>
<section id="install-your-package" class="level2">
<h2 class="anchored" data-anchor-id="install-your-package">Install your package</h2>
<p>Now that we have a minimum viable package with a single function, let’s install the eds package. We do this using <code>devtools::install()</code>.</p>
<div class="cell" data-filename="Console">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">?devtools<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">install</span>()</span></code></pre></div>
</div>
<p>We can now load and use <code>{eds}</code> just like any other package.</p>
<div class="cell" data-filename="Console">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;">library</span>(eds)</span>
<span id="cb25-2">animals <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"spider"</span>, <span class="st" style="color: #20794D;">"mouse"</span>,<span class="st" style="color: #20794D;">"cat"</span>)</span>
<span id="cb25-3"><span class="fu" style="color: #4758AB;">pad_with_NAs</span>(animals, <span class="at" style="color: #657422;">n_left =</span> <span class="dv" style="color: #AD0000;">1</span>,<span class="at" style="color: #657422;">n_right =</span> <span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] NA       "spider" "mouse"  "cat"   </code></pre>
</div>
</div>
<section id="aside-on-setting-installation-path" class="level3">
<h3 class="anchored" data-anchor-id="aside-on-setting-installation-path">Aside on setting installation path</h3>
<p>If, like me, you want to install this to a non-default location then you can do this using <code>withr::with_libpaths()</code>.</p>
<p>I would like to install this to my sub-folder for personal R packages, which is the third element of my <code>.libPaths</code> vector.</p>
<div class="cell" data-filename="Console">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;">.libPaths</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "/Users/zakvarty/R_libraries/4.2/cran"                          
[2] "/Users/zakvarty/R_libraries/4.2/github"                        
[3] "/Users/zakvarty/R_libraries/4.2/personal"                      
[4] "/Library/Frameworks/R.framework/Versions/4.2/Resources/library"</code></pre>
</div>
</div>
<p>I can do this by using <code>{withr}</code> to execute the same code but with my library paths temporarily replaced by only a single path, pointing to the personal packages sub-folder.</p>
<div class="cell" data-filename="Console">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">withr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">with_libpaths</span>(<span class="at" style="color: #657422;">new =</span> <span class="fu" style="color: #4758AB;">.libPaths</span>()[<span class="dv" style="color: #AD0000;">3</span>], <span class="at" style="color: #657422;">code =</span> devtools<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">install</span>())</span></code></pre></div>
</div>
<p>This is a bit of a handful to type repeatedly, so I’ve made a wrapper function for it in my eds package: <code>eds::install_local()</code>.</p>
</section>
</section>
<section id="functions-with-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="functions-with-dependencies">Functions with dependencies</h2>
<section id="within-package-dependencies" class="level3">
<h3 class="anchored" data-anchor-id="within-package-dependencies">Within package dependencies</h3>
<p>The excellent thing about having a functions in a package is that they are all loaded together and don’t clutter the workspace.</p>
<p>I created <code>pad_with_NAs()</code> as a helper function for <code>rolling_average()</code>. Whenever I loaded <code>rolling_average()</code> using <code>src()</code>, I had to remember to also source the padding function. Putting both functions in a package saves this worry. It also keeps my working environment focused on the problem I am solving (the data I want to smooth) rather than the tools I am using to solve that problem (functions and their helpers).</p>
</section>
<section id="between-package-dependencies" class="level3">
<h3 class="anchored" data-anchor-id="between-package-dependencies">Between package dependencies</h3>
<p>We’ve seen that functions within a package recognise each other and that we can make functions within our package available to users using the <code>@export</code> Roxygen tag. (It did this by adding <code>export(pad_with_NAs)</code> to the NAMESPACE file. Check if you don’t believe me.)</p>
<p>What happens if we want to use another package’s functions in our package? We have three options, depending how many functions we want to use and how often we use them.</p>
<ol type="1">
<li><p>Run <code>usethis::use_package("package_name")</code> to declare a dependency in the DESCRIPTION file. Then use the <code>::</code> notation to clearly specify the namespace (package) of the function you want to use. (I’ve been doing this same thing above to make it clear to you that some function are from <code>devtools</code> and others are from <code>withr</code>.)</p></li>
<li><p>In the Roxygen section of your function, use <code>#' @importFrom pkg fun1 fun2</code> - if you prefer this over using <code>::</code>. This can be useful if you use a couple of functions frequently to keep your code shorter and easier to read.</p></li>
<li><p>In the Roxygen section of your function, <code>#' @import pkg</code> - this imports all functions from a package and should be used very sparingly because it makes your package bulkier and increases the chance of namespace conflicts (where there is a function of the same name in two loaded packages).</p></li>
</ol>
<div class="{callout-note}">
<p>If you are submitting your package to CRAN you need to delcalre all <em>ALL</em> other packages your code depends on. This includes the packages that come as standard with R (other than <code>{base}</code>), for example <code>{stats}</code>, <code>{MASS}</code>, and <code>{graphics}</code>.</p>
</div>
</section>
<section id="example-imports" class="level3">
<h3 class="anchored" data-anchor-id="example-imports">Example imports</h3>
<div class="cell" data-filename="Console">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">usethis<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">use_package</span>(<span class="st" style="color: #20794D;">"stats"</span>)</span></code></pre></div>
</div>
<div class="cell" data-filename="R/rnorm_rounded.R">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="co" style="color: #5E5E5E;">#' Simulate rounded Gaussian random variates</span></span>
<span id="cb31-2"><span class="co" style="color: #5E5E5E;">#'</span></span>
<span id="cb31-3"><span class="co" style="color: #5E5E5E;">#' @param n Number of observations. If length(n) &gt; 1, the length is taken to be the number required.</span></span>
<span id="cb31-4"><span class="co" style="color: #5E5E5E;">#' @param mu Vector of means.</span></span>
<span id="cb31-5"><span class="co" style="color: #5E5E5E;">#' @param sigma Vector of standard deviations.</span></span>
<span id="cb31-6"><span class="co" style="color: #5E5E5E;">#' @param digits Integer indicating the number of decimal places to be used in rounding. Negative values are used to round to a power of ten, so for example `digits = -2` rounds to the nearest hundred. (See 'Details' of `base::round()`).</span></span>
<span id="cb31-7"><span class="co" style="color: #5E5E5E;">#'</span></span>
<span id="cb31-8"><span class="co" style="color: #5E5E5E;">#' @return Vector of Gaussian random variates, rounded to to specified number of decimal places.</span></span>
<span id="cb31-9"><span class="co" style="color: #5E5E5E;">#' @export</span></span>
<span id="cb31-10"><span class="co" style="color: #5E5E5E;">#'</span></span>
<span id="cb31-11"><span class="co" style="color: #5E5E5E;">#' @examples</span></span>
<span id="cb31-12"><span class="co" style="color: #5E5E5E;">#' rnorm_rounded(n = 10)</span></span>
<span id="cb31-13">rnorm_rounded <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(n, <span class="at" style="color: #657422;">mu =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">sigma =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">digits =</span> <span class="dv" style="color: #AD0000;">0</span>){ </span>
<span id="cb31-14">  raw_values <span class="ot" style="color: #003B4F;">&lt;-</span> stats<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">rnorm</span>(n, <span class="at" style="color: #657422;">mean =</span> mu, <span class="at" style="color: #657422;">sd =</span> sigma)</span>
<span id="cb31-15">  rounded_values <span class="ot" style="color: #003B4F;">&lt;-</span> base<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">round</span>(raw_values, digits)</span>
<span id="cb31-16">  <span class="fu" style="color: #4758AB;">return</span>(rounded_values)</span>
<span id="cb31-17">}</span></code></pre></div>
</div>
<p>We do not need to explicitly declare that <code>round()</code> is from base, or include in in a list of imported functions.</p>
<div class="cell" data-filename="R/rnorm_rounded.R">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="co" style="color: #5E5E5E;">#' Simulate rounded Gaussian random variates</span></span>
<span id="cb32-2"><span class="co" style="color: #5E5E5E;">#'</span></span>
<span id="cb32-3"><span class="co" style="color: #5E5E5E;">#' @param n Number of observations. If length(n) &gt; 1, the length is taken to be the number required.</span></span>
<span id="cb32-4"><span class="co" style="color: #5E5E5E;">#' @param mu Vector of means.</span></span>
<span id="cb32-5"><span class="co" style="color: #5E5E5E;">#' @param sigma Vector of standard deviations.</span></span>
<span id="cb32-6"><span class="co" style="color: #5E5E5E;">#' @param digits Integer indicating the number of decimal places to be used in rounding. Negative values are used to round to a power of ten, so for example `digits = -2` rounds to the nearest hundred. (See 'Details' of `base::round()`).</span></span>
<span id="cb32-7"><span class="co" style="color: #5E5E5E;">#'</span></span>
<span id="cb32-8"><span class="co" style="color: #5E5E5E;">#' @return Vector of Gaussian random variates, rounded to to specified number of decimal places.</span></span>
<span id="cb32-9"><span class="co" style="color: #5E5E5E;">#' </span></span>
<span id="cb32-10"><span class="co" style="color: #5E5E5E;">#' @importFrom stats rnorm</span></span>
<span id="cb32-11"><span class="co" style="color: #5E5E5E;">#' @export</span></span>
<span id="cb32-12"><span class="co" style="color: #5E5E5E;">#"</span></span>
<span id="cb32-13"><span class="co" style="color: #5E5E5E;">#' @examples</span></span>
<span id="cb32-14"><span class="co" style="color: #5E5E5E;">#' rnorm_rounded(n = 10)</span></span>
<span id="cb32-15">rnorm_rounded <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(n, <span class="at" style="color: #657422;">mu =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">sigma =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">digits =</span> <span class="dv" style="color: #AD0000;">0</span>){ </span>
<span id="cb32-16">  raw_values <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rnorm</span>(n, <span class="at" style="color: #657422;">mean =</span> mu, <span class="at" style="color: #657422;">sd =</span> sigma)</span>
<span id="cb32-17">  rounded_values <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">round</span>(raw_values, digits)</span>
<span id="cb32-18">  <span class="fu" style="color: #4758AB;">return</span>(rounded_values)</span>
<span id="cb32-19">}</span></code></pre></div>
</div>
<p>Importing the entire stats package would be overkill when we use only one function.</p>
<div class="cell" data-filename="R/rnorm_rounded.R">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="co" style="color: #5E5E5E;">#' Simulate rounded Gaussian random variates</span></span>
<span id="cb33-2"><span class="co" style="color: #5E5E5E;">#'</span></span>
<span id="cb33-3"><span class="co" style="color: #5E5E5E;">#' @param n Number of observations. If length(n) &gt; 1, the length is taken to be the number required.</span></span>
<span id="cb33-4"><span class="co" style="color: #5E5E5E;">#' @param mu Vector of means.</span></span>
<span id="cb33-5"><span class="co" style="color: #5E5E5E;">#' @param sigma Vector of standard deviations.</span></span>
<span id="cb33-6"><span class="co" style="color: #5E5E5E;">#' @param digits Integer indicating the number of decimal places to be used in rounding. Negative values are used to round to a power of ten, so for example `digits = -2` rounds to the nearest hundred. (See 'Details' of `base::round()`).</span></span>
<span id="cb33-7"><span class="co" style="color: #5E5E5E;">#'</span></span>
<span id="cb33-8"><span class="co" style="color: #5E5E5E;">#' @return Vector of Gaussian random variates, rounded to to specified number of decimal places.</span></span>
<span id="cb33-9"><span class="co" style="color: #5E5E5E;">#' </span></span>
<span id="cb33-10"><span class="co" style="color: #5E5E5E;">#' @import stats</span></span>
<span id="cb33-11"><span class="co" style="color: #5E5E5E;">#' @export</span></span>
<span id="cb33-12"><span class="co" style="color: #5E5E5E;">#"</span></span>
<span id="cb33-13"><span class="co" style="color: #5E5E5E;">#' @examples</span></span>
<span id="cb33-14"><span class="co" style="color: #5E5E5E;">#' rnorm_rounded(n = 10)</span></span>
<span id="cb33-15">rnorm_rounded <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(n, <span class="at" style="color: #657422;">mu =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">sigma =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">digits =</span> <span class="dv" style="color: #AD0000;">0</span>){ </span>
<span id="cb33-16">  raw_values <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rnorm</span>(n, <span class="at" style="color: #657422;">mean =</span> mu, <span class="at" style="color: #657422;">sd =</span> sigma)</span>
<span id="cb33-17">  rounded_values <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">round</span>(raw_values, digits)</span>
<span id="cb33-18">  <span class="fu" style="color: #4758AB;">return</span>(rounded_values)</span>
<span id="cb33-19">}</span></code></pre></div>
</div>
</section>
<section id="an-import-exception" class="level3">
<h3 class="anchored" data-anchor-id="an-import-exception">An import exception</h3>
<p>An exception to the import procedure is the pipe from <code>{magrittr}</code></p>
<p>You may want to import this to pipe within your function definitions, but having <code>magritr::'%&gt;%'</code> in your code looks a right mess and defeats the readability benefits of piping.</p>
<p>Instead, we have to take two steps.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">usethis<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">use_pipe</span>()  <span class="co" style="color: #5E5E5E;"># Creates R/utils-pipe.R and adds magrittr to DESCRIPTION</span></span>
<span id="cb34-2">devtools<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">document</span>() <span class="co" style="color: #5E5E5E;"># Adds the pipe to your package's NAMESPACE</span></span></code></pre></div>
</div>
</section>
</section>
<section id="adding-tests" class="level2">
<h2 class="anchored" data-anchor-id="adding-tests">Adding Tests</h2>
<p>We can also add tests to the functions within our package. These tests will stay in a new directory called <code>tests/</code> and will be run each time the package is built. This helps us to ensure that they currently work as we expect and that we do not break them when making alterations in the future.</p>
<p>To write and keep track of these tests, we will use <code>{testthat}</code>. To get started we will use the helper function <code>usethis::use_testthat()</code> to:</p>
<ul>
<li>create <code>⁠tests/testthat</code></li>
<li>create <code>tests/testthat.R</code></li>
<li>add <code>{testthat}</code> to the Suggests field of our package.</li>
</ul>
<p>This needs to be done only once per package.</p>
<div class="cell" data-filename="Console">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">usethis<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">use_testthat</span>()</span>
<span id="cb35-2"><span class="co" style="color: #5E5E5E;"># ✔ Adding 'testthat' to Suggests field in DESCRIPTION</span></span>
<span id="cb35-3"><span class="co" style="color: #5E5E5E;"># ✔ Setting Config/testthat/edition field in DESCRIPTION to '3'</span></span>
<span id="cb35-4"><span class="co" style="color: #5E5E5E;"># ✔ Creating 'tests/testthat/'</span></span>
<span id="cb35-5"><span class="co" style="color: #5E5E5E;"># ✔ Writing 'tests/testthat.R'</span></span>
<span id="cb35-6"><span class="co" style="color: #5E5E5E;"># • Call `use_test()` to initialize a basic test file and open it for editing.</span></span></code></pre></div>
</div>
<p>Each of our files of tests will live in the tests/testthat subdirectory in a file named after the function. We can create this file of tests by running <code>usethis::use_test()</code> while we have any of our package functions open. This will either open or create the relevant text file for us to edit or populate.</p>
<p>This needs to be done (at least) once for each function that we want to write tests for. Let’s focus on writing tests for <code>pad_with_NAs()</code>.</p>
<p>With <code>R/pad_with_NAs.R</code> open, run <code>usethis::use_test()</code> to create and open a file to store the tests. Note that the naming convention here is different to our previous convention.</p>
<div class="cell" data-filename="Console">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">usethis<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">use_test</span>()</span>
<span id="cb36-2"><span class="co" style="color: #5E5E5E;"># ✔ Writing 'tests/testthat/test-pad_with_NAs.R'</span></span>
<span id="cb36-3"><span class="co" style="color: #5E5E5E;"># • Modify 'tests/testthat/test-pad_with_NAs.R'</span></span></code></pre></div>
</div>
<p>This will have a dummy test included by default.</p>
<div class="cell" data-filename="tests/testthat/test-pad_with-NAs.R">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="fu" style="color: #4758AB;">test_that</span>(<span class="st" style="color: #20794D;">"multiplication works"</span>, {</span>
<span id="cb37-2">  <span class="fu" style="color: #4758AB;">expect_equal</span>(<span class="dv" style="color: #AD0000;">2</span> <span class="sc" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">4</span>)</span>
<span id="cb37-3">})</span></code></pre></div>
</div>
<p>Let’s change this to match one of our examples and add another test to match the other example. To try out these tests as you write them, you’ll want to attach <code>{testthat}</code> to the current R session and make your package function available with <code>load_all()</code>.</p>
<div class="cell" data-filename="Console">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="fu" style="color: #4758AB;">library</span>(testthat)</span>
<span id="cb38-2">devtools<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">load_all</span>()</span>
<span id="cb38-3"><span class="co" style="color: #5E5E5E;"># ℹ Loading eds</span></span></code></pre></div>
</div>
<p>If you then try running the dummy test you should get something like:</p>
<div class="cell" data-filename="tests/testthat/test-pad_with-NAs.R">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1"><span class="fu" style="color: #4758AB;">test_that</span>(<span class="st" style="color: #20794D;">"multiplication works"</span>, {</span>
<span id="cb39-2">  <span class="fu" style="color: #4758AB;">expect_equal</span>(<span class="dv" style="color: #AD0000;">2</span> <span class="sc" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">4</span>)</span>
<span id="cb39-3">})</span>
<span id="cb39-4"><span class="co" style="color: #5E5E5E;"># Test passed 😀</span></span></code></pre></div>
</div>
<p>We can replace this by some simple checks that the funciton behaves as expected when given examples we wrote in the documentation and when we pad with zero NAs.</p>
<div class="cell" data-filename="tests/testthat/test-pad_with-NAs.R">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1"><span class="fu" style="color: #4758AB;">test_that</span>(<span class="st" style="color: #20794D;">"padding by 0 works"</span>, {</span>
<span id="cb40-2">  <span class="fu" style="color: #4758AB;">expect_equal</span>(<span class="fu" style="color: #4758AB;">pad_with_NAs</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">n_left =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">n_right =</span> <span class="dv" style="color: #AD0000;">0</span>), <span class="fu" style="color: #4758AB;">c</span>(<span class="cn" style="color: #8f5902;">NA</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>))</span>
<span id="cb40-3">  <span class="fu" style="color: #4758AB;">expect_equal</span>(<span class="fu" style="color: #4758AB;">pad_with_NAs</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">n_left =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">n_right =</span> <span class="dv" style="color: #AD0000;">1</span>), <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="cn" style="color: #8f5902;">NA</span>))</span>
<span id="cb40-4">})</span>
<span id="cb40-5"></span>
<span id="cb40-6"><span class="fu" style="color: #4758AB;">test_that</span>(<span class="st" style="color: #20794D;">"examples work"</span>, {</span>
<span id="cb40-7">  <span class="fu" style="color: #4758AB;">expect_equal</span>(</span>
<span id="cb40-8">    <span class="at" style="color: #657422;">object =</span> <span class="fu" style="color: #4758AB;">pad_with_NAs</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">5</span>, <span class="at" style="color: #657422;">n_left =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">n_right =</span> <span class="dv" style="color: #AD0000;">3</span>), </span>
<span id="cb40-9">    <span class="at" style="color: #657422;">expected =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">5</span>, <span class="cn" style="color: #8f5902;">NA</span>, <span class="cn" style="color: #8f5902;">NA</span>, <span class="cn" style="color: #8f5902;">NA</span>))</span>
<span id="cb40-10">  <span class="fu" style="color: #4758AB;">expect_equal</span>(</span>
<span id="cb40-11">    <span class="at" style="color: #657422;">object =</span> <span class="fu" style="color: #4758AB;">pad_with_NAs</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"spider"</span>, <span class="st" style="color: #20794D;">"mouse"</span>, <span class="st" style="color: #20794D;">"cat"</span>, <span class="st" style="color: #20794D;">"dog"</span>), <span class="at" style="color: #657422;">n_left =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">n_right =</span> <span class="dv" style="color: #AD0000;">2</span>),</span>
<span id="cb40-12">    <span class="at" style="color: #657422;">expected =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="cn" style="color: #8f5902;">NA</span>, <span class="st" style="color: #20794D;">"spider"</span>, <span class="st" style="color: #20794D;">"mouse"</span>, <span class="st" style="color: #20794D;">"cat"</span>, <span class="st" style="color: #20794D;">"dog"</span>, <span class="cn" style="color: #8f5902;">NA</span>)</span>
<span id="cb40-13">  )</span>
<span id="cb40-14">})</span></code></pre></div>
</div>
<p>We can run these tests individually, as we did before, or we can run all test in the file using the <code>testthat::test_file()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">testthat<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">test_file</span>(<span class="st" style="color: #20794D;">"tests/testthat/test-pad_with_NAs.R"</span>)</span>
<span id="cb41-2"></span>
<span id="cb41-3"><span class="co" style="color: #5E5E5E;"># [ FAIL 1 | WARN 0 | SKIP 0 | PASS 3 ]</span></span>
<span id="cb41-4"><span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb41-5"><span class="co" style="color: #5E5E5E;"># ── Failure (test-pad_with_NAs.R:10): examples work ─────────────────────────────</span></span>
<span id="cb41-6"><span class="co" style="color: #5E5E5E;"># pad_with_NAs(...) (`actual`) not equal to </span></span>
<span id="cb41-7"><span class="co" style="color: #5E5E5E;"># c(NA, "spider", "mouse", "cat", "dog", NA) (`expected`).</span></span>
<span id="cb41-8"><span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb41-9"><span class="co" style="color: #5E5E5E;"># `actual[4:7]`:   "cat" "dog" NA NA</span></span>
<span id="cb41-10"><span class="co" style="color: #5E5E5E;"># `expected[4:6]`: "cat" "dog" NA   </span></span>
<span id="cb41-11"><span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb41-12"><span class="co" style="color: #5E5E5E;"># [ FAIL 1 | WARN 0 | SKIP 0 | PASS 3 ]</span></span></code></pre></div>
</div>
<p>From the test output, we can see that three of the tests are passing but one is failing. Using the additional output, we can figure out that I forgot the second <code>NA</code> in the test of the string example. Let’s add that back in.</p>
<div class="cell" data-filename="tests/testthat/test-pad_with-NAs.R">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1"><span class="fu" style="color: #4758AB;">test_that</span>(<span class="st" style="color: #20794D;">"padding by 0 works"</span>, {</span>
<span id="cb42-2">  <span class="fu" style="color: #4758AB;">expect_equal</span>(<span class="fu" style="color: #4758AB;">pad_with_NAs</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">n_left =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">n_right =</span> <span class="dv" style="color: #AD0000;">0</span>), <span class="fu" style="color: #4758AB;">c</span>(<span class="cn" style="color: #8f5902;">NA</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>))</span>
<span id="cb42-3">  <span class="fu" style="color: #4758AB;">expect_equal</span>(<span class="fu" style="color: #4758AB;">pad_with_NAs</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">n_left =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">n_right =</span> <span class="dv" style="color: #AD0000;">1</span>), <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="cn" style="color: #8f5902;">NA</span>))</span>
<span id="cb42-4">})</span>
<span id="cb42-5"></span>
<span id="cb42-6"><span class="fu" style="color: #4758AB;">test_that</span>(<span class="st" style="color: #20794D;">"examples work"</span>, {</span>
<span id="cb42-7">  <span class="fu" style="color: #4758AB;">expect_equal</span>(</span>
<span id="cb42-8">    <span class="at" style="color: #657422;">object =</span> <span class="fu" style="color: #4758AB;">pad_with_NAs</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">5</span>, <span class="at" style="color: #657422;">n_left =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">n_right =</span> <span class="dv" style="color: #AD0000;">3</span>), </span>
<span id="cb42-9">    <span class="at" style="color: #657422;">expected =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">5</span>, <span class="cn" style="color: #8f5902;">NA</span>, <span class="cn" style="color: #8f5902;">NA</span>, <span class="cn" style="color: #8f5902;">NA</span>))</span>
<span id="cb42-10">  <span class="fu" style="color: #4758AB;">expect_equal</span>(</span>
<span id="cb42-11">    <span class="at" style="color: #657422;">object =</span> <span class="fu" style="color: #4758AB;">pad_with_NAs</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"spider"</span>, <span class="st" style="color: #20794D;">"mouse"</span>, <span class="st" style="color: #20794D;">"cat"</span>, <span class="st" style="color: #20794D;">"dog"</span>), <span class="at" style="color: #657422;">n_left =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">n_right =</span> <span class="dv" style="color: #AD0000;">2</span>),</span>
<span id="cb42-12">    <span class="at" style="color: #657422;">expected =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="cn" style="color: #8f5902;">NA</span>, <span class="st" style="color: #20794D;">"spider"</span>, <span class="st" style="color: #20794D;">"mouse"</span>, <span class="st" style="color: #20794D;">"cat"</span>, <span class="st" style="color: #20794D;">"dog"</span>, <span class="cn" style="color: #8f5902;">NA</span>, <span class="cn" style="color: #8f5902;">NA</span>)</span>
<span id="cb42-13">  )</span>
<span id="cb42-14">})</span></code></pre></div>
</div>
<p>We can also add some input checks to the function, in case the user tries to do something unexpected. We’ll add input checks to cover two cases where the user tries to:</p>
<ul>
<li>use negative indexing to pad <em>inwards</em> with NAs;</li>
<li>pad an object that is not a vector.</li>
</ul>
<p>To do this we will use the <code>stopifnot()</code> function. This is a useful shorthand to <code>stop()</code> function execution and return an error message based on a logical statement. For more detailed control of the error message or for less serious failings, which require only a <code>warning()</code> or a <code>message()</code>. Learn more about these in the Advanced R <a href="https://adv-r.hadley.nz/conditions.html">conditions chapter</a>.</p>
<div class="cell" data-filename="R/pad_with_NAs.R">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1"><span class="co" style="color: #5E5E5E;">#' Add NAs to a vector</span></span>
<span id="cb43-2"><span class="co" style="color: #5E5E5E;">#'</span></span>
<span id="cb43-3"><span class="co" style="color: #5E5E5E;">#' @param x Vector to which NAs will be added.</span></span>
<span id="cb43-4"><span class="co" style="color: #5E5E5E;">#' @param n_left Number of NAs to add before x.</span></span>
<span id="cb43-5"><span class="co" style="color: #5E5E5E;">#' @param n_right Number of NAs to add after x.</span></span>
<span id="cb43-6"><span class="co" style="color: #5E5E5E;">#'</span></span>
<span id="cb43-7"><span class="co" style="color: #5E5E5E;">#' @return A vector containing x with the requested number of NA values before and after.</span></span>
<span id="cb43-8"><span class="co" style="color: #5E5E5E;">#'</span></span>
<span id="cb43-9"><span class="co" style="color: #5E5E5E;">#' @export</span></span>
<span id="cb43-10"><span class="co" style="color: #5E5E5E;">#' @examples</span></span>
<span id="cb43-11"><span class="co" style="color: #5E5E5E;">#' pad_with_NAs(1:5, n_left = 0, n_right = 3)</span></span>
<span id="cb43-12"><span class="co" style="color: #5E5E5E;">#' pad_with_NAs(c("spider", "mouse", "cat", "dog"), n_left = 1, n_right = 2)</span></span>
<span id="cb43-13"><span class="co" style="color: #5E5E5E;">#'</span></span>
<span id="cb43-14">pad_with_NAs <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x, n_left, n_right){</span>
<span id="cb43-15">  <span class="co" style="color: #5E5E5E;"># Input checks</span></span>
<span id="cb43-16">  <span class="fu" style="color: #4758AB;">stopifnot</span>(n_left <span class="sc" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb43-17">  <span class="fu" style="color: #4758AB;">stopifnot</span>(n_right <span class="sc" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb43-18">  <span class="fu" style="color: #4758AB;">stopifnot</span>(<span class="fu" style="color: #4758AB;">class</span>(x) <span class="sc" style="color: #5E5E5E;">%in%</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"character"</span>, <span class="st" style="color: #20794D;">"complex"</span>, <span class="st" style="color: #20794D;">"integer"</span>, <span class="st" style="color: #20794D;">"logical"</span>, <span class="st" style="color: #20794D;">"numeric"</span>, <span class="st" style="color: #20794D;">"factor"</span>))</span>
<span id="cb43-19"></span>
<span id="cb43-20">  <span class="co" style="color: #5E5E5E;"># Function Body</span></span>
<span id="cb43-21">  <span class="fu" style="color: #4758AB;">c</span>(<span class="fu" style="color: #4758AB;">rep</span>(<span class="cn" style="color: #8f5902;">NA</span>, n_left), x, <span class="fu" style="color: #4758AB;">rep</span>(<span class="cn" style="color: #8f5902;">NA</span>, n_right))</span>
<span id="cb43-22">}</span></code></pre></div>
</div>
<p>We can then add additional tests to confirm that we get errors, warnings or messages where we expect them. As our test file grows, we might want to organise our tests according to their purpose.</p>
<div class="cell" data-filename="tests/testthat/test-pad_with-NAs.R">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1"><span class="co" style="color: #5E5E5E;"># Typical Behaviour</span></span>
<span id="cb44-2"></span>
<span id="cb44-3"><span class="fu" style="color: #4758AB;">test_that</span>(<span class="st" style="color: #20794D;">"examples work"</span>, {</span>
<span id="cb44-4">  <span class="fu" style="color: #4758AB;">expect_equal</span>(</span>
<span id="cb44-5">    <span class="at" style="color: #657422;">object =</span> <span class="fu" style="color: #4758AB;">pad_with_NAs</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">5</span>, <span class="at" style="color: #657422;">n_left =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">n_right =</span> <span class="dv" style="color: #AD0000;">3</span>),</span>
<span id="cb44-6">    <span class="at" style="color: #657422;">expected =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">5</span>, <span class="cn" style="color: #8f5902;">NA</span>, <span class="cn" style="color: #8f5902;">NA</span>, <span class="cn" style="color: #8f5902;">NA</span>))</span>
<span id="cb44-7">  <span class="fu" style="color: #4758AB;">expect_equal</span>(</span>
<span id="cb44-8">    <span class="at" style="color: #657422;">object =</span> <span class="fu" style="color: #4758AB;">pad_with_NAs</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"spider"</span>, <span class="st" style="color: #20794D;">"mouse"</span>, <span class="st" style="color: #20794D;">"cat"</span>, <span class="st" style="color: #20794D;">"dog"</span>), <span class="at" style="color: #657422;">n_left =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">n_right =</span> <span class="dv" style="color: #AD0000;">2</span>),</span>
<span id="cb44-9">    <span class="at" style="color: #657422;">expected =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="cn" style="color: #8f5902;">NA</span>, <span class="st" style="color: #20794D;">"spider"</span>, <span class="st" style="color: #20794D;">"mouse"</span>, <span class="st" style="color: #20794D;">"cat"</span>, <span class="st" style="color: #20794D;">"dog"</span>, <span class="cn" style="color: #8f5902;">NA</span>, <span class="cn" style="color: #8f5902;">NA</span>)</span>
<span id="cb44-10">  )</span>
<span id="cb44-11">})</span>
<span id="cb44-12"></span>
<span id="cb44-13"><span class="co" style="color: #5E5E5E;"># Edge Cases</span></span>
<span id="cb44-14"></span>
<span id="cb44-15"><span class="fu" style="color: #4758AB;">test_that</span>(<span class="st" style="color: #20794D;">"padding by 0 works"</span>, {</span>
<span id="cb44-16">  <span class="fu" style="color: #4758AB;">expect_equal</span>(<span class="fu" style="color: #4758AB;">pad_with_NAs</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">n_left =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">n_right =</span> <span class="dv" style="color: #AD0000;">0</span>), <span class="fu" style="color: #4758AB;">c</span>(<span class="cn" style="color: #8f5902;">NA</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>))</span>
<span id="cb44-17">  <span class="fu" style="color: #4758AB;">expect_equal</span>(<span class="fu" style="color: #4758AB;">pad_with_NAs</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">n_left =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">n_right =</span> <span class="dv" style="color: #AD0000;">1</span>), <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="cn" style="color: #8f5902;">NA</span>))</span>
<span id="cb44-18">})</span>
<span id="cb44-19"></span>
<span id="cb44-20"><span class="co" style="color: #5E5E5E;"># Malformed Inputs</span></span>
<span id="cb44-21"></span>
<span id="cb44-22"><span class="fu" style="color: #4758AB;">test_that</span>(<span class="st" style="color: #20794D;">"negative padding produces error"</span>, {</span>
<span id="cb44-23">  <span class="fu" style="color: #4758AB;">expect_error</span>(<span class="fu" style="color: #4758AB;">pad_with_NAs</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">5</span>, <span class="at" style="color: #657422;">n_left =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">n_right =</span> <span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb44-24">  <span class="fu" style="color: #4758AB;">expect_error</span>(<span class="fu" style="color: #4758AB;">pad_with_NAs</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">5</span>, <span class="at" style="color: #657422;">n_left =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">n_right =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb44-25">})</span>
<span id="cb44-26"></span>
<span id="cb44-27"><span class="fu" style="color: #4758AB;">test_that</span>(<span class="st" style="color: #20794D;">"giving non-vector x produces error"</span>, {</span>
<span id="cb44-28">  matrix_input <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">diag</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">4</span>)</span>
<span id="cb44-29">  list_input <span class="ot" style="color: #003B4F;">&lt;-</span> x <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">5</span>, <span class="st" style="color: #20794D;">"cat"</span>)</span>
<span id="cb44-30"></span>
<span id="cb44-31">  <span class="fu" style="color: #4758AB;">expect_error</span>(<span class="fu" style="color: #4758AB;">pad_with_NAs</span>(<span class="at" style="color: #657422;">x =</span> matrix_input, <span class="at" style="color: #657422;">n_left =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">n_right =</span> <span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb44-32">  <span class="fu" style="color: #4758AB;">expect_error</span>(<span class="fu" style="color: #4758AB;">pad_with_NAs</span>(<span class="at" style="color: #657422;">x =</span> list_input, <span class="at" style="color: #657422;">n_left =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">n_right =</span> <span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb44-33">})</span></code></pre></div>
</div>
<p>We can continue to run test files individually, but they will all be run when we call <code>devtools::check()</code>.</p>
<div class="cell" data-filename="Console">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1">testthat<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">test_file</span>(<span class="st" style="color: #20794D;">"tests/testthat/test-pad_with_NAs.R"</span>)</span>
<span id="cb45-2"><span class="co" style="color: #5E5E5E;"># [ FAIL 0 | WARN 0 | SKIP 0 | PASS 8 ]</span></span></code></pre></div>
</div>
</section>
<section id="wrapping-up" class="level2">
<h2 class="anchored" data-anchor-id="wrapping-up">Wrapping up</h2>
<p>To wrap up let’s run one last check and install the package.</p>
<div class="cell" data-filename="Console">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">devtools<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">check</span>()</span>
<span id="cb46-2"><span class="co" style="color: #5E5E5E;"># ─ R CMD check results ─────────────────────────────────── eds 0.0.0.9000 ────</span></span>
<span id="cb46-3"><span class="co" style="color: #5E5E5E;"># Duration: 12.1s</span></span>
<span id="cb46-4"><span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb46-5"><span class="co" style="color: #5E5E5E;"># 0 errors ✔ | 0 warnings ✔ | 0 notes ✔</span></span></code></pre></div>
</div>
<p>Congratulations, you’ve created your first R package!</p>
<p>You should now have a solid understanding of how to set up a new R package, add functions and documentation by using <code>{usethis}</code> and <code>{devtools}</code>. You also know how to use <code>{testthat}</code> and <code>{roxygen22}</code> to create tests to ensure your package is reliable and easy to use.</p>
<p>You should now be able to create your own R package and might want to consider using <a href="https://r-pkgs.org/whole-game.html#use_git">git</a> to track its development and <a href="https://r-pkgs.org/whole-game.html#use_github">sharing it with others on Github</a>.</p>
<p>Remember, creating an R package is an iterative process, and it may take several rounds of testing and editing before you are satisfied with the final product. But with a little patience and persistence, you’ll be able to create a package that you and others can use with confidence.</p>
</section>
<section id="follow-up-tasks" class="level2">
<h2 class="anchored" data-anchor-id="follow-up-tasks">Follow up Tasks</h2>
<ul>
<li>Add input checks and tests for my rolling_mean function.</li>
<li>Add your own function for finding the geometric mean of a vector.</li>
<li>Add a readme file for your package, using <code>usethis::use_readme_rmd()</code> and the relevant section of the <a href="https://r-pkgs.org/whole-game.html#use_readme_rmd">R packages book</a> for guidance.</li>
</ul>
<p>–&gt;</p>


</section>

<div id="quarto-appendix"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{varty2023,
  author = {Zak Varty},
  title = {Packaging Your {R} Code},
  date = {2023-01-19},
  url = {https://www.zakvarty.com/blog/2023-01-16-minimal-R-package},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-varty2023" class="csl-entry quarto-appendix-citeas">
Zak Varty. 2023. <span>“Packaging Your R Code.”</span> January 19, 2023.
<a href="https://www.zakvarty.com/blog/2023-01-16-minimal-R-package">https://www.zakvarty.com/blog/2023-01-16-minimal-R-package</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>data science</category>
  <category>tutorial</category>
  <guid>https://www.zakvarty.com/blog/2023-01-16-minimal-R-package/index.html</guid>
  <pubDate>Thu, 19 Jan 2023 00:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2023-01-16-minimal-R-package/horst-amazing-function.png" medium="image" type="image/png" height="89" width="144"/>
</item>
<item>
  <title>Data Wrangling</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2023-01-06-data-wrangling/index.html</link>
  <description><![CDATA[ 



<section id="what-is-data-wrangling" class="level2">
<h2 class="anchored" data-anchor-id="what-is-data-wrangling">What is Data Wrangling?</h2>
<div class="medium_right">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2023-01-06-data-wrangling/horst-wrangle-monsters.jpg" alt="Two happy looking round fuzzy monsters, each holding a similarly shaped wrench with the word “wrangle” on it. Between their tools is held up a rectangular data table labeled “TIDY.”"></p>
</div>
<p>Okay, so you’ve got some data. Great start!</p>
<p>You might have had it handed to you by a collaborator, <a href="https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/">requested it via an API</a> or <a href="https://www.zakvarty.com/blog/2022-12-01-rvest/">scraped it from the raw html of a webpage</a>. In the worst case scenario, you’re an <em>actual</em> scientist (not just a <em>data</em> one) and you spent the last several months of your life painstakingly measuring flower petals or car parts. Now we really want to do something useful with that data.</p>
<p>We’ve seen already how you can load the data into R and pivot between wider and longer formats, but that probably isn’t enough to satisfy your curisity. You want to be able to view your data, manipulate and subset it, create new variables from exisiting ones and cross-reference your dataset with others. All of these are things possible in R and are known under various collective names including data manipulation, data munging and data wrangling.</p>
<p>I’ve decided to use the term data wranging here. That’s because data manipulation sounds boring a.f. and data munging is both unpleasant to say and makes me imagine we are squelching through some sort of information swamp.</p>
<p>In what follows I’ll give a fly-by tour of tools for data wrangling in R, showing some examples along the way. I’ll focus on some of the most common and useful operations and link out to some more extensive guides for wrangling your data in R, that you can refer back to as you need them.</p>
</section>
<section id="example-data-sets" class="level2">
<h2 class="anchored" data-anchor-id="example-data-sets">Example Data Sets</h2>
<p>To demonstrate some standard skills we will use some standard datasets that come built into any R installation. These are the <code>penguins</code> data set from <code>{palmerpenguins}</code> and the <code>mtcars</code> data set.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(palmerpenguins)</span>
<span id="cb1-2">pengins <span class="ot" style="color: #003B4F;">&lt;-</span> palmerpenguins<span class="sc" style="color: #5E5E5E;">::</span>penguins</span>
<span id="cb1-3">cars <span class="ot" style="color: #003B4F;">&lt;-</span> datasets<span class="sc" style="color: #5E5E5E;">::</span>mtcars</span></code></pre></div>
</div>
</section>
<section id="viewing-your-data" class="level2">
<h2 class="anchored" data-anchor-id="viewing-your-data">Viewing Your Data</h2>
<section id="view" class="level3">
<h3 class="anchored" data-anchor-id="view"><code>View()</code></h3>
<p>The <code>View()</code> function can be used to crease a spreadsheet-like view of your data. In RStudio this will open as a new tab.</p>
<p><code>View()</code> will work for any “matrix-like” R object, such as a tibble, data frame, vector or matrix. Note the capital letter - the function is called <code>View()</code>, not <code>view()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">View</span>(penguins)</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.zakvarty.com/blog/2023-01-06-data-wrangling/view-penguins-screenshot.png" class="img-fluid figure-img" style="width:60.0%"></p>
<p></p><figcaption class="figure-caption">Screenshot of RStduio files pane, containg a spreadsheet view of the palmer penguins data set.</figcaption><p></p>
</figure>
</div>
</section>
<section id="head" class="level3">
<h3 class="anchored" data-anchor-id="head"><code>head()</code></h3>
<p>For large data sets, you might not want (or be able to) view it all at once. You can then use <code>head()</code> to view the first few rows. The integer argument <code>n</code> specifies the number of rows you would like to return.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">head</span>(<span class="at" style="color: #657422;">x =</span> pengins, <span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 8
  species island    bill_length_mm bill_depth_mm flipper_l…¹ body_…² sex    year
  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;       &lt;int&gt;   &lt;int&gt; &lt;fct&gt; &lt;int&gt;
1 Adelie  Torgersen           39.1          18.7         181    3750 male   2007
2 Adelie  Torgersen           39.5          17.4         186    3800 fema…  2007
3 Adelie  Torgersen           40.3          18           195    3250 fema…  2007
# … with abbreviated variable names ¹​flipper_length_mm, ²​body_mass_g</code></pre>
</div>
</div>
</section>
<section id="str" class="level3">
<h3 class="anchored" data-anchor-id="str"><code>str()</code></h3>
<p>An alternative way to view the a large data set, or one with a complicated format is to examine its structure with <code>str()</code>. This is a useful way to inspect the structure of list-like objects, particularly when they’ve got a nested structure.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">str</span>(penguins)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tibble [344 × 8] (S3: tbl_df/tbl/data.frame)
 $ species          : Factor w/ 3 levels "Adelie","Chinstrap",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ island           : Factor w/ 3 levels "Biscoe","Dream",..: 3 3 3 3 3 3 3 3 3 3 ...
 $ bill_length_mm   : num [1:344] 39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...
 $ bill_depth_mm    : num [1:344] 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...
 $ flipper_length_mm: int [1:344] 181 186 195 NA 193 190 181 195 193 190 ...
 $ body_mass_g      : int [1:344] 3750 3800 3250 NA 3450 3650 3625 4675 3475 4250 ...
 $ sex              : Factor w/ 2 levels "female","male": 2 1 1 NA 1 2 1 2 NA NA ...
 $ year             : int [1:344] 2007 2007 2007 2007 2007 2007 2007 2007 2007 2007 ...</code></pre>
</div>
</div>
</section>
<section id="names" class="level3">
<h3 class="anchored" data-anchor-id="names"><code>names()</code></h3>
<p>Finally, if you just want to access the variable names you can do so with the <code>names()</code> function from base R.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;">names</span>(penguins)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "species"           "island"            "bill_length_mm"   
[4] "bill_depth_mm"     "flipper_length_mm" "body_mass_g"      
[7] "sex"               "year"             </code></pre>
</div>
</div>
<p>Similarly, you can explicitly access the row and column names of a data frame or tibble using <code>colnames()</code> or <code>rownames()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;">colnames</span>(cars)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "mpg"  "cyl"  "disp" "hp"   "drat" "wt"   "qsec" "vs"   "am"   "gear"
[11] "carb"</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;">rownames</span>(cars)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "Mazda RX4"           "Mazda RX4 Wag"       "Datsun 710"         
 [4] "Hornet 4 Drive"      "Hornet Sportabout"   "Valiant"            
 [7] "Duster 360"          "Merc 240D"           "Merc 230"           
[10] "Merc 280"            "Merc 280C"           "Merc 450SE"         
[13] "Merc 450SL"          "Merc 450SLC"         "Cadillac Fleetwood" 
[16] "Lincoln Continental" "Chrysler Imperial"   "Fiat 128"           
[19] "Honda Civic"         "Toyota Corolla"      "Toyota Corona"      
[22] "Dodge Challenger"    "AMC Javelin"         "Camaro Z28"         
[25] "Pontiac Firebird"    "Fiat X1-9"           "Porsche 914-2"      
[28] "Lotus Europa"        "Ford Pantera L"      "Ferrari Dino"       
[31] "Maserati Bora"       "Volvo 142E"         </code></pre>
</div>
</div>
<p>In the <code>cars</code> data, the car model are stored as the row names. This doesn’t really jive with our idea of tidy data - we’ll see how to fix that shortly.</p>
</section>
</section>
<section id="renaming-variables" class="level2">
<h2 class="anchored" data-anchor-id="renaming-variables">Renaming Variables</h2>
<section id="colnames" class="level3">
<h3 class="anchored" data-anchor-id="colnames"><code>colnames()</code></h3>
<p>The function <code>colnames()</code> can be used to set as well as to retrieve column names.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">cars_renamed <span class="ot" style="color: #003B4F;">&lt;-</span> cars </span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;">colnames</span>(cars_renamed)[<span class="dv" style="color: #AD0000;">1</span>] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"miles_per_gallon"</span></span>
<span id="cb13-3"><span class="fu" style="color: #4758AB;">colnames</span>(cars_renamed)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "miles_per_gallon" "cyl"              "disp"             "hp"              
 [5] "drat"             "wt"               "qsec"             "vs"              
 [9] "am"               "gear"             "carb"            </code></pre>
</div>
</div>
</section>
<section id="dplyrrename" class="level3">
<h3 class="anchored" data-anchor-id="dplyrrename"><code>dplyr::rename()</code></h3>
<p>We can also use functions from <code>{dplyr}</code> to rename columns. Let’s alter the second column name.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'dplyr'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:stats':

    filter, lag</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union</code></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">cars_renamed <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rename</span>(<span class="at" style="color: #657422;">.data =</span> cars_renamed, <span class="at" style="color: #657422;">cylinders =</span> cyl)</span>
<span id="cb19-2"><span class="fu" style="color: #4758AB;">colnames</span>(cars_renamed)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "miles_per_gallon" "cylinders"        "disp"             "hp"              
 [5] "drat"             "wt"               "qsec"             "vs"              
 [9] "am"               "gear"             "carb"            </code></pre>
</div>
</div>
<p>This could be done as part of a pipe, if we were making many alterations.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">cars_renamed <span class="ot" style="color: #003B4F;">&lt;-</span> cars_renamed <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb21-2">  <span class="fu" style="color: #4758AB;">rename</span>(<span class="at" style="color: #657422;">displacement =</span> disp) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb21-3">  <span class="fu" style="color: #4758AB;">rename</span>(<span class="at" style="color: #657422;">horse_power =</span> hp) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb21-4">  <span class="fu" style="color: #4758AB;">rename</span>(<span class="at" style="color: #657422;">rear_axel_ratio =</span> drat)</span>
<span id="cb21-5"></span>
<span id="cb21-6"><span class="fu" style="color: #4758AB;">colnames</span>(cars_renamed)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "miles_per_gallon" "cylinders"        "displacement"     "horse_power"     
 [5] "rear_axel_ratio"  "wt"               "qsec"             "vs"              
 [9] "am"               "gear"             "carb"            </code></pre>
</div>
</div>
<p>When using the dplyr function you have to remember the format <code>new_name = old_name</code>. This matches the format used to create a data frame or tibble, but is the opposite order to the python function of the same name and often catches people out.</p>
<p>In the section (#creating-new-variables) on creating new variables, we will see an alternative way of doing this by copying the column and then deleting the original.</p>
</section>
</section>
<section id="subsetting" class="level2">
<h2 class="anchored" data-anchor-id="subsetting">Subsetting</h2>
<section id="base-r" class="level3">
<h3 class="anchored" data-anchor-id="base-r">Base R</h3>
<p>In base R you can extract rows, columns and combinations thereof using index notation.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="co" style="color: #5E5E5E;"># First row</span></span>
<span id="cb23-2">penguins[<span class="dv" style="color: #AD0000;">1</span>, ]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 8
  species island    bill_length_mm bill_depth_mm flipper_l…¹ body_…² sex    year
  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;       &lt;int&gt;   &lt;int&gt; &lt;fct&gt; &lt;int&gt;
1 Adelie  Torgersen           39.1          18.7         181    3750 male   2007
# … with abbreviated variable names ¹​flipper_length_mm, ²​body_mass_g</code></pre>
</div>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="co" style="color: #5E5E5E;"># First Column </span></span>
<span id="cb25-2">penguins[ , <span class="dv" style="color: #AD0000;">1</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 344 × 1
   species
   &lt;fct&gt;  
 1 Adelie 
 2 Adelie 
 3 Adelie 
 4 Adelie 
 5 Adelie 
 6 Adelie 
 7 Adelie 
 8 Adelie 
 9 Adelie 
10 Adelie 
# … with 334 more rows</code></pre>
</div>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="co" style="color: #5E5E5E;"># Rows 2-3 of columns 1, 2 and 4</span></span>
<span id="cb27-2">penguins[<span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">3</span>, <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">4</span>)]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 3
  species island    bill_depth_mm
  &lt;fct&gt;   &lt;fct&gt;             &lt;dbl&gt;
1 Adelie  Torgersen          17.4
2 Adelie  Torgersen          18  </code></pre>
</div>
</div>
<p>Using negative indexing you can remove rows or columns</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="co" style="color: #5E5E5E;"># Drop all but first row</span></span>
<span id="cb29-2">penguins[<span class="sc" style="color: #5E5E5E;">-</span>(<span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">344</span>), ]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 8
  species island    bill_length_mm bill_depth_mm flipper_l…¹ body_…² sex    year
  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;       &lt;int&gt;   &lt;int&gt; &lt;fct&gt; &lt;int&gt;
1 Adelie  Torgersen           39.1          18.7         181    3750 male   2007
# … with abbreviated variable names ¹​flipper_length_mm, ²​body_mass_g</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="co" style="color: #5E5E5E;"># Drop all but first column </span></span>
<span id="cb31-2">penguins[ , <span class="sc" style="color: #5E5E5E;">-</span>(<span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">8</span>)]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 344 × 1
   species
   &lt;fct&gt;  
 1 Adelie 
 2 Adelie 
 3 Adelie 
 4 Adelie 
 5 Adelie 
 6 Adelie 
 7 Adelie 
 8 Adelie 
 9 Adelie 
10 Adelie 
# … with 334 more rows</code></pre>
</div>
</div>
<p>You can also select rows or columns by their names. This can be done using the bracket syntax (<code>[ ]</code>) or the dollar syntax (<code>$</code>).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">pengins[ , <span class="st" style="color: #20794D;">"species"</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 344 × 1
   species
   &lt;fct&gt;  
 1 Adelie 
 2 Adelie 
 3 Adelie 
 4 Adelie 
 5 Adelie 
 6 Adelie 
 7 Adelie 
 8 Adelie 
 9 Adelie 
10 Adelie 
# … with 334 more rows</code></pre>
</div>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">penguins<span class="sc" style="color: #5E5E5E;">$</span>species</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  [1] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
  [8] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [15] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [22] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [29] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [36] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [43] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [50] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [57] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [64] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [71] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [78] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [85] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [92] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
 [99] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
[106] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
[113] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
[120] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
[127] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
[134] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
[141] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   
[148] Adelie    Adelie    Adelie    Adelie    Adelie    Gentoo    Gentoo   
[155] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[162] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[169] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[176] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[183] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[190] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[197] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[204] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[211] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[218] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[225] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[232] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[239] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[246] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[253] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[260] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[267] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   
[274] Gentoo    Gentoo    Gentoo    Chinstrap Chinstrap Chinstrap Chinstrap
[281] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap
[288] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap
[295] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap
[302] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap
[309] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap
[316] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap
[323] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap
[330] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap
[337] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap
[344] Chinstrap
Levels: Adelie Chinstrap Gentoo</code></pre>
</div>
</div>
<p>Since <code>penguins</code> is a tibble, these return different types of object. Sub-setting a tibble with bracket syntax will return a tibble, while extracting a column using the dollar syntax returns a vector of values.</p>
</section>
<section id="filter-and-select" class="level3">
<h3 class="anchored" data-anchor-id="filter-and-select"><code>filter()</code> and <code>select()</code></h3>
<p><code>{dplyr}</code> has two functions for subsetting, <code>filter()</code> subsets by rows and <code>select()</code> subsets by column.</p>
<p>In both functions you list what you would like to retain. Filter and select calls can be piped together to subset based on row and column values.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb37-2">  <span class="fu" style="color: #4758AB;">select</span>(species, island,body_mass_g)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 344 × 3
   species island    body_mass_g
   &lt;fct&gt;   &lt;fct&gt;           &lt;int&gt;
 1 Adelie  Torgersen        3750
 2 Adelie  Torgersen        3800
 3 Adelie  Torgersen        3250
 4 Adelie  Torgersen          NA
 5 Adelie  Torgersen        3450
 6 Adelie  Torgersen        3650
 7 Adelie  Torgersen        3625
 8 Adelie  Torgersen        4675
 9 Adelie  Torgersen        3475
10 Adelie  Torgersen        4250
# … with 334 more rows</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb39-2">  <span class="fu" style="color: #4758AB;">select</span>(species, island, body_mass_g) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb39-3">  <span class="fu" style="color: #4758AB;">filter</span>(body_mass_g <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">6000</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 3
  species island body_mass_g
  &lt;fct&gt;   &lt;fct&gt;        &lt;int&gt;
1 Gentoo  Biscoe        6300
2 Gentoo  Biscoe        6050</code></pre>
</div>
</div>
<p>Subsetting rows can be inverted by negating the <code>filter()</code> statement.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb41-2">  <span class="fu" style="color: #4758AB;">select</span>(species, island, body_mass_g) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb41-3">  <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span>(body_mass_g <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">6000</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 340 × 3
   species island    body_mass_g
   &lt;fct&gt;   &lt;fct&gt;           &lt;int&gt;
 1 Adelie  Torgersen        3750
 2 Adelie  Torgersen        3800
 3 Adelie  Torgersen        3250
 4 Adelie  Torgersen        3450
 5 Adelie  Torgersen        3650
 6 Adelie  Torgersen        3625
 7 Adelie  Torgersen        4675
 8 Adelie  Torgersen        3475
 9 Adelie  Torgersen        4250
10 Adelie  Torgersen        3300
# … with 330 more rows</code></pre>
</div>
</div>
<p>and dropping columns can done by selecting all columns except the one(s) you want to drop.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb43-2">  <span class="fu" style="color: #4758AB;">select</span>(species, island, body_mass_g) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb43-3">  <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span>(body_mass_g <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">6000</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb43-4">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">c</span>(species, island))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 340 × 1
   body_mass_g
         &lt;int&gt;
 1        3750
 2        3800
 3        3250
 4        3450
 5        3650
 6        3625
 7        4675
 8        3475
 9        4250
10        3300
# … with 330 more rows</code></pre>
</div>
</div>
</section>
</section>
<section id="creating-new-variables" class="level2">
<h2 class="anchored" data-anchor-id="creating-new-variables">Creating New Variables</h2>
<section id="base-r-1" class="level3">
<h3 class="anchored" data-anchor-id="base-r-1">Base R</h3>
<p>We can create new variables in base R by assigning a vector of the correct length to a new column name.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1">cars_renamed<span class="sc" style="color: #5E5E5E;">$</span>weight <span class="ot" style="color: #003B4F;">&lt;-</span> cars_renamed<span class="sc" style="color: #5E5E5E;">$</span>wt</span></code></pre></div>
</div>
<p>If we then drop the original column from the data frame, this gives us an alternative way of renaming columns.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">cars_renamed <span class="ot" style="color: #003B4F;">&lt;-</span> cars_renamed[ ,<span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">which</span>(<span class="fu" style="color: #4758AB;">names</span>(cars_renamed) <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"wt"</span>)]</span>
<span id="cb46-2"><span class="fu" style="color: #4758AB;">head</span>(cars_renamed, <span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                  miles_per_gallon cylinders displacement horse_power
Mazda RX4                     21.0         6          160         110
Mazda RX4 Wag                 21.0         6          160         110
Datsun 710                    22.8         4          108          93
Hornet 4 Drive                21.4         6          258         110
Hornet Sportabout             18.7         8          360         175
                  rear_axel_ratio  qsec vs am gear carb weight
Mazda RX4                    3.90 16.46  0  1    4    4  2.620
Mazda RX4 Wag                3.90 17.02  0  1    4    4  2.875
Datsun 710                   3.85 18.61  1  1    4    1  2.320
Hornet 4 Drive               3.08 19.44  1  0    3    1  3.215
Hornet Sportabout            3.15 17.02  0  0    3    2  3.440</code></pre>
</div>
</div>
<p>One thing to be aware of is that this operation does not preserve column ordering.</p>
<p>Generally speaking, code that relies on columns being in a specific order is fragile - it breaks easily. If possible, you should try to write your code in another way that’s robust to column reordering. I’ve done that here when removing the <code>wt</code> column by looking up the column index as part of my code, rather than assuming it will always be the fourth column.</p>
</section>
<section id="dplyrmutate" class="level3">
<h3 class="anchored" data-anchor-id="dplyrmutate"><code>dplyr::mutate()</code></h3>
<p>The function from <code>{dplyr}</code> to create new columns is <code>mutate()</code>. Let’s create another column that has the car’s weight in kilogrammes rather than tonnes.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">cars_renamed <span class="ot" style="color: #003B4F;">&lt;-</span> cars_renamed <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb48-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">weight_kg =</span> weight <span class="sc" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">1000</span>)</span>
<span id="cb48-3"></span>
<span id="cb48-4">cars_renamed <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb48-5">  <span class="fu" style="color: #4758AB;">select</span>(miles_per_gallon, cylinders, displacement, weight, weight_kg) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb48-6">  <span class="fu" style="color: #4758AB;">head</span>(<span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                  miles_per_gallon cylinders displacement weight weight_kg
Mazda RX4                     21.0         6          160  2.620      2620
Mazda RX4 Wag                 21.0         6          160  2.875      2875
Datsun 710                    22.8         4          108  2.320      2320
Hornet 4 Drive                21.4         6          258  3.215      3215
Hornet Sportabout             18.7         8          360  3.440      3440</code></pre>
</div>
</div>
<p>You can also create new columns that combine multiple other columns</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1">cars_renamed <span class="ot" style="color: #003B4F;">&lt;-</span> cars_renamed <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb50-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">cylinder_adjusted_mpg =</span> miles_per_gallon <span class="sc" style="color: #5E5E5E;">/</span> cylinders)</span></code></pre></div>
</div>
</section>
<section id="rownames_to_column" class="level3">
<h3 class="anchored" data-anchor-id="rownames_to_column"><code>rownames_to_column()</code></h3>
<p>One useful example of adding an additional row to a data frame is to convert its row names to a column of the data fame.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1">cars <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb51-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">model =</span> <span class="fu" style="color: #4758AB;">rownames</span>(cars_renamed)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb51-3">  <span class="fu" style="color: #4758AB;">select</span>(mpg, cyl, model) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb51-4">  <span class="fu" style="color: #4758AB;">head</span>(<span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                   mpg cyl             model
Mazda RX4         21.0   6         Mazda RX4
Mazda RX4 Wag     21.0   6     Mazda RX4 Wag
Datsun 710        22.8   4        Datsun 710
Hornet 4 Drive    21.4   6    Hornet 4 Drive
Hornet Sportabout 18.7   8 Hornet Sportabout</code></pre>
</div>
</div>
<p>Therea neat function called <code>rownames_to_column()</code> in <code>{tibble}</code> which will add this as the first column and remove the row names all in one step.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1">cars <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb53-2">  tibble<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">rownames_to_column</span>(<span class="at" style="color: #657422;">var =</span> <span class="st" style="color: #20794D;">"model"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb53-3">  <span class="fu" style="color: #4758AB;">head</span>(<span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>              model  mpg cyl disp  hp drat    wt  qsec vs am gear carb
1         Mazda RX4 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
2     Mazda RX4 Wag 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
3        Datsun 710 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
4    Hornet 4 Drive 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
5 Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2</code></pre>
</div>
</div>
</section>
<section id="rowids_to_column" class="level3">
<h3 class="anchored" data-anchor-id="rowids_to_column"><code>rowids_to_column()</code></h3>
<p>Another function from <code>{tibble}</code> adds the row id of each observation as a new column. This is often useful when ordering or combining tables.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1">cars <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb55-2">  tibble<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">rowid_to_column</span>(<span class="at" style="color: #657422;">var =</span> <span class="st" style="color: #20794D;">"row_id"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb55-3">  <span class="fu" style="color: #4758AB;">head</span>(<span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  row_id  mpg cyl disp  hp drat    wt  qsec vs am gear carb
1      1 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
2      2 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
3      3 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
4      4 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
5      5 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2</code></pre>
</div>
</div>
</section>
</section>
<section id="summaries" class="level2">
<h2 class="anchored" data-anchor-id="summaries">Summaries</h2>
<p>The <code>summarise()</code> function allows you to collapse a data frame into a single row, which gives a summary statistic of your choosing.</p>
<p>This can be used to calculate a single summary</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb57-1"><span class="fu" style="color: #4758AB;">summarise</span>(penguins, <span class="at" style="color: #657422;">average_bill_length_mm =</span> <span class="fu" style="color: #4758AB;">mean</span>(bill_length_mm))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 1
  average_bill_length_mm
                   &lt;dbl&gt;
1                     NA</code></pre>
</div>
</div>
<p>Since we have missing values, we might instead want to calculate the mean of the recorded values.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb59-1"><span class="fu" style="color: #4758AB;">summarise</span>(penguins, <span class="at" style="color: #657422;">average_bill_length_mm =</span> <span class="fu" style="color: #4758AB;">mean</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 1
  average_bill_length_mm
                   &lt;dbl&gt;
1                   43.9</code></pre>
</div>
</div>
<p>We can also use <code>summarise()</code> to gather multiple summaries in a single data frame.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb61-1">bill_length_mm_summary <span class="ot" style="color: #003B4F;">&lt;-</span> penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb61-2">  <span class="fu" style="color: #4758AB;">summarise</span>(</span>
<span id="cb61-3">    <span class="at" style="color: #657422;">mean =</span> <span class="fu" style="color: #4758AB;">mean</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb61-4">    <span class="at" style="color: #657422;">median =</span> <span class="fu" style="color: #4758AB;">median</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb61-5">    <span class="at" style="color: #657422;">min =</span> <span class="fu" style="color: #4758AB;">max</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb61-6">    <span class="at" style="color: #657422;">q_0 =</span> <span class="fu" style="color: #4758AB;">min</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb61-7">    <span class="at" style="color: #657422;">q_1 =</span> <span class="fu" style="color: #4758AB;">quantile</span>(bill_length_mm, <span class="at" style="color: #657422;">prob =</span> <span class="fl" style="color: #AD0000;">0.25</span>, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb61-8">    <span class="at" style="color: #657422;">q_2 =</span> <span class="fu" style="color: #4758AB;">median</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb61-9">    <span class="at" style="color: #657422;">q_3 =</span> <span class="fu" style="color: #4758AB;">quantile</span>(bill_length_mm, <span class="at" style="color: #657422;">prob =</span> <span class="fl" style="color: #AD0000;">0.25</span>, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb61-10">    <span class="at" style="color: #657422;">q_4 =</span> <span class="fu" style="color: #4758AB;">max</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>))</span>
<span id="cb61-11"></span>
<span id="cb61-12">bill_length_mm_summary</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 8
   mean median   min   q_0   q_1   q_2   q_3   q_4
  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1  43.9   44.4  59.6  32.1  39.2  44.4  39.2  59.6</code></pre>
</div>
</div>
<p>In all this isn’t overly exciting. You might, rightly, wonder why you’d want to use these <code>summarise()</code> calls when we could just use the simpler base R calls directly.</p>
<p>One benefit is that the summarise calls ensure consistent output. However, the main advantage comes when you want to apply these summaries to distinct subgroups of the data.</p>
</section>
<section id="grouped-operations" class="level2">
<h2 class="anchored" data-anchor-id="grouped-operations">Grouped Operations</h2>
<p>The real benefit of <code>summarise()</code> comes from its combination with <code>group_by()</code>. This allows to you calculate the same summary statistics for each level of a factor with only one additional line of code. Here we’re re-calculating the same set of summary statistics we just found for all penguins, but for each individual species.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb63-1">penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb63-2">  <span class="fu" style="color: #4758AB;">group_by</span>(species) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb63-3">  <span class="fu" style="color: #4758AB;">summarise</span>(</span>
<span id="cb63-4">    <span class="at" style="color: #657422;">mean =</span> <span class="fu" style="color: #4758AB;">mean</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb63-5">    <span class="at" style="color: #657422;">median =</span> <span class="fu" style="color: #4758AB;">median</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb63-6">    <span class="at" style="color: #657422;">min =</span> <span class="fu" style="color: #4758AB;">max</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb63-7">    <span class="at" style="color: #657422;">q_0 =</span> <span class="fu" style="color: #4758AB;">min</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb63-8">    <span class="at" style="color: #657422;">q_1 =</span> <span class="fu" style="color: #4758AB;">quantile</span>(bill_length_mm, <span class="at" style="color: #657422;">prob =</span> <span class="fl" style="color: #AD0000;">0.25</span>, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb63-9">    <span class="at" style="color: #657422;">q_2 =</span> <span class="fu" style="color: #4758AB;">median</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb63-10">    <span class="at" style="color: #657422;">q_3 =</span> <span class="fu" style="color: #4758AB;">quantile</span>(bill_length_mm, <span class="at" style="color: #657422;">prob =</span> <span class="fl" style="color: #AD0000;">0.25</span>, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb63-11">    <span class="at" style="color: #657422;">q_4 =</span> <span class="fu" style="color: #4758AB;">max</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 9
  species    mean median   min   q_0   q_1   q_2   q_3   q_4
  &lt;fct&gt;     &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1 Adelie     38.8   38.8  46    32.1  36.8  38.8  36.8  46  
2 Chinstrap  48.8   49.6  58    40.9  46.3  49.6  46.3  58  
3 Gentoo     47.5   47.3  59.6  40.9  45.3  47.3  45.3  59.6</code></pre>
</div>
</div>
<p>You can group by multiple factors to calculate summaries for each distinct combination of levels within your data set. Here we group by combinations of species and the island to which they belong.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb65-1">penguin_summary_stats <span class="ot" style="color: #003B4F;">&lt;-</span> penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb65-2">  <span class="fu" style="color: #4758AB;">group_by</span>(species, island) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb65-3">  <span class="fu" style="color: #4758AB;">summarise</span>(</span>
<span id="cb65-4">    <span class="at" style="color: #657422;">mean =</span> <span class="fu" style="color: #4758AB;">mean</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb65-5">    <span class="at" style="color: #657422;">median =</span> <span class="fu" style="color: #4758AB;">median</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb65-6">    <span class="at" style="color: #657422;">min =</span> <span class="fu" style="color: #4758AB;">max</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb65-7">    <span class="at" style="color: #657422;">q_0 =</span> <span class="fu" style="color: #4758AB;">min</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb65-8">    <span class="at" style="color: #657422;">q_1 =</span> <span class="fu" style="color: #4758AB;">quantile</span>(bill_length_mm, <span class="at" style="color: #657422;">prob =</span> <span class="fl" style="color: #AD0000;">0.25</span>, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb65-9">    <span class="at" style="color: #657422;">q_2 =</span> <span class="fu" style="color: #4758AB;">median</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb65-10">    <span class="at" style="color: #657422;">q_3 =</span> <span class="fu" style="color: #4758AB;">quantile</span>(bill_length_mm, <span class="at" style="color: #657422;">prob =</span> <span class="fl" style="color: #AD0000;">0.25</span>, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb65-11">    <span class="at" style="color: #657422;">q_4 =</span> <span class="fu" style="color: #4758AB;">max</span>(bill_length_mm, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`summarise()` has grouped output by 'species'. You can override using the
`.groups` argument.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb67-1">penguin_summary_stats</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 10
# Groups:   species [3]
  species   island     mean median   min   q_0   q_1   q_2   q_3   q_4
  &lt;fct&gt;     &lt;fct&gt;     &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1 Adelie    Biscoe     39.0   38.7  45.6  34.5  37.7  38.7  37.7  45.6
2 Adelie    Dream      38.5   38.6  44.1  32.1  36.8  38.6  36.8  44.1
3 Adelie    Torgersen  39.0   38.9  46    33.5  36.7  38.9  36.7  46  
4 Chinstrap Dream      48.8   49.6  58    40.9  46.3  49.6  46.3  58  
5 Gentoo    Biscoe     47.5   47.3  59.6  40.9  45.3  47.3  45.3  59.6</code></pre>
</div>
</div>
<section id="ungrouping" class="level3">
<h3 class="anchored" data-anchor-id="ungrouping">Ungrouping</h3>
<p>By default, each call to <code>summarise()</code> will undo one level of grouping. This means that our previous result was still grouped by species.</p>
<p>(We can see this by examining the structure of the returned data frame. The first line tells us that this this is an S3 object of class “grouped_df”, which inherits its properties from a “tbl_df”, whose properties in turn come from “tbl” and “data.frame” objects.)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb69-1"><span class="fu" style="color: #4758AB;">class</span>(penguin_summary_stats)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "grouped_df" "tbl_df"     "tbl"        "data.frame"</code></pre>
</div>
</div>
<p>Since we have grouped by two variables, R expects us to use two summaries before returning a data frame (or tibble) that is not grouped. One way to satisfy this is to use apply a second summary at the species level of grouping.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb71-1">penguin_summary_stats <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb71-2">  <span class="fu" style="color: #4758AB;">summarise_all</span>(mean, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in mean.default(island, na.rm = TRUE): argument is not numeric or
logical: returning NA

Warning in mean.default(island, na.rm = TRUE): argument is not numeric or
logical: returning NA

Warning in mean.default(island, na.rm = TRUE): argument is not numeric or
logical: returning NA</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 10
  species   island  mean median   min   q_0   q_1   q_2   q_3   q_4
  &lt;fct&gt;      &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1 Adelie        NA  38.8   38.7  45.2  33.4  37.0  38.7  37.0  45.2
2 Chinstrap     NA  48.8   49.6  58    40.9  46.3  49.6  46.3  58  
3 Gentoo        NA  47.5   47.3  59.6  40.9  45.3  47.3  45.3  59.6</code></pre>
</div>
</div>
<p>However, we won’t always want to do apply another summary. In that case, we can undo the grouping using <code>ungroup()</code>. Remembering to ungroup is a gotcha and cause of confusion when working with multiple-group summaries.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb74-1"><span class="fu" style="color: #4758AB;">ungroup</span>(penguin_summary_stats)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 10
  species   island     mean median   min   q_0   q_1   q_2   q_3   q_4
  &lt;fct&gt;     &lt;fct&gt;     &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1 Adelie    Biscoe     39.0   38.7  45.6  34.5  37.7  38.7  37.7  45.6
2 Adelie    Dream      38.5   38.6  44.1  32.1  36.8  38.6  36.8  44.1
3 Adelie    Torgersen  39.0   38.9  46    33.5  36.7  38.9  36.7  46  
4 Chinstrap Dream      48.8   49.6  58    40.9  46.3  49.6  46.3  58  
5 Gentoo    Biscoe     47.5   47.3  59.6  40.9  45.3  47.3  45.3  59.6</code></pre>
</div>
</div>
<p>There’s an alternative method to achieve the same thing in a single step when using <code>{dplyr}</code> versions 1.0.0 and above. This is to to set the <code>.groups</code> parameter of the <code>summarise()</code> function call, which determines the grouping of the returned data frame.</p>
<p>The <code>.groups</code> parameter and can take 4 possible values:</p>
<ul>
<li><p>“drop_last”: dropping the last level of grouping (The only option before v1.0.0);</p></li>
<li><p>“drop”: All levels of grouping are dropped;</p></li>
<li><p>“keep”: Same grouping structure as <code>.data</code>;</p></li>
<li><p>“rowwise”: Each row is its own group.</p></li>
</ul>
<p>By default, “drop_last” is used if all the results have 1 row and “keep” is used otherwise.</p>
</section>
<section id="reordering-factors" class="level3">
<h3 class="anchored" data-anchor-id="reordering-factors">Reordering Factors</h3>
<p>R stored factors as integer values, which it then maps to a set of labels. Only factor levels that appear in your data will be assigned a coded integer value and the mapping between factor levels and integers will depend on the order that the labels appear in your data.</p>
<p>This can be annoying, particularly when your factor levels relate to properties that aren’t numerical but do have an inherent ordering to them. In the example below, we have the t-shirt size of twelve people.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb76-1">tshirts <span class="ot" style="color: #003B4F;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb76-2">  <span class="at" style="color: #657422;">id =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">12</span>, </span>
<span id="cb76-3">  <span class="at" style="color: #657422;">size =</span> <span class="fu" style="color: #4758AB;">as.factor</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"L"</span>, <span class="cn" style="color: #8f5902;">NA</span>, <span class="st" style="color: #20794D;">"M"</span>, <span class="st" style="color: #20794D;">"S"</span>, <span class="st" style="color: #20794D;">"XS"</span>, <span class="st" style="color: #20794D;">"M"</span>, <span class="st" style="color: #20794D;">"XXL"</span>, <span class="st" style="color: #20794D;">"L"</span>, <span class="st" style="color: #20794D;">"XS"</span>, <span class="st" style="color: #20794D;">"M"</span>, <span class="st" style="color: #20794D;">"L"</span>, <span class="st" style="color: #20794D;">"S"</span>))</span>
<span id="cb76-4">)</span>
<span id="cb76-5"></span>
<span id="cb76-6"><span class="fu" style="color: #4758AB;">levels</span>(tshirts<span class="sc" style="color: #5E5E5E;">$</span>size)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "L"   "M"   "S"   "XS"  "XXL"</code></pre>
</div>
</div>
<p>Annoyingly, the sizes aren’t in order and extra large is not included because it is not included in the sample. This leads to awkward summary tables (and plots).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb78-1">tshirts <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">group_by</span>(size) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">count =</span> <span class="fu" style="color: #4758AB;">n</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 2
  size  count
  &lt;fct&gt; &lt;int&gt;
1 L         3
2 M         3
3 S         2
4 XS        2
5 XXL       1
6 &lt;NA&gt;      1</code></pre>
</div>
</div>
<p>We can fix this by creating a new variable with the factors explicitly coded in the correct order. We also need to sepecify that we should not drop empty groups as part of <code>group_by()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb80-1">tidy_tshirt_levels <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"XS"</span>, <span class="st" style="color: #20794D;">"S"</span>, <span class="st" style="color: #20794D;">"M"</span>, <span class="st" style="color: #20794D;">"L"</span>, <span class="st" style="color: #20794D;">"XL"</span>, <span class="st" style="color: #20794D;">"XXL"</span>, <span class="cn" style="color: #8f5902;">NA</span>)</span>
<span id="cb80-2"></span>
<span id="cb80-3">tshirts <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb80-4">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">size_tidy =</span> <span class="fu" style="color: #4758AB;">factor</span>(size, <span class="at" style="color: #657422;">levels =</span> tidy_tshirt_levels)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb80-5">  <span class="fu" style="color: #4758AB;">group_by</span>(size_tidy, <span class="at" style="color: #657422;">.drop =</span> <span class="cn" style="color: #8f5902;">FALSE</span> ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb80-6">  <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">count =</span> <span class="fu" style="color: #4758AB;">n</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 7 × 2
  size_tidy count
  &lt;fct&gt;     &lt;int&gt;
1 XS            2
2 S             2
3 M             3
4 L             3
5 XL            0
6 XXL           1
7 &lt;NA&gt;          1</code></pre>
</div>
</div>
</section>
</section>
<section id="be-aware-factors" class="level2">
<h2 class="anchored" data-anchor-id="be-aware-factors">Be Aware: Factors</h2>
<p>As we have seen a little already, categorical variables can cause issues when wrangling and presenting data in R. All of these problems are solvable using base R techniques but the <code>{forcats}</code> package provides tools for the most common of these problems. This includes functions for changing the order of factor levels or the values with which they are associated.</p>
<p>Some examples functions from the package include:</p>
<ul>
<li><code>fct_reorder()</code>: Reordering a factor by another variable.</li>
<li><code>fct_infreq()</code>: Reordering a factor by the frequency of values.</li>
<li><code>fct_relevel()</code>: Changing the order of a factor by hand.</li>
<li><code>fct_lump()</code>: Collapsing the least/most frequent values of a factor into “other”.</li>
</ul>
<p>Examples of each of these can be found in the <a href="https://forcats.tidyverse.org/articles/forcats.html">forcats vignette</a> or the <a href="(https://r4ds.had.co.nz/factors.html)">factors chapter</a> of R for data science.</p>
</section>
<section id="be-aware-strings" class="level2">
<h2 class="anchored" data-anchor-id="be-aware-strings">Be Aware: Strings</h2>
<p>Working with and analysing text data is a skill unto itself. However, it is useful to be able to do some basic manipulation of character strings programatically.</p>
<p>Because R was developed as a statistical programming language, it is well suited to the computational and modelling aspects of working with text data but the base R string manipulation functions can be a bit unwieldy at times.</p>
<p>The <code>{stringr}</code> package aims to combat this by providing useful helper functions for a range of text management problems. Even when not analysing text data these can be useful, for example to remove prefixes on a lot of column names.</p>
<div class="cell">
<div class="cell-output cell-output-stderr">
<pre><code>Warning: `as_data_frame()` was deprecated in tibble 2.0.0.
ℹ Please use `as_tibble()` instead.
ℹ The signature and semantics have changed, see `?as_tibble`.</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if
`.name_repair` is omitted as of tibble 2.0.0.
ℹ Using compatibility `.name_repair`.
ℹ The deprecated feature was likely used in the tibble package.
  Please report the issue at &lt;]8;;https://github.com/tidyverse/tibble/issueshttps://github.com/tidyverse/tibble/issues]8;;&gt;.</code></pre>
</div>
</div>
<p>Suppose we wanted to keep only the text following an underscore in these column names. We could do that by using a regular expression to extract lower-case or upper-case letters which follow an underscore.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb84-1"><span class="fu" style="color: #4758AB;">head</span>(poorly_named_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 11
  observatio…¹   V1_A   V2_B   V3_C    V4_D    V5_E   V6_F   V7_G   V8_H    V9_I
         &lt;int&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;
1            1 -0.199 -0.729  1.14   0.0205 -0.714  -1.14  0.786  -0.926 -0.740 
2            2 -0.956 -1.71  -0.184  1.44   -1.97   -0.470 0.0393  1.42  -2.49  
3            3  0.585 -1.06  -1.43   0.361   0.0141  0.585 1.01   -1.90  -0.0825
4            4  0.624  1.17   0.263  1.72   -0.0808  0.707 1.93   -0.675  0.448 
5            5  0.425 -0.190 -0.360 -0.443   0.134  -0.339 0.0577  1.21  -1.38  
6            6  0.169  1.40   1.82  -0.999   1.14   -0.377 0.471   0.934  0.604 
# … with 1 more variable: V10_J &lt;dbl&gt;, and abbreviated variable name
#   ¹​observation_id</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb86-1">stringr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">str_extract</span>(<span class="fu" style="color: #4758AB;">names</span>(poorly_named_df), <span class="at" style="color: #657422;">pattern =</span> <span class="st" style="color: #20794D;">"(?&lt;=_)([a-zA-Z]+)"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "id" "A"  "B"  "C"  "D"  "E"  "F"  "G"  "H"  "I"  "J" </code></pre>
</div>
</div>
<p>Alternatively, can avoid using regular expressions. We can split each column name at the underscore and keep only the second part of each string.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb88-1"><span class="co" style="color: #5E5E5E;"># split column names at underscores and inspect structure of resuting object</span></span>
<span id="cb88-2">split_strings <span class="ot" style="color: #003B4F;">&lt;-</span> stringr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">str_split</span>(<span class="fu" style="color: #4758AB;">names</span>(poorly_named_df), <span class="at" style="color: #657422;">pattern =</span> <span class="st" style="color: #20794D;">"_"</span>)</span>
<span id="cb88-3"><span class="fu" style="color: #4758AB;">str</span>(split_strings)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>List of 11
 $ : chr [1:2] "observation" "id"
 $ : chr [1:2] "V1" "A"
 $ : chr [1:2] "V2" "B"
 $ : chr [1:2] "V3" "C"
 $ : chr [1:2] "V4" "D"
 $ : chr [1:2] "V5" "E"
 $ : chr [1:2] "V6" "F"
 $ : chr [1:2] "V7" "G"
 $ : chr [1:2] "V8" "H"
 $ : chr [1:2] "V9" "I"
 $ : chr [1:2] "V10" "J"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb90-1"><span class="co" style="color: #5E5E5E;"># keep only the second element of each character vector in the list</span></span>
<span id="cb90-2">purrr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">map_chr</span>(split_strings, <span class="cf" style="color: #003B4F;">function</span>(x){x[<span class="dv" style="color: #AD0000;">2</span>]})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "id" "A"  "B"  "C"  "D"  "E"  "F"  "G"  "H"  "I"  "J" </code></pre>
</div>
</div>
<p>Again, unless you plan to work extensively with text data, I would recommend that you look up such string manipulations as you need them. The <a href="https://r4ds.had.co.nz/strings.html#strings">strings</a> section of R for Data Science is a useful starting point.</p>
</section>
<section id="be-aware-date-times" class="level2">
<h2 class="anchored" data-anchor-id="be-aware-date-times">Be Aware: Date-Times</h2>
<p>Remember all the fuss we made about storing dates in the ISO standard format? That was because dates and times are complicated enough to work with before adding extra ambiguity.</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Ctext%7BYYYY%7D%20-%20%5Ctext%7BMM%7D%20-%20%5Ctext%7BDD%7D"></p>
<p>Dates, times and time intervals have to reconcile two factors: the physical orbit of the Earth around the sun and the social and geopolitical mechanisms that determine how we measure and record the passing of time. This makes the history of date and time records fascinating and can make working with this type of data complicated.</p>
<p>Moving from larger to smaller time spans: leap years alter the number of days in a year, months are of variable length (with February’s length changing from year to year). If your data are measured in a place that uses daylight saving, then one day a year will be 23 hours long and another will be 25 hours long. To make things worse, the dates and the hour at which the clocks change are not uniform across countries, which might be in distinct time zones that themselves change over time.</p>
<p>Even at the level of minutes and seconds we aren’t safe - since the Earth’s orbit is gradually slowing down a leap second is added approximately every 21 months. Nor are things any better when looking at longer time scales or across cultures, where we might have to account for different calendars: months are added removed and altered over time, other calendar systems still take different approaches to measuring time and using different units and origin points.</p>
<p>With all of these issues you have to be very careful when working with date and time data. Functions to help you with this can be found in the <code>{lubridate}</code> package, with examples in the <a href="https://r4ds.had.co.nz/dates-and-times.html#dates-and-times">dates and times</a> chapter of R for data science.</p>
<!--
- How many days are there in a year? (365-366)
- How many months days are there in a month? (28-31)
- How many hours are there in a day? (23-25)
- How many seconds are there in a minute? (60-61)
- What calendar are you using?
  - How many months are there in the year? 
  - When does a year begin?
-->
</section>
<section id="be-aware-relational-data" class="level2">
<h2 class="anchored" data-anchor-id="be-aware-relational-data">Be Aware: Relational Data</h2>
<p>When the data you need are stored across two or more data frames you need to be able to cross-reference those and match up values for observational unit. This sort of data is know as relational data, and is used extensively in data science.</p>
<p>The variables you use to match observational units across data frames are known as <em>keys</em>. The primary key belongs to the first table and the foreign key belongs to the secondary table. There are various ways to join these data frames, depending on if you want to retain.</p>
<section id="join-types" class="level4">
<h4 class="anchored" data-anchor-id="join-types">Join types</h4>
<p>You might want to keep only observational units that have key variables values in both data frames, this is known as an inner join.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.zakvarty.com/blog/2023-01-06-data-wrangling/join-inner.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Inner join diagram. Source: R for Data Science</figcaption><p></p>
</figure>
</div>
<p>You might instead want to keep all units from the primary table but pad with NAs where there is not a corresponding foreign key in the second table. This results in an <strong>(outer) left-join</strong>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.zakvarty.com/blog/2023-01-06-data-wrangling/join-left-right-full.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Diagram for left, right and outer joins. Source: R for Data Science</figcaption><p></p>
</figure>
</div>
<p>Conversely, you might keep all units from the second table but pad with NAs where there is not a corresponding foreign key in the primary table. This is imaginatively named an <strong>(outer) right-join</strong>.</p>
<p>The final common join type is an outer join, in which all observational units from either table are retained and all missing values are padded with NAs. This is known as an <strong>(outer) full join</strong>.</p>
<p>Things get more complicated when keys do not uniquely identify observational units in one or both tables. I’d recommend you start exploring these ideas with the <a href="">relational data</a> chapter of R for Data Science.</p>
</section>
<section id="why-and-where-to-learn-more" class="level4">
<h4 class="anchored" data-anchor-id="why-and-where-to-learn-more">Why and where to learn more</h4>
<p>Working with relational data is essential to getting any data science up and running out in the wilds of reality. This is because businesses and companies don’t store all of their data in a huge single csv file. For one this isn’t very efficient, because most cells would be empty. Secondly, it’s not a very secure approach, since you can’t grant partial access to the data. That’s why information is usually stored in many data frames (more generically known as tables) within one or more databases.</p>
<p>These data silos are created, maintained, accessed and destroyed using a relational data base management system. These management systems use code to manage and access the stored data, just like we have seen in the dplyr commands above. You might well have heard of the SQL programming language (and its many variants), which is a popular language for data base management and is the inspiration for the dplyr package and verbs.</p>
<p>If you’d like to learn more then there are many excellent introductory SQL books and courses, I’d recommend picking one that focuses on data analysis or data science unless you really want to dig into efficient storage and querying of databases.</p>
</section>
</section>
<section id="wrapping-up" class="level2">
<h2 class="anchored" data-anchor-id="wrapping-up">Wrapping up</h2>
<p>We have:</p>
<ul>
<li><p>Learned how to wrangle tabular data in R with <code>{dplyr}</code></p></li>
<li><p>Met the idea of relational data and <code>{dplyr}</code>’s relationship to SQL</p></li>
<li><p>Become aware of some tricky data types and packages that can help.</p></li>
</ul>


</section>

<div id="quarto-appendix"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{varty2023,
  author = {Zak Varty},
  title = {Data {Wrangling}},
  date = {2023-01-06},
  url = {https://www.zakvarty.com/blog/2023-01-06-data-wrangling},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-varty2023" class="csl-entry quarto-appendix-citeas">
Zak Varty. 2023. <span>“Data Wrangling.”</span> January 6, 2023. <a href="https://www.zakvarty.com/blog/2023-01-06-data-wrangling">https://www.zakvarty.com/blog/2023-01-06-data-wrangling</a>.
</div></div></section></div> ]]></description>
  <category>data science</category>
  <category>data wrangling</category>
  <category>tutorial</category>
  <guid>https://www.zakvarty.com/blog/2023-01-06-data-wrangling/index.html</guid>
  <pubDate>Fri, 06 Jan 2023 00:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2023-01-06-data-wrangling/horst-wrangle-monsters.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Aquiring Data via an API</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/index.html</link>
  <description><![CDATA[ 



<section id="aquiring-data-part-2---using-apis" class="level2">
<h2 class="anchored" data-anchor-id="aquiring-data-part-2---using-apis">Aquiring Data: Part 2 - Using APIs</h2>
<div class="medium_right">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/apis-and-httr.png" alt="The text APIs and httr, written on a black hexagon."></p>
</div>
<p>You can’t always rely on tidy, tabular data to land on your desk. Sometimes you are going to have to go out and gather data for yourself.</p>
<p>I’m not suggesting you will need to do this manually, but you will likely need to get data from the internet that’s been made publicly or privately available to you.</p>
<p>This might be information from a webpage that you gather yourself, or data shared with you by a collaborator using an API.</p>
<p>In this second blog post we will cover the basics of obtaining data via an API. This material draws together the <a href="https://zapier.com/learn/apis/">Introduction to APIs</a> book by Brian Cooksey and the <a href="https://stat545.com/diy-web-data.html#interacting-with-an-api">DIY web data</a> section of STAT545 at the University of British Columbia.</p>
</section>
<section id="why-do-i-need-to-know-about-apis" class="level2">
<h2 class="anchored" data-anchor-id="why-do-i-need-to-know-about-apis">Why do I need to know about APIs?</h2>
<blockquote class="blockquote">
<p>An API, or application programming interface, is a set of rules that allows different software applications to communicate with each other.</p>
</blockquote>
<p>As a data scientist, you will often need to access data that is stored on remote servers or in cloud-based services. APIs provide a convenient way for data scientists to programmatically retrieve this data, without having to manually download data sets or and process them locally on their own computer.</p>
<p>This has multiple benefits including automation and standardisation of data sharing.</p>
<ul>
<li><p><strong>Automation:</strong> It is much faster for a machine to process a data request than a human. Having a machine handling data requests also scales much better as either the number or the complexity of data requests grows. Additionally, there is a lower risk of introducing human error. For example, a human might accidentally share the wrong data, which can have serious legal repercussions.</p></li>
<li><p><strong>Standardisation:</strong> Having a machine process data requests requires the format of these requests and the associated responses to be standardised. This allows data sharing and retrieval to become a reproducible and programmatic aspect of our work.</p></li>
</ul>
</section>
<section id="what-is-an-api" class="level2">
<h2 class="anchored" data-anchor-id="what-is-an-api">What is an API?</h2>
<p>So then, if APIs are so great, what exactly are they?</p>
<p>In human-to-human communication, the set of rules governing acceptable behaviour is known as etiquette. Depending on when or where you live, social etiquette can be rather strict. The rules for computer-to-computer communication take this to a whole new level, because with machines there can be no room left for interpretation.</p>
<p>The set of rules governing interactions between computers or programmes is known as a <strong>protocol</strong>.</p>
<p>APIs provide a standard protocol for different programs to interact with one another. This makes it easier for developers to build complex systems by leveraging the functionality of existing services and platforms. The benefits of working in a standardised and modular way apply equally well to sharing data as they do to writing code or organising files.</p>
<p>There are two sides to communication and when <em>machines</em> communicate these are known as the <strong>server</strong> and the <strong>client</strong>.</p>
<div class="medium_right">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/server-schematic.png" alt="Schematic diagram representing a computer server. Text above reads 'Servers: don't fear a computer with no screen'."></p>
</div>
<p>Servers can seem intimidating, because unlike your laptop or mobile phone they don’t have their own input and output devices; they have no keyboard, no monitor, and no a mouse. Despite this, servers are just regular computers that are designed to store data and run programmes. Servers don’t have their own input or output devices because they are intended to be used <em>remotely</em>, via another computer. There is no need for a screen or a mouse if the user is miles away. Nothing scary going on here!</p>
<p>People often find clients much less intimidating - they are simply any other computer or application that might contact the sever.</p>
</section>
<section id="http" class="level2">
<h2 class="anchored" data-anchor-id="http">HTTP</h2>
<p>This leads us one step further down the rabbit-hole. An API is a protocol that defines the rules of how applications communicate with one another. But how does this communication happen?</p>
<p>HTTP (Hypertext Transfer Protocol) is the dominant mode communication on the World Wide Web. You can see the secure version of HTTP, HTTPS, at the start of most web addresses up at the top of your browser. For example:</p>
<pre class="http"><code>https://www.zakvarty.com/blog</code></pre>
<p>HTTP is the foundation of data communication on the web and is used to transfer files (such as text, images, and videos) between web servers and clients.</p>
<div class="medium_left">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/request-response.png" alt="Schematic diagram showing a request being sent from a client to a server, which returns a response."></p>
</div>
<p>To understand HTTP communications, I find it helpful to imagine the client and the server as being a customer and a waiter at a restaurant. The client makes some request to the server, which then tries to comply before giving a response. The server might respond to confirm that the request was completed successfully. Alternatively, the server might respond with an error message, which is (hopefully) informative about why the request could not be completed.</p>
<p>This request-response model is the basis for HTTP, the communication system used by the majority of APIs.</p>
</section>
<section id="http-requests" class="level2">
<h2 class="anchored" data-anchor-id="http-requests">HTTP Requests</h2>
<p>An HTML request consists of:</p>
<ul>
<li>Uniform Resource Locator (URL) [unique identifier for a thing]</li>
<li>Method [tells server the type of action requested by client]</li>
<li>Headers [meta-information about request, e.g.&nbsp;device type]</li>
<li>Body [Data the client wants to send to the server]</li>
</ul>
<div class="medium_right">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/html-request.png" alt="Schematic diagram showing the structure of an HTML request, composed of: a URL, method, headers and body."></p>
</div>
<section id="url" class="level3">
<h3 class="anchored" data-anchor-id="url">URL</h3>
<p>The URL in a HTTP request specifies where that request is going to be made, for example <code>http://example.com</code>.</p>
</section>
<section id="method" class="level3">
<h3 class="anchored" data-anchor-id="method">Method</h3>
<p>The action that the client wants to take is indicated by a set of well-defined methods or HTTP verbs. The most common HTTP verbs are <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>PATCH</code>, and <code>DELETE</code>.</p>
<p>The <code>GET</code> verb is used to retrieve a resource from the server, such as a web page or an image. The <code>POST</code> verb is used to send data to the server, such as when submitting a form or uploading a file. The <code>PUT</code> verb is used to replace a resource on the server with a new one, while the <code>PATCH</code> verb is used to update a resource on the server without replacing it entirely. Finally, the <code>DELETE</code> verb is used to delete a resource from the server.</p>
<p>In addition to these common HTTP verbs, there are also several less frequently used verbs. These are used for specialized purposes, such as requesting only the headers of a resource, or testing the connectivity between the client and the server.</p>
</section>
<section id="header" class="level3">
<h3 class="anchored" data-anchor-id="header">Header</h3>
<p>The request headers contain meta-information about the request. This is where information about the device type would be included within the request.</p>
</section>
<section id="body" class="level3">
<h3 class="anchored" data-anchor-id="body">Body</h3>
<p>Finally, the body of the request contains the data that the client is providing to the server.</p>
</section>
</section>
<section id="http-responses" class="level2">
<h2 class="anchored" data-anchor-id="http-responses">HTTP Responses</h2>
<p>When the server receives a request it will attempt to fulfil it and then send a response back to the client.</p>
<div class="medium_left">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/html-response.png" alt="Schematic diagram showing the structure of an HTML response, composed of: a status code, headers and body."></p>
</div>
<p>A response has a similar structure to a request apart from:</p>
<ul>
<li>responses <strong>do not have</strong> a URL,</li>
<li>responses <strong>do not have</strong> a method,</li>
<li>responses <strong>have</strong> a status code.</li>
</ul>
<section id="status-codes" class="level3">
<h3 class="anchored" data-anchor-id="status-codes">Status Codes</h3>
<p>The status code is a 3 digit number, each of which has a specific meaning. Some common error codes that you might (already have) come across are:</p>
<ul>
<li>200: Success,</li>
<li>404: Page not found (all 400s are errors),</li>
<li>503: Page down.</li>
</ul>
<p>In a data science context, a successful response will return the requested data within the data field. This will most likely be given in JSON or XML format.</p>
</section>
</section>
<section id="authentication" class="level2">
<h2 class="anchored" data-anchor-id="authentication">Authentication</h2>
<p>Now that we know <em>how</em> applications communicate, you might ask how we can control who has access to the API and what types of request they can make. This can be done by the server setting appropriate permissions for each client. But then how does the server verify that the client is really who is claims to be?</p>
<p><strong>Authentication</strong> is a way to ensure that only authorized clients are able to access an API. This is typically done by the server requiring each client to provide some secret information that uniquely identifies them, whenever they make requests to the API. This information allows the API server to validate the authenticity this user before it authorises the request.</p>
<section id="basic-authentication" class="level3">
<h3 class="anchored" data-anchor-id="basic-authentication">Basic Authentication</h3>
<p>There are various ways to implement API authentication.</p>
<p>Basic authentication involves each legitimate client having a username and password. An encrypted version of these is included in the <code>Authorization</code> header of the HTTP request. If the hear matches with the server’s records then the request is processed. If not, then a special status code (401) is returned to the client.</p>
<p>Basic authentication is dangerous because it does not put any restrictions on what a client can do once they are authorised. Additional, individualised restrictions can be added by using an alternative authentication scheme.</p>
</section>
<section id="api-key-authentication" class="level3">
<h3 class="anchored" data-anchor-id="api-key-authentication">API Key Authentication</h3>
<p>An API key is long, random string of letters and numbers that is assigned to each authorised user. An API key is distinct from the user’s password and keys are typically issued by the service that provides an API. Using keys rather than basic authentication allows the API provider to track and limit the usage of their API.</p>
<p>For example, a provider may issue a unique API key to each developer or organization that wants to use the API. The provider can then limit access to certain data. They could also limit the number of requests that each key can make in a given time period or prevent access to certain administrative functions, like changing passwords or deleting accounts.</p>
<p>Unlike Basic Authentication, there is no standard way of a client sharing a key with the server. Depending on the API this might be in the <code>Authorization</code> field of the header, at the end of the URL (<code>http://example.com?api_key=my_secret_key</code>), or within the body of the data.</p>
</section>
</section>
<section id="api-wrappers" class="level2">
<h2 class="anchored" data-anchor-id="api-wrappers">API wrappers</h2>
<p>We’ve learned a lot about how the internet works. Fortunately, a lot of the time we won’t have to worry about all of that new information other than for debugging purposes.</p>
<p>In the best case scenario, a very kind developer has written a “wrapper” function for the API. These wrappers are functions in R that will construct the HTML request for you. If you are particularly lucky, the API wrapper will also format the response for you, converting it from XML or JSON back into an R object that is ready for immediate use.</p>
</section>
<section id="geonames-wrapper" class="level2">
<h2 class="anchored" data-anchor-id="geonames-wrapper"><code>{geonames}</code> wrapper</h2>
<p><a href="https://ropensci.org/">rOpenSci</a> has a curated list of many wrappers for accessing scientific data using R. We will focus on the <a href="https://www.geonames.org/">GeoNames API</a>, which gives open access to a geographical database. To access this data, we will use wrapper functions provided by the <code>{geonames}</code> <a href="https://docs.ropensci.org/geonames/">package</a>.</p>
<p>The aim here is to illustrate the important steps of getting started with a new API.</p>
<section id="set-up" class="level3">
<h3 class="anchored" data-anchor-id="set-up">Set up</h3>
<p>Before we can get any data from the GeoNames API, we first need to do a little bit of set up.</p>
<ol type="1">
<li>Install and load <code>{geonames}</code> from CRAN</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;">#install.packages("geonames")</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">library</span>(geonames)</span></code></pre></div>
</div>
<ol start="2" type="1">
<li>Create a user account for the GeoNames API</li>
</ol>
<p><img style="border-radius: 0%;" src="https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/sign-up.png" alt="Screenshot of the GeoNames login page. Example text has been added in the fields to create a new user account."></p>
<ol start="3" type="1">
<li>Activate the account (see activation email)</li>
</ol>
<p><img style="border-radius: 0%;" src="https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/confirmation-email.png" alt="Screenshot of the GeoNames confirmation email, which gives a link to click in order to confirm the new account."></p>
<ol start="4" type="1">
<li><p>Enable the free web services for your GeoNames account by logging in at this <a href="http://www.geonames.org/enablefreewebservice">link</a>.</p></li>
<li><p>Tell R your credentials for GeoNames.</p></li>
</ol>
<div class="callout-warning callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>We could use the following code to tell R our credentials, but we absolutely should not.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">options</span>(<span class="at" style="color: #657422;">geonamesUsername=</span><span class="st" style="color: #20794D;">"example_username"</span>)</span></code></pre></div>
</div>
<p>This would save our username as an environment variable, but it <em>also</em> puts our API credentials directly into the script. If we share the script with our others (internally, externally or publicly) we would be sharing our credentials too. Not good!</p>
</div>
</div>
</section>
</section>
<section id="keep-it-secret-keep-it-safe" class="level2">
<h2 class="anchored" data-anchor-id="keep-it-secret-keep-it-safe">Keep it Secret, Keep it Safe</h2>
<p>The solution to this problem is to add our credentials as environment variables in our <code>.Rprofile</code> rather than in this script. The <code>.Rprofile</code> is an R script that is run at the start of every session. IT can be created and edited directly, but can also be created and edited from within R.</p>
<p>To make/open your <code>.Rprofile</code> use the <code>edit_r_profile()</code> function from the <code>{usethis}</code> package.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">library</span>(usethis)</span>
<span id="cb4-2">usethis<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">edit_r_profile</span>()</span></code></pre></div>
</div>
<p>Within this file, add <code>options(geonamesUsername="example_username")</code> on a new line, remembering to replace <code>example_username</code> with your own GeoNames username.</p>
<p>The final step is to <strong>check this this file ends with a blank line</strong>, save it and restart R. Then we are all set to start using <code>{geonames}</code>.</p>
<p>This set up procedure is indicative of most API wrappers, but of course the details will vary between each API. This is why good documentation is important!</p>
</section>
<section id="using-geonames" class="level2">
<h2 class="anchored" data-anchor-id="using-geonames">Using <code>{geonames}</code></h2>
<p>GeoNames has a whole host of <a href="http://www.geonames.org/export/ws-overview.html">different geo-datasets</a> that you can explore. As a first example, let’s get all of the geo-tagged wikipedia articles that are within 1km of Imperial College London.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">imperial_coords <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">lat =</span> <span class="fl" style="color: #AD0000;">51.49876</span>, <span class="at" style="color: #657422;">lon =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.1749</span>)</span>
<span id="cb5-2">search_radius_km <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb5-3"></span>
<span id="cb5-4">imperial_neighbours <span class="ot" style="color: #003B4F;">&lt;-</span> geonames<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">GNfindNearbyWikipedia</span>(</span>
<span id="cb5-5">  <span class="at" style="color: #657422;">lat =</span> imperial_coords<span class="sc" style="color: #5E5E5E;">$</span>lat,</span>
<span id="cb5-6">  <span class="at" style="color: #657422;">lng =</span> imperial_coords<span class="sc" style="color: #5E5E5E;">$</span>lon, </span>
<span id="cb5-7">  <span class="at" style="color: #657422;">radius =</span> search_radius_km,</span>
<span id="cb5-8">  <span class="at" style="color: #657422;">lang =</span> <span class="st" style="color: #20794D;">"en"</span>,                <span class="co" style="color: #5E5E5E;"># english language articles</span></span>
<span id="cb5-9">  <span class="at" style="color: #657422;">maxRows =</span> <span class="dv" style="color: #AD0000;">500</span>              <span class="co" style="color: #5E5E5E;"># maximum number of results to return </span></span>
<span id="cb5-10">)</span></code></pre></div>
</div>
<p>Looking at the structure of <code>imperial_neighbours</code> we can see that it is a data frame with one row per geo-tagged wikipedia article.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">str</span>(imperial_neighbours)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   204 obs. of  13 variables:
 $ summary     : chr  "The Department of Mechanical Engineering is responsible for teaching and research in mechanical engineering at "| __truncated__ "Imperial College Business School is a global business school located in London. The business school was opened "| __truncated__ "Exhibition Road is a street in South Kensington, London which is home to several major museums and academic est"| __truncated__ "Imperial College School of Medicine (ICSM) is the medical school of Imperial College London in England, and one"| __truncated__ ...
 $ elevation   : chr  "20" "18" "19" "24" ...
 $ feature     : chr  "edu" "edu" "landmark" "edu" ...
 $ lng         : chr  "-0.1746" "-0.1748" "-0.17425" "-0.1757" ...
 $ distance    : chr  "0.0335" "0.0494" "0.0508" "0.0558" ...
 $ rank        : chr  "81" "91" "90" "96" ...
 $ lang        : chr  "en" "en" "en" "en" ...
 $ title       : chr  "Department of Mechanical Engineering, Imperial College London" "Imperial College Business School" "Exhibition Road" "Imperial College School of Medicine" ...
 $ lat         : chr  "51.498524" "51.4992" "51.4989722222222" "51.4987" ...
 $ wikipediaUrl: chr  "en.wikipedia.org/wiki/Department_of_Mechanical_Engineering%2C_Imperial_College_London" "en.wikipedia.org/wiki/Imperial_College_Business_School" "en.wikipedia.org/wiki/Exhibition_Road" "en.wikipedia.org/wiki/Imperial_College_School_of_Medicine" ...
 $ countryCode : chr  NA "AE" NA "GB" ...
 $ thumbnailImg: chr  NA NA NA NA ...
 $ geoNameId   : chr  NA NA NA NA ...</code></pre>
</div>
</div>
<p>To confirm we have the correct location we can inspect the title of the first five neighbours.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">imperial_neighbours<span class="sc" style="color: #5E5E5E;">$</span>title[<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Department of Mechanical Engineering, Imperial College London"             
[2] "Imperial College Business School"                                          
[3] "Exhibition Road"                                                           
[4] "Imperial College School of Medicine"                                       
[5] "Department of Civil and Environmental Engineering, Imperial College London"</code></pre>
</div>
</div>
<p>Nothing too surprising here, mainly departments of the college and Exhibition Road, which runs along one side of the campus. These sorts of check are important - I initially forgot the minus in the longitude and was getting results in East London!</p>
</section>
<section id="what-if-there-is-no-wrapper" class="level2">
<h2 class="anchored" data-anchor-id="what-if-there-is-no-wrapper">What if there is no wrapper?</h2>
<p>If there is not a wrapper function, we can still access APIs fairly easilty using the <code>{httr}</code> package.</p>
<p>We will look at an example using <a href="http://www.omdbapi.com/">OMDb</a>, which is an open source version of <a href="https://www.imdb.com/">IMDb</a>, to get information about the movie Mean Girls.</p>
<p>To use the OMDB API you will once again need to <a href="http://www.omdbapi.com/apikey.aspx">request a free API key</a>, follow a verification link and add your API key to your <code>.Rprofile</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># Add this to .Rprofile, pasting in your own API key</span></span>
<span id="cb10-2"><span class="fu" style="color: #4758AB;">options</span>(<span class="at" style="color: #657422;">OMDB_API_Key =</span> <span class="st" style="color: #20794D;">"PASTE YOUR KEY HERE"</span>)</span></code></pre></div>
</div>
<p>You can then restart R and safely access your API key from within your R session.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># Load your API key into the current R session,</span></span>
<span id="cb11-2">ombd_api_key <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">getOption</span>(<span class="st" style="color: #20794D;">"OMDB_API_Key"</span>)</span></code></pre></div>
</div>
<p>Using the documentation for the API, requests have URLs of the following form, where terms in angular brackets should be replaced by you.</p>
<pre><code>http://www.omdbapi.com/?t=&lt;TITLE&gt;&amp;y=&lt;YEAR&gt;&amp;plot=&lt;LENGTH&gt;&amp;r=&lt;FORMAT&gt;&amp;apikey=&lt;API_KEY&gt;</code></pre>
<p>With a little bit of effort, we can write a function that composes this type of request URL for us. We will using the <code>{glue}</code> package to help us join strings together.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;">#' Compose search requests for the OMBD API</span></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;">#'</span></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;">#' @param title String defining title to search for. Words are separated by "+".</span></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;">#' @param year String defining release year to search for</span></span>
<span id="cb13-5"><span class="co" style="color: #5E5E5E;">#' @param plot String defining whether "short" or "full" plot is returned</span></span>
<span id="cb13-6"><span class="co" style="color: #5E5E5E;">#' @param format String defining return format. One of "json" or "xml"</span></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;">#' @param api_key String defining your OMDb API key.</span></span>
<span id="cb13-8"><span class="co" style="color: #5E5E5E;">#'</span></span>
<span id="cb13-9"><span class="co" style="color: #5E5E5E;">#' @return String giving a OMBD search request URL</span></span>
<span id="cb13-10"><span class="co" style="color: #5E5E5E;">#'</span></span>
<span id="cb13-11"><span class="co" style="color: #5E5E5E;">#' @examples </span></span>
<span id="cb13-12"><span class="co" style="color: #5E5E5E;">#' omdb_url("mean+girls", "2004", "short", "json", getOption(OMBD_API_Key))</span></span>
<span id="cb13-13"><span class="co" style="color: #5E5E5E;">#' </span></span>
<span id="cb13-14">omdb_url <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(title, year, plot, format, api_key) {</span>
<span id="cb13-15">  glue<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">glue</span>(<span class="st" style="color: #20794D;">"http://www.omdbapi.com/?t={title}&amp;y={year}&amp;plot={plot}&amp;r={format}&amp;apikey={api_key}"</span>)</span>
<span id="cb13-16">}</span></code></pre></div>
</div>
<p>Running the example we get:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">mean_girls_request <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">omdb_url</span>(</span>
<span id="cb14-2">  <span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"mean+girls"</span>,</span>
<span id="cb14-3">  <span class="at" style="color: #657422;">year =</span>  <span class="st" style="color: #20794D;">"2004"</span>,</span>
<span id="cb14-4">  <span class="at" style="color: #657422;">plot =</span> <span class="st" style="color: #20794D;">"short"</span>,</span>
<span id="cb14-5">  <span class="at" style="color: #657422;">format =</span>  <span class="st" style="color: #20794D;">"json"</span>,</span>
<span id="cb14-6">  <span class="at" style="color: #657422;">api_key =</span>  <span class="fu" style="color: #4758AB;">getOption</span>(<span class="st" style="color: #20794D;">"OMDB_API_Key"</span>))</span></code></pre></div>
</div>
<p>We can then use the <code>{httr}</code> package to construct our request and store the response we get.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">response <span class="ot" style="color: #003B4F;">&lt;-</span> httr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">GET</span>(<span class="at" style="color: #657422;">url =</span> mean_girls_request)</span>
<span id="cb15-2">httr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">status_code</span>(response)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 200</code></pre>
</div>
</div>
<p>Thankfully it was a success! If you get a 401 error code here, check that you have clicked the activation link for your API key.</p>
<p>The full structure of the response is quite complicated, but we can easily extract the requested data using <code>content()</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">httr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">content</span>(response)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$Title
[1] "Mean Girls"

$Year
[1] "2004"

$Rated
[1] "PG-13"

$Released
[1] "30 Apr 2004"

$Runtime
[1] "97 min"

$Genre
[1] "Comedy"

$Director
[1] "Mark Waters"

$Writer
[1] "Rosalind Wiseman, Tina Fey"

$Actors
[1] "Lindsay Lohan, Jonathan Bennett, Rachel McAdams"

$Plot
[1] "Cady Heron is a hit with The Plastics, the A-list girl clique at her new school, until she makes the mistake of falling for Aaron Samuels, the ex-boyfriend of alpha Plastic Regina George."

$Language
[1] "English, German, Vietnamese, Swahili"

$Country
[1] "United States, Canada"

$Awards
[1] "7 wins &amp; 25 nominations"

$Poster
[1] "https://m.media-amazon.com/images/M/MV5BMjE1MDQ4MjI1OV5BMl5BanBnXkFtZTcwNzcwODAzMw@@._V1_SX300.jpg"

$Ratings
$Ratings[[1]]
$Ratings[[1]]$Source
[1] "Internet Movie Database"

$Ratings[[1]]$Value
[1] "7.1/10"


$Ratings[[2]]
$Ratings[[2]]$Source
[1] "Rotten Tomatoes"

$Ratings[[2]]$Value
[1] "84%"


$Ratings[[3]]
$Ratings[[3]]$Source
[1] "Metacritic"

$Ratings[[3]]$Value
[1] "66/100"



$Metascore
[1] "66"

$imdbRating
[1] "7.1"

$imdbVotes
[1] "385,107"

$imdbID
[1] "tt0377092"

$Type
[1] "movie"

$DVD
[1] "21 Sep 2004"

$BoxOffice
[1] "$86,058,055"

$Production
[1] "N/A"

$Website
[1] "N/A"

$Response
[1] "True"</code></pre>
</div>
</div>
</section>
<section id="wrapping-up" class="level2">
<h2 class="anchored" data-anchor-id="wrapping-up">Wrapping up</h2>
<p>We have learned a bit more about how the internet works, the benefits of using an API to share data and how to request data from Open APIs.</p>
<p>When obtaining data from the internet it’s vital that you keep your credentials safe, and that don’t do more work than is needed.</p>
<ul>
<li><p>Keep your API keys out of your code. Store them in your <code>.Rprofile</code> (and make sure this is not under version control!)</p></li>
<li><p>Scraping is always a last resort. Is there an API already?</p></li>
<li><p>Writing your own code to access an API can be more painful than necessary.</p></li>
<li><p>Don’t repeat other people, if a suitable wrapper exists then use it.</p></li>
</ul>


</section>

<div id="quarto-appendix"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{varty2022,
  author = {Zak Varty},
  title = {Aquiring {Data} via an {API}},
  date = {2022-12-14},
  url = {https://www.zakvarty.com/blog/2022-12-14-apis-and-httr},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-varty2022" class="csl-entry quarto-appendix-citeas">
Zak Varty. 2022. <span>“Aquiring Data via an API.”</span> December 14,
2022. <a href="https://www.zakvarty.com/blog/2022-12-14-apis-and-httr">https://www.zakvarty.com/blog/2022-12-14-apis-and-httr</a>.
</div></div></section></div> ]]></description>
  <category>data science</category>
  <category>data acquisition</category>
  <category>tutorial</category>
  <guid>https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/index.html</guid>
  <pubDate>Wed, 14 Dec 2022 00:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2022-12-14-apis-and-httr/apis-and-httr.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Git: putting your new feature out into the world.</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2022-12-13-git-remote-branches/index.html</link>
  <description><![CDATA[ 



<div class="small_left">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2022-12-13-git-remote-branches/git-logo.png" alt="git logo. This is a red-orange square with rounded corners, it is rotated by 45 degrees so that it is standing on one corner and has a cut-out design representing a branching graph."></p>
</div>
<p>So you’ve added a new feature to your project. You were responsible and didn’t do this in the <code>main</code> branch. Congrats on being responsible, have some brownie points.</p>
<p>Now how the heck to you get everything moved across and delete your <code>new-feature</code> branch?</p>
<section id="check-that-your-local-main-is-up-to-date." class="level2">
<h2 class="anchored" data-anchor-id="check-that-your-local-main-is-up-to-date.">1. Check that your local <code>main</code> is up to date.</h2>
<p>Be in the <code>main</code> branch and pull any changes to the remote <code>main</code> branch.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;">git</span> checkout main </span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">git</span> pull origin main</span></code></pre></div>
<p>This might require you to resolve some merge conflicts, but these should be pretty straightforward if you are following a branch-and-merge workflow.</p>
</section>
<section id="check-that-you-remote-new-feature-is-up-to-date." class="level2">
<h2 class="anchored" data-anchor-id="check-that-you-remote-new-feature-is-up-to-date.">2. Check that you remote <code>new-feature</code> is up to date.</h2>
<p>We might mess things up while merging. Let’s make sure that if that happens we can get back to this good position with our new feature.</p>
<pre><code>git checkout new-feature
git status</code></pre>
<p>If needed: <code>add</code>, <code>commit</code> and <code>push</code>.</p>
</section>
<section id="merge-any-changes-to-main-into-your-local-new-feature-branch" class="level2">
<h2 class="anchored" data-anchor-id="merge-any-changes-to-main-into-your-local-new-feature-branch">3. Merge any changes to <code>main</code> into your local <code>new-feature</code> branch</h2>
<p>Next, we will make sure we have any changes to <code>main</code> moved across to our local <code>new-feature</code> branch.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="fu" style="color: #4758AB;">git</span> merge main</span></code></pre></div>
<p>This might again require resolving some merge conflicts. Keep calm and take tea breaks are required.</p>
</section>
<section id="commit-and-push-to-remote." class="level2">
<h2 class="anchored" data-anchor-id="commit-and-push-to-remote.">4. Commit and push to remote.</h2>
<p>Now that we have our local <code>new-feature</code> branch compatible with the remote <code>main</code> branch, lets push that to the remote.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="fu" style="color: #4758AB;">git</span> add <span class="op" style="color: #5E5E5E;">&lt;</span>YOUR_FILES_TO_COMMIT<span class="op" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;">git</span> commit <span class="at" style="color: #657422;">-m</span> <span class="st" style="color: #20794D;">"merge changes to main in preparation for PR"</span></span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;">git</span> push</span></code></pre></div>
</section>
<section id="open-a-pull-request-on-github" class="level2">
<h2 class="anchored" data-anchor-id="open-a-pull-request-on-github">5. Open a pull request on Github</h2>
<p>Wait for someone to review approve your new feature (or wait a few hours/days and do it yourself for a solo project).</p>
</section>
<section id="delete-the-local-branch" class="level2">
<h2 class="anchored" data-anchor-id="delete-the-local-branch">6. Delete the local branch</h2>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="fu" style="color: #4758AB;">git</span> checkout main</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;">git</span> branch <span class="at" style="color: #657422;">--delete</span> new-feature</span></code></pre></div>
</section>
<section id="delete-the-remote-branch" class="level2">
<h2 class="anchored" data-anchor-id="delete-the-remote-branch">7. Delete the remote branch</h2>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="fu" style="color: #4758AB;">git</span> push origin <span class="at" style="color: #657422;">--delete</span> new-feature</span></code></pre></div>
<p>On older versions of git (&lt; 1.7.0) you might need to use the alternative syntax below. This is effectively pushing nothing to the new-feature branch of origin.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="fu" style="color: #4758AB;">git</span> push origin :new-feature</span></code></pre></div>
<p>Bam! You did it! Your <code>new-feature</code> is out there in the wild, making the world a marginally better place.</p>


</section>

 ]]></description>
  <category>workflows</category>
  <category>git</category>
  <guid>https://www.zakvarty.com/blog/2022-12-13-git-remote-branches/index.html</guid>
  <pubDate>Tue, 13 Dec 2022 00:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2022-12-13-git-remote-branches/git-logo.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Web Scraping with {rvest}</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2022-12-01-rvest/index.html</link>
  <description><![CDATA[ 



<section id="aquiring-data-part-1---scraping-webpage-data-using-rvest" class="level2">
<h2 class="anchored" data-anchor-id="aquiring-data-part-1---scraping-webpage-data-using-rvest">Aquiring Data: Part 1 - Scraping webpage data using {rvest}</h2>
<div class="medium_right">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2022-12-01-rvest/rvest-logo.png" alt="Hexagonal logo of the rvest package; a sickle cutting wheat on a red background."></p>
</div>
<p>You can’t always rely on tidy, tabular data to land on your desk. Sometimes you are going to have to go out and gather data for yourself.</p>
<p>I’m not suggesting you will need to do this manually, but you will likely need to get data from the internet that’s been made publicly or privately available to you.</p>
<p>This might be information from a webpage that you gather yourself, or data shared with you by a collaborator using an API.</p>
<p>In this first blog post we will cover the basics of scraping webpages, following the <a href="https://cran.r-project.org/web/packages/rvest/vignettes/rvest.html#fnref3">vignette</a> for the {rvest} package.</p>
</section>
<section id="what-is-a-webpage" class="level2">
<h2 class="anchored" data-anchor-id="what-is-a-webpage">What is a webpage?</h2>
<p>Before we can even hope to get data from a webpage, we first need to understand <em>what</em> a webpage is.</p>
<p>Webpages are written in a similar way to LaTeX: the content and styling of webpages are handled separately and are coded using plain text files.</p>
<p>In fact, websites go one step further than LaTeX. The content and styling of websites are written in different files and in different languages. HTML (HyperText Markup Language) is used to write the content and then CSS (Cascading Style Sheets) are used to control the appearance of that content when it’s displayed to the user.</p>
</section>
<section id="html" class="level2">
<h2 class="anchored" data-anchor-id="html">HTML</h2>
<p>A basic HTML page with no styling applied might look something like this:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb1-1"><span class="kw" style="color: #003B4F;">&lt;html&gt;</span></span>
<span id="cb1-2"><span class="kw" style="color: #003B4F;">&lt;head&gt;</span></span>
<span id="cb1-3">  <span class="kw" style="color: #003B4F;">&lt;title&gt;</span>Page title<span class="kw" style="color: #003B4F;">&lt;/title&gt;</span></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;">&lt;/head&gt;</span></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;">&lt;body&gt;</span></span>
<span id="cb1-6">  <span class="kw" style="color: #003B4F;">&lt;h1</span> <span class="er" style="color: #AD0000;">id</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">'first'</span><span class="kw" style="color: #003B4F;">&gt;</span>A level 1 heading<span class="kw" style="color: #003B4F;">&lt;/h1&gt;</span></span>
<span id="cb1-7">  <span class="kw" style="color: #003B4F;">&lt;p&gt;</span>Hello World!<span class="kw" style="color: #003B4F;">&lt;/p&gt;</span></span>
<span id="cb1-8">  <span class="kw" style="color: #003B4F;">&lt;p&gt;</span>Here is some plain text <span class="dv" style="color: #AD0000;">&amp;amp;</span> <span class="kw" style="color: #003B4F;">&lt;b&gt;</span>some bold text.<span class="kw" style="color: #003B4F;">&lt;/b&gt;&lt;/p&gt;</span></span>
<span id="cb1-9">  <span class="kw" style="color: #003B4F;">&lt;img</span> <span class="er" style="color: #AD0000;">src</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">'myimg.png'</span> <span class="er" style="color: #AD0000;">width</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">'100'</span> <span class="er" style="color: #AD0000;">height</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">'100'</span><span class="kw" style="color: #003B4F;">&gt;</span></span>
<span id="cb1-10"><span class="kw" style="color: #003B4F;">&lt;/body&gt;</span></span></code></pre></div>
<section id="html-elements" class="level3">
<h3 class="anchored" data-anchor-id="html-elements">HTML elements</h3>
<!-- for presentation 
```{.html}
#| code-line-numbers: "3"
<html>
<head>
  <title>Page title</title>
</head>
<body>
  <h1 id='first'>A level 1 heading</h1>
  <p>Hello World!</p>
  <p>Here is some plain text &amp; <b>some bold text.</b></p>
  <img src='myimg.png' width='100' height='100'>
</body>
```
-->
<p>Just like XML data files, HTML has a hierarchical structure. This structure is crafted using HTML elements. Each HTML element is made up of of a start tag, optional attributes, an end tag.</p>
<p>We can see each of these in the first level header, where <code>&lt;h1&gt;</code> is the opening tag, <code>id='first'</code> is an additional attribute and <code>&lt;/h1&gt;</code> is the closing tag. Everything between the opening and closing tag are the contents of that element. There are also some special elements that consist of only a single tag and its optional attributes. An example of this is the <code>&lt;img&gt;</code> tag.</p>
<p>Since <code>&lt;</code> and <code>&gt;</code> are used for start and end tags, you can’t write them directly in an HTML document. Instead, you have to use escape characters. This sounds fancy, but it’s just an alternative way to write characters that serve some special function within a language.</p>
<p>You can write greater than <code>&amp;gt;</code> and less than as <code>&amp;lt;</code>. You might notice that those escapes use an ampersand (&amp;). This means that if you want a literal ampersand on your webpage, you have to escape too using <code>&amp;amp;</code>.</p>
<p>There are a wide range of possible HTML tags and escapes. We’ll cover the most common tags in this lecture and you don’t need to worry about escapes too much because <code>{rvest}</code> will automatically handle them for you.</p>
</section>
<section id="important-html-elements" class="level3">
<h3 class="anchored" data-anchor-id="important-html-elements">Important HTML Elements</h3>
<p>In all, there are in excess of 100 HTML elements. The most important ones for you to know about are:</p>
<ul>
<li><p>The <code>&lt;html&gt;</code> element, that must enclose every HTML page. The <code>&lt;html&gt;</code> element must have two child elements within it. The <code>&lt;head&gt;</code> element contains metadata about the document, like the page title that is shown in the browser tab and the CSS style sheet that should be applied. The <code>&lt;body&gt;</code> element then contains all of the content that you see in the browser.</p></li>
<li><p>Block elements are used to give structure to the page. These are elements like headings, sub-headings and so on from <code>&lt;h1&gt;</code> all the way down to <code>&lt;h6&gt;</code>. This category also contains paragraph elements <code>&lt;p&gt;</code>, ordered lists <code>&lt;ol&gt;</code> unordered lists <code>&lt;ul&gt;</code>.</p></li>
<li><p>Finally, inline tags like <code>&lt;b&gt;</code> for bold, <code>&lt;i&gt;</code> for italics, and <code>&lt;a&gt;</code> for hyperlinks are used to format text inside block elements.</p></li>
</ul>
<p>When you come across a tag that you’ve never seen before, you can find out what it does with just a little bit of googling. A good resource here is the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML">MDN Web Docs</a> which are produced by Mozilla, the company that makes the Firefox web browser. The <a href="https://www.w3schools.com/html/default.asp">W3schools website</a> is another great resource for web development and coding resources more generally.</p>
</section>
</section>
<section id="html-attributes" class="level2">
<h2 class="anchored" data-anchor-id="html-attributes">HTML Attributes</h2>
<p>We’ve seen one example of a header with an additional attribute. More generally, all tags can have named attributes. These attributes are contained within the opening tag and look something like:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb2-1"><span class="kw" style="color: #003B4F;">&lt;tag</span> <span class="er" style="color: #AD0000;">attribute1</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">'value1'</span> <span class="er" style="color: #AD0000;">attribute2</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">'value2'</span><span class="kw" style="color: #003B4F;">&gt;</span>element contents<span class="kw" style="color: #003B4F;">&lt;/tag&gt;</span></span></code></pre></div>
<p>Two of the most important attributes are <code>id</code> and <code>class</code>. These attributes are used in conjunction with the CSS file to control the visual appearance of the page. These are often very useful to identify the elements that you are interested in when scraping data off a page.</p>
</section>
<section id="css-selectors" class="level2">
<h2 class="anchored" data-anchor-id="css-selectors">CSS Selectors</h2>
<p>The Cascading Style Sheet is used to describe how your HTML content will be displayed. To do this, CSS has it’s own system for selecting elements of a webpage, called CSS selectors.</p>
<p>CSS selectors define patterns for locating the HTML elements that a particular style should be applied to. A happy side-effect of this is that they can sometimes be very useful for scraping, because they provide a concise way of describing which elements you want to extract.</p>
<p>CSS Selectors can work on the level of an element type, a class, or a tag and these can be used in a nested (or <em>cascading</em>) way.</p>
<ul>
<li><p>The <code>p</code> selector will select all paragraph <code>&lt;p&gt;</code> elements.</p></li>
<li><p>The <code>.title</code> selector will select all elements with class <code>“title”</code>.</p></li>
<li><p>The <code>p.special</code> selector will select all<code>&lt;p&gt;</code> elements with class <code>“special”</code>.</p></li>
<li><p>The <code>#title</code> selector will select the element with the id attribute <code>“title”</code>.</p></li>
</ul>
<p>When you want to select a single element <code>id</code> attributes are particularly useful because that <em>must</em> be unique within a html document. Unfortunately, this is only helpful if the developer added an <code>id</code> attribute to the element(s) you want to scrape!</p>
<p>If you want to learn more CSS selectors I recommend starting with the fun <a href="https://flukeout.github.io/">CSS dinner tutorial</a> to build a base of knowledge and then using the <a href="https://www.w3schools.com/css/default.asp">W3schools resources</a> as a reference to explore more webpages in the wild.</p>
</section>
<section id="which-attributes-and-selectors-do-you-need" class="level2">
<h2 class="anchored" data-anchor-id="which-attributes-and-selectors-do-you-need">Which Attributes and Selectors Do You Need?</h2>
<p>To scrape data from a webpage, you first have to identify the tag and attribute combinations that you are interested in gathering.</p>
<p>To find your elements of interest, you have three options. These go from hardest to easiest but also from most to least robust.</p>
<ul>
<li>right click + “inspect page source” (F12)</li>
<li>right click + “inspect”</li>
<li>Rvest <a href="https://rvest.tidyverse.org/articles/selectorgadget.html">Selector Gadget</a> (very useful but fallible)</li>
</ul>
<p>Inspecting the source of some familiar websites can be a useful way to get your head around these concepts. Beware though that sophisticated webpages can be quite intimidating. A good place to start is with simpler, static websites such as personal websites, rather than the dynamic webpages of online retailers or social media platforms.</p>
</section>
<section id="reading-html-with-rvest" class="level2">
<h2 class="anchored" data-anchor-id="reading-html-with-rvest">Reading HTML with <code>{rvest}</code></h2>
<p>With <code>{rvest}</code>, reading a html page can be as simple as loading in tabular data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">html <span class="ot" style="color: #003B4F;">&lt;-</span> rvest<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">read_html</span>(<span class="st" style="color: #20794D;">"https://www.zakvarty.com/professional/teaching.html"</span>)</span></code></pre></div>
</div>
<p>The <code>class</code> of the resulting object is an <code>xml_document</code>. This type of object is from the low-level package <code>{xml2}</code>, which allows you to read xml files into R.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">class</span>(html)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "xml_document" "xml_node"    </code></pre>
</div>
</div>
<p>We can see that this object is split into several components: first is some metadata on the type of document we have scraped, followed by the head and then the body of that html document.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">html</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{html_document}
&lt;html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en"&gt;
[1] &lt;head&gt;\n&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8 ...
[2] &lt;body class="nav-fixed"&gt;\n\n&lt;div id="quarto-search-results"&gt;&lt;/div&gt;\n  &lt;he ...</code></pre>
</div>
</div>
<p>We have several possible approaches to extracting information from this document.</p>
</section>
<section id="extracting-html-elements" class="level2">
<h2 class="anchored" data-anchor-id="extracting-html-elements">Extracting HTML elements</h2>
<p>In <code>{rvest}</code> you can extract a single element with <code>html_element()</code>, or all matching elements with <code>html_elements()</code>. Both functions take a document object and one or more CSS selectors as inputs.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;">library</span>(rvest)</span>
<span id="cb8-2">html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_elements</span>(<span class="st" style="color: #20794D;">"h1"</span>)</span>
<span id="cb8-3"><span class="do" style="color: #5E5E5E;
font-style: italic;">## {xml_nodeset (1)}</span></span>
<span id="cb8-4"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [1] &lt;h1&gt;Teaching&lt;/h1&gt;</span></span>
<span id="cb8-5">html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_elements</span>(<span class="st" style="color: #20794D;">"h2"</span>)</span>
<span id="cb8-6"><span class="do" style="color: #5E5E5E;
font-style: italic;">## {xml_nodeset (2)}</span></span>
<span id="cb8-7"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [1] &lt;h2 id="toc-title"&gt;On this page&lt;/h2&gt;</span></span>
<span id="cb8-8"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [2] &lt;h2 class="anchored" data-anchor-id="course-history"&gt;Course History&lt;/h2&gt;</span></span>
<span id="cb8-9">html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_elements</span>(<span class="st" style="color: #20794D;">"p"</span>)</span>
<span id="cb8-10"><span class="do" style="color: #5E5E5E;
font-style: italic;">## {xml_nodeset (2)}</span></span>
<span id="cb8-11"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [1] &lt;p&gt;I am fortunate to have had the opportunity to teach in a variety of ro ...</span></span>
<span id="cb8-12"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [2] &lt;p&gt;I am an associate fellow of the Higher Education Academy, which you ca ...</span></span></code></pre></div>
</div>
<p>You can also combine and nest these selectors. For example you might want to extract all links that are within paragraphs <em>and</em> all second level headers.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_elements</span>(<span class="st" style="color: #20794D;">"p a,h2"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{xml_nodeset (3)}
[1] &lt;h2 id="toc-title"&gt;On this page&lt;/h2&gt;
[2] &lt;a href="https://www.advance-he.ac.uk/fellowship/associate-fellowship"&gt;he ...
[3] &lt;h2 class="anchored" data-anchor-id="course-history"&gt;Course History&lt;/h2&gt;</code></pre>
</div>
</div>
</section>
<section id="extracting-data-from-html-elements" class="level2">
<h2 class="anchored" data-anchor-id="extracting-data-from-html-elements">Extracting Data From HTML Elements</h2>
<p>Now that we’ve got the elements we care about extracted from the complete document. But how do we get the data we need out of those elements?</p>
<p>You’ll usually get the data from either the contents of the HTML element or else from one of it’s attributes. If you’re really lucky, the data you need will already be formatted for you as a HTML table or list.</p>
<section id="extracting-text" class="level3">
<h3 class="anchored" data-anchor-id="extracting-text">Extracting text</h3>
<p>The functions <code>rvest::html_text()</code> and <code>rvest::html_text2()</code> can be used to extract the plain text contents of an HTML element.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;">html_elements</span>(<span class="st" style="color: #20794D;">"#teaching li"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;">html_text2</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "one-to-one tuition for high school students;"                                   
[2] "running workshops and computer labs for undergraduate and postgraduate modules;"
[3] "delivering short courses on scientific communication and LaTeX;"                
[4] "supervising an undergraduate research project;"                                 
[5] "developing and lecturing postgraduate modules in statistics and data science."  </code></pre>
</div>
</div>
<p>The difference between <code>html_text()</code> and <code>html_text2()</code> is in how they handle whitespace. In HTML whitespace and line breaks have very little influence over how the code is interpreted by the computer (this is similar to R but very different from Python). <code>html_text()</code> will extract the text as it is in the raw html, while <code>html_text2()</code> will do its best to extract the text in a way that gives you something similar to what you’d see in the browser.</p>
</section>
<section id="extracting-attributes" class="level3">
<h3 class="anchored" data-anchor-id="extracting-attributes">Extracting Attributes</h3>
<p>Attributes are also used to record information that you might like to collect. For example, the destination of links are stored in the <code>href</code> attribute and the source of images is stored in the <code>src</code> attribute.</p>
<p>As an example of this, consider trying to extract the twitter link from the icon in the page footer. This is quite tricky to locate in the html source, so I used the <a href="https://rvest.tidyverse.org/articles/selectorgadget.html">Selector Gadget</a> to help find the correct combination of elements.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_element</span>(<span class="st" style="color: #20794D;">".compact:nth-child(1) .nav-link"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{html_node}
&lt;a class="nav-link" href="https://www.twitter.com/zakvarty"&gt;
[1] &lt;i class="bi bi-twitter" role="img"&gt;\n&lt;/i&gt;</code></pre>
</div>
</div>
<p>To extract the <code>href</code> attribute from the scraped element, we use the <code>rvest::html_attr()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-2">  <span class="fu" style="color: #4758AB;">html_elements</span>(<span class="st" style="color: #20794D;">".compact:nth-child(1) .nav-link"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-3">  <span class="fu" style="color: #4758AB;">html_attr</span>(<span class="st" style="color: #20794D;">"href"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "https://www.twitter.com/zakvarty"</code></pre>
</div>
</div>
<p><strong>Note:</strong> <code>rvest::html_attr()</code> will always return a character string (or list of character strings). If you are extracting an attribute that describes a quantity, such as the width of an image, you’ll need to convert this from a string to your required data type. For example, of the width is measures in pixels you might use <code>as.integer()</code>.</p>
</section>
<section id="extracting-tables" class="level3">
<h3 class="anchored" data-anchor-id="extracting-tables">Extracting tables</h3>
<p>HTML tables are composed in a similar, nested manner to LaTeX tables.</p>
<p>There are four main elements to know about that make up an HTML table:</p>
<ul>
<li><code>&lt;table&gt;</code>,</li>
<li><code>&lt;tr&gt;</code> (table row),</li>
<li><code>&lt;th&gt;</code> (table heading),</li>
<li><code>&lt;td&gt;</code> (table data).</li>
</ul>
<p>Here’s our simple example data, formatted as an HTML table:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">html_2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">minimal_html</span>(<span class="st" style="color: #20794D;">"</span></span>
<span id="cb17-2"><span class="st" style="color: #20794D;">  &lt;table&gt;</span></span>
<span id="cb17-3"><span class="st" style="color: #20794D;">    &lt;tr&gt;</span></span>
<span id="cb17-4"><span class="st" style="color: #20794D;">      &lt;th&gt;Name&lt;/th&gt;</span></span>
<span id="cb17-5"><span class="st" style="color: #20794D;">      &lt;th&gt;Number&lt;/th&gt;</span></span>
<span id="cb17-6"><span class="st" style="color: #20794D;">    &lt;/tr&gt;</span></span>
<span id="cb17-7"><span class="st" style="color: #20794D;">    &lt;tr&gt;</span></span>
<span id="cb17-8"><span class="st" style="color: #20794D;">      &lt;td&gt;A&lt;/td&gt;</span></span>
<span id="cb17-9"><span class="st" style="color: #20794D;">      &lt;td&gt;1&lt;/td&gt;</span></span>
<span id="cb17-10"><span class="st" style="color: #20794D;">    &lt;/tr&gt;</span></span>
<span id="cb17-11"><span class="st" style="color: #20794D;">    &lt;tr&gt;</span></span>
<span id="cb17-12"><span class="st" style="color: #20794D;">      &lt;td&gt;B&lt;/td&gt;</span></span>
<span id="cb17-13"><span class="st" style="color: #20794D;">      &lt;td&gt;2&lt;/td&gt;</span></span>
<span id="cb17-14"><span class="st" style="color: #20794D;">    &lt;/tr&gt;</span></span>
<span id="cb17-15"><span class="st" style="color: #20794D;">    &lt;tr&gt;</span></span>
<span id="cb17-16"><span class="st" style="color: #20794D;">      &lt;td&gt;C&lt;/td&gt;</span></span>
<span id="cb17-17"><span class="st" style="color: #20794D;">      &lt;td&gt;3&lt;/td&gt;</span></span>
<span id="cb17-18"><span class="st" style="color: #20794D;">    &lt;/tr&gt;</span></span>
<span id="cb17-19"><span class="st" style="color: #20794D;">  &lt;/table&gt;</span></span>
<span id="cb17-20"><span class="st" style="color: #20794D;">  "</span>)</span></code></pre></div>
</div>
<p>Since tables are a common way to store data, <code>{rvest}</code> includes a useful function <code>html_table()</code> that converts directly from an HTML table into a tibble.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">html_2 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;">html_element</span>(<span class="st" style="color: #20794D;">"table"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-3">  <span class="fu" style="color: #4758AB;">html_table</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 2
  Name  Number
  &lt;chr&gt;  &lt;int&gt;
1 A          1
2 B          2
3 C          3</code></pre>
</div>
</div>
<p>Applying this to our real scraped data we can easily extract the table of taught courses.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;">html_element</span>(<span class="st" style="color: #20794D;">"table"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-3">  <span class="fu" style="color: #4758AB;">html_table</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 25 × 3
   Year      Course                                   Role                      
   &lt;chr&gt;     &lt;chr&gt;                                    &lt;chr&gt;                     
 1 "2021-22" Supervised Learning                      Lecturer                  
 2 ""        Ethics in Data Science I                 Lecturer                  
 3 ""        Ethics in Data Science II                Lecturer                  
 4 "—"       —                                        —                         
 5 "2020-21" MATH562/582: Extreme Value Theory        Lecturer                  
 6 ""        MATH331: Bayesian Inference              Graduate teaching assista…
 7 ""        MATH330: Likelihood Inference            Graduate teaching assista…
 8 "2019-20" DSCI485: Introduction to LaTeX           Co-leading short course   
 9 ""        MATH566: Longitudinal Data Analysis      Graduate teaching assista…
10 "2018-19" STOR-i Internship: Introduction to LaTeX Co-leading short course   
# … with 15 more rows</code></pre>
</div>
</div>
</section>
</section>
<section id="tip-for-building-tibbles" class="level2">
<h2 class="anchored" data-anchor-id="tip-for-building-tibbles">Tip for Building Tibbles</h2>
<p>When scraping data from a webpage, your end-goal is typically going to be constructing a data.frame or a tibble.</p>
<p>If you are following our description of tidy data, you’ll want each row to correspond some repeated unit on the HTML page. In this case, you should</p>
<ol type="1">
<li>Use <code>html_elements()</code> to select the elements that contain each observation unit;</li>
<li>Use <code>html_element()</code> to extract the variables from each of those observations.</li>
</ol>
<p>Taking this approach guarantees that you’ll get the same number of values for each variable, because <code>html_element()</code> always returns the same number of outputs as inputs. This is vital when you have missing data - when not every observation unit has a value for every variable of interest.</p>
<p>As an example, consider this extract of text about the <a href="https://dplyr.tidyverse.org/reference/starwars.html#ref-examples">starwars dataset</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">starwars_html <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">minimal_html</span>(<span class="st" style="color: #20794D;">"</span></span>
<span id="cb22-2"><span class="st" style="color: #20794D;">  &lt;ul&gt;</span></span>
<span id="cb22-3"><span class="st" style="color: #20794D;">    &lt;li&gt;&lt;b&gt;C-3PO&lt;/b&gt; is a &lt;i&gt;droid&lt;/i&gt; that weighs &lt;span class='weight'&gt;167 kg&lt;/span&gt;&lt;/li&gt;</span></span>
<span id="cb22-4"><span class="st" style="color: #20794D;">    &lt;li&gt;&lt;b&gt;R2-D2&lt;/b&gt; is a &lt;i&gt;droid&lt;/i&gt; that weighs &lt;span class='weight'&gt;96 kg&lt;/span&gt;&lt;/li&gt;</span></span>
<span id="cb22-5"><span class="st" style="color: #20794D;">    &lt;li&gt;&lt;b&gt;Yoda&lt;/b&gt; weighs &lt;span class='weight'&gt;66 kg&lt;/span&gt;&lt;/li&gt;</span></span>
<span id="cb22-6"><span class="st" style="color: #20794D;">    &lt;li&gt;&lt;b&gt;R4-P17&lt;/b&gt; is a &lt;i&gt;droid&lt;/i&gt;&lt;/li&gt;</span></span>
<span id="cb22-7"><span class="st" style="color: #20794D;">  &lt;/ul&gt;</span></span>
<span id="cb22-8"><span class="st" style="color: #20794D;">  "</span>)</span></code></pre></div>
</div>
<p>This is an unordered list where each list item corresponds to one observational unit (one character from the starwars universe). The name of the character is given in bold, the character species is specified in italics and the weight of the character is denoted by the <code>.weight</code> class. However, some characters have only a subset of these variables defined: for example Yoda has no species entry.</p>
<p>If we try to extract each element directly, our vectors of variable values are of different lengths. We don’t know where the missing values should be, so we can’t line them back up to make a tibble.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">starwars_html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_elements</span>(<span class="st" style="color: #20794D;">"b"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_text2</span>()</span>
<span id="cb23-2"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [1] "C-3PO"  "R2-D2"  "Yoda"   "R4-P17"</span></span>
<span id="cb23-3">starwars_html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_elements</span>(<span class="st" style="color: #20794D;">"i"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_text2</span>()</span>
<span id="cb23-4"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [1] "droid" "droid" "droid"</span></span>
<span id="cb23-5">starwars_html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_elements</span>(<span class="st" style="color: #20794D;">".weight"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_text2</span>()</span>
<span id="cb23-6"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [1] "167 kg" "96 kg"  "66 kg"</span></span></code></pre></div>
</div>
<p>What we should do instead is start by extracting all of the list item elements using <code>html_elements()</code>. Once we have done this, we can then use <code>html_element()</code> to extract each variable for all characters. This will pad with NAs, so that we can collate them into a tibble.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">starwars_characters <span class="ot" style="color: #003B4F;">&lt;-</span> starwars_html <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_elements</span>(<span class="st" style="color: #20794D;">"li"</span>)</span>
<span id="cb24-2"></span>
<span id="cb24-3">starwars_characters <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_element</span>(<span class="st" style="color: #20794D;">"b"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_text2</span>()</span>
<span id="cb24-4"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [1] "C-3PO"  "R2-D2"  "Yoda"   "R4-P17"</span></span>
<span id="cb24-5">starwars_characters <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_element</span>(<span class="st" style="color: #20794D;">"i"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_text2</span>()</span>
<span id="cb24-6"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [1] "droid" "droid" NA      "droid"</span></span>
<span id="cb24-7">starwars_characters <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_element</span>(<span class="st" style="color: #20794D;">".weight"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_text2</span>()</span>
<span id="cb24-8"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [1] "167 kg" "96 kg"  "66 kg"  NA</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">tibble<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb25-2">  <span class="at" style="color: #657422;">name =</span> starwars_characters <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_element</span>(<span class="st" style="color: #20794D;">"b"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_text2</span>(),</span>
<span id="cb25-3">  <span class="at" style="color: #657422;">species =</span> starwars_characters <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_element</span>(<span class="st" style="color: #20794D;">"i"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_text2</span>(),</span>
<span id="cb25-4">  <span class="at" style="color: #657422;">weight =</span> starwars_characters <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_element</span>(<span class="st" style="color: #20794D;">".weight"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">html_text2</span>()</span>
<span id="cb25-5">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 3
  name   species weight
  &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt; 
1 C-3PO  droid   167 kg
2 R2-D2  droid   96 kg 
3 Yoda   &lt;NA&gt;    66 kg 
4 R4-P17 droid   &lt;NA&gt;  </code></pre>
</div>
</div>


</section>

<div id="quarto-appendix"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{varty2022,
  author = {Zak Varty},
  title = {Web {Scraping} with `\{Rvest\}`},
  date = {2022-12-01},
  url = {https://www.zakvarty.com/blog/2022-12-01-rvest},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-varty2022" class="csl-entry quarto-appendix-citeas">
Zak Varty. 2022. <span>“Web Scraping with `{Rvest}`.”</span> December 1,
2022. <a href="https://www.zakvarty.com/blog/2022-12-01-rvest">https://www.zakvarty.com/blog/2022-12-01-rvest</a>.
</div></div></section></div> ]]></description>
  <category>data science</category>
  <category>data acquisition</category>
  <category>tutorial</category>
  <guid>https://www.zakvarty.com/blog/2022-12-01-rvest/index.html</guid>
  <pubDate>Thu, 01 Dec 2022 00:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2022-12-01-rvest/rvest-logo.png" medium="image" type="image/png" height="167" width="144"/>
</item>
<item>
  <title>Good Enough Practices in Scientific Computing</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2022-10-19-good-enough-practices-in-scientific-computing/index.html</link>
  <description><![CDATA[ 



<!--Photo by <a href="https://unsplash.com/@qwitka?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Maksym Kaharlytskyi</a> on <a href="https://unsplash.com/s/photos/filing-cabinet?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a> -->
<section id="reading-summary" class="level2">
<h2 class="anchored" data-anchor-id="reading-summary">Reading Summary</h2>
<p><code>wilson2017good</code></p>
<p><strong>Title:</strong> <em>Good Enough Practices in Scientific Computing. {PLOS Computational Biology, 2017} (20 pages).</em></p>
<p><strong>Authors:</strong> <em>Greg Wilson, Jennifer Bryan, Karen Cranston, Justin Kitzes, Lex Nederbragt and Tracy K. Teal.</em></p>
<p><strong>Key words:</strong> <em>computing</em>, <em>research skills</em>, <em>reproducibilty</em>, <em>guides</em>.</p>
<p>In this paper by <span class="citation" data-cites="wilson2017good">Wilson et al. (2017)</span>, a collection of experienced researchers and instructors give simple ways to implement good computing practices during a research project. They do this by providing a list of concrete recommendations that every researcher can adopt, regardless of their current computational skills. This is important to help the transition toward open, documented and reproducible research. The article is aimed specifically at people who are new to computational research but also contains useful guidance for more experienced researchers.</p>
</section>
<section id="notes" class="level2">
<h2 class="anchored" data-anchor-id="notes">Notes</h2>
<p>This article describes some of the best-practices in software development and how those ideas can be implemented in a reasearch project. This focus here is on implementing these approaches without requiring reseachers to learn how to use lots of peripheral technologies (for example git and LaTeX / markdown).</p>
<p>An earlier paper “Best Practices for Scientifc Computing” <span class="citation" data-cites="wilson2014best">(Wilson et al. 2014)</span>, is aimed at those who have or would like to develop such peripheral skills.</p>
</section>
<section id="suggested-best-practices" class="level2">
<h2 class="anchored" data-anchor-id="suggested-best-practices">Suggested Best Practices</h2>
<p>Best practices are grouped into 6 main themes.</p>
<section id="data-management" class="level3">
<h3 class="anchored" data-anchor-id="data-management">1. Data Management</h3>
<section id="create-the-data-you-wish-to-see-in-the-world" class="level4">
<h4 class="anchored" data-anchor-id="create-the-data-you-wish-to-see-in-the-world">Create the data you wish to see in the world</h4>
<p>Raw data should be created in a format that is ammenable to analysis and where multiple tables are used, a unique identifer used to link each record across these tables.</p>
</section>
<section id="keep-it-backed-up-keep-it-intact" class="level4">
<h4 class="anchored" data-anchor-id="keep-it-backed-up-keep-it-intact">Keep it backed up, keep it intact</h4>
<p>This raw data should be backed up in more than one location and preserved during the analysis (i.e.&nbsp;<strong>not</strong> directly edited). When cleaning, handling and modelling the data keep a record of all steps used.</p>
</section>
<section id="share-the-data" class="level4">
<h4 class="anchored" data-anchor-id="share-the-data">Share the data</h4>
<p>To allow your future self (and others) to access and cite your hard won data, submit it to a reputable DOI-issuing repository.</p>
</section>
</section>
<section id="software" class="level3">
<h3 class="anchored" data-anchor-id="software">2. Software</h3>
<section id="script-files" class="level4">
<h4 class="anchored" data-anchor-id="script-files">Script files</h4>
<p>Start each script with a brief explanatory comment of its purpose and a description of any dependencies.</p>
<p>Within scripts, ruthlessly eliminate duplication. Do this by creating functions for any repeated operations and provide simple examples of how those functions work.</p>
<p>When making functions and variables, give them meaningful names. As rule of thumb: fuctions are verbs, variables are nouns.</p>
<p>If you need your script to perform different actions, control this behaviour programmatically rather than by commenting/uncommenting sections of code.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Uncomment for weekly reports</span></span>
<span id="cb1-2">output_dir <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"weekly_reports/"</span>,year,<span class="st" style="color: #20794D;">"/"</span>,week_of_year,<span class="st" style="color: #20794D;">"/"</span>)</span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;"># Uncomment for annual reports</span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;">#output_dir &lt;- paste0("annual_reports/",year,"/")</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">report_type <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"weekly"</span></span>
<span id="cb2-2">year <span class="ot" style="color: #003B4F;">=</span> <span class="dv" style="color: #AD0000;">2022</span></span>
<span id="cb2-3">week_of_year <span class="ot" style="color: #003B4F;">=</span> <span class="dv" style="color: #AD0000;">21</span></span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="cf" style="color: #003B4F;">if</span> (report_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"weekly"</span>) {</span>
<span id="cb2-6">  output_dir <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"weekly_reports/"</span>,year,<span class="st" style="color: #20794D;">"/"</span>,week_of_year,<span class="st" style="color: #20794D;">"/"</span>)</span>
<span id="cb2-7">} <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (report_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"annual"</span>) {</span>
<span id="cb2-8">  output_dir <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"annual_reports/"</span>,year,<span class="st" style="color: #20794D;">"/"</span>)</span>
<span id="cb2-9">} <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb2-10">  <span class="fu" style="color: #4758AB;">stop</span>(<span class="st" style="color: #20794D;">"report_type should be 'weekly' or 'annual'."</span>)</span>
<span id="cb2-11">}</span></code></pre></div>
</div>
<p>Submit the final code for your research project to to a reputable DOI-issuing repository.</p>
</section>
<section id="external-code" class="level4">
<h4 class="anchored" data-anchor-id="external-code">External Code</h4>
<p>Before writing your own code, check if someone else got there first. Are there well-maintained software libraries that already do what you need?</p>
<p>If so, test the code (extensively!) before relying on it. Keep a record of what you have tested and add to this as you find awkward edge cases.</p>
</section>
</section>
<section id="collaboration" class="level3">
<h3 class="anchored" data-anchor-id="collaboration">3. Collaboration</h3>
<section id="collaborating-within-your-team" class="level4">
<h4 class="anchored" data-anchor-id="collaborating-within-your-team">Collaborating within your team</h4>
<p>Create a single file called <code>README</code> giving an overview of your project. This should describe aim of the project and how to get started working with the data/code/writing. A good rule of thumb is to write this as though it were for either a new-starter on your team. Future you will thank you!</p>
<p>Create a shared to-do list for the project in a file called <code>TODO</code> and decide on how you will communicate during the project. For example, what channels will you use for group meetings, quick questions, assigning tasks and setting deadlines?</p>
</section>
<section id="opening-up-to-the-wider-world" class="level4">
<h4 class="anchored" data-anchor-id="opening-up-to-the-wider-world">Opening up to the wider world</h4>
<p>Add another file called <code>LICENSE</code> giving the licensing information for the project. This says who can use it and for what purposes. No license implies you are keeping all rights and nobody is allowed to reuse or modify the materials. For more information on licenses see <a href="choosealicense.com">choosealicense.com</a> or <a href="https://opensource.guide/legal/#which-open-source-license-is-appropriate-for-my-project">The Open Source Guide</a>. Consult your company’s legal folks as needed.</p>
<p>Create a final file called <code>CITATION</code> letting other people know how they should give proper attribution to your work if they use it.</p>
</section>
</section>
<section id="project-organisation" class="level3">
<h3 class="anchored" data-anchor-id="project-organisation">4. Project Organisation</h3>
<p>Each project should be self-contained in its own directory (folder) and this directory should be named after the project.</p>
<p>Create subdirectories called:</p>
<ul>
<li><code>docs/</code> for all text documents associated with the project</li>
<li><code>data/raw/</code> for all raw data and metadata</li>
<li><code>data/derived/</code> for all data files during cleanup and analysis</li>
<li><code>src</code> for all code you write as part of this project</li>
<li><code>bin</code> for all external code or compiled programs that you use in this project</li>
</ul>
<p>When adding files and subdirectories within this structure, name these to clearly reflect their content or function.</p>
</section>
<section id="tracking-changes" class="level3">
<h3 class="anchored" data-anchor-id="tracking-changes">5. Tracking Changes</h3>
<p>As soon as any file is created by a human, back it up in multiple locations. If you make a huge file, then consult your IT folks about how to store and back it up.</p>
<p>Add a file called <code>CHANGELOG</code> to the docs subfolder. Use this to track all changes made within the project by all contributers, describing when the changes happened and why they were made.</p>
<p>Keep these changes as small as possible and share among collaborators frequently to avoid getting out of sync.</p>
<p>Make a Copy the entire project whenever a significant change has been made.</p>
<p>Better yet, use a dedicated version control system such as git if that is a realistic option.</p>
</section>
<section id="manuscripts" class="level3">
<h3 class="anchored" data-anchor-id="manuscripts">6. Manuscripts</h3>
<p>Pick one and stick to it within each project. The former has a much lower bar to entry and has most of the benefits of the latter (other than manuscripts being stored in the same place as everything else).</p>
<ol type="1">
<li><p>Write the manuscript using online tools with rich formatting, change tracking and reference management. (e.g.&nbsp;Overleaf, Google Docs)</p></li>
<li><p>Write the manuscript in plain text format the permits version control (e.g.&nbsp;tex + git or markdown + git)</p></li>
</ol>



</section>
</section>

<div id="quarto-appendix"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-wilson2014best" class="csl-entry">
Wilson, Greg, D. A. Aruliah, C. Titus Brown, Neil P. Chue Hong, Matt Davis, Richard T. Guy, Steven H. D. Haddock, et al. 2014. <span>“Best Practices for Scientific Computing.”</span> <em>PLOS Biology</em> 12 (January): 1–7. <a href="https://doi.org/10.1371/journal.pbio.1001745">https://doi.org/10.1371/journal.pbio.1001745</a>.
</div>
<div id="ref-wilson2017good" class="csl-entry">
Wilson, Greg, Jennifer Bryan, Karen Cranston, Justin Kitzes, Lex Nederbragt, and Tracy K Teal. 2017. <span>“Good Enough Practices in Scientific Computing.”</span> <em>PLoS Computational Biology</em> 13 (June): 1–20. <a href="https://doi.org/10.1371/journal.pcbi.1005510">https://doi.org/10.1371/journal.pcbi.1005510</a>.
</div>
</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section></div> ]]></description>
  <category>academic skills</category>
  <category>computing</category>
  <category>reproducible research</category>
  <category>reading summary</category>
  <guid>https://www.zakvarty.com/blog/2022-10-19-good-enough-practices-in-scientific-computing/index.html</guid>
  <pubDate>Tue, 18 Oct 2022 23:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2022-10-19-good-enough-practices-in-scientific-computing/gepisc-image.png" medium="image" type="image/png" height="68" width="144"/>
</item>
<item>
  <title>Data Journalism: Recreating a Professional Plot</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2022-10-15-BBC-temperature-plot/index.html</link>
  <description><![CDATA[ 



<section id="bbc-temperature-records" class="level1">
<h1>BBC Temperature Records</h1>
<p>On Friday 2022-10-14, the BBC Data Journalism Team released this excellent <a href="https://www.bbc.co.uk/news/science-environment-63244353">article</a> about the record temperatures in the UK during this summer’s heatwave. The article has some amazing data visualisations, and draws on a recent Met Office report.</p>
<p>I wanted to try and recreate one of the plots to test the limits of my ggplot knowledge. Since I had already tackled a stacked bar plot, I figured I might have a go at their dumbbell plot that shows the weather stations which exceeded their previous records largest margins.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.zakvarty.com/blog/2022-10-15-BBC-temperature-plot/bbc-temperature-records.png.webp" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">bbc temperature records dumbbell plot</figcaption><p></p>
</figure>
</div>
<p>I couldn’t find the data source, so spent <strong>far</strong> too long with a printed copy of the original figure to make my own version of the data set.</p>
<p>It took a while, but I got most of the way there with it and am happy with the final result.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.zakvarty.com/blog/2022-10-15-BBC-temperature-plot/zdv-temperature-records.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">my attempt at recreating the same plot</figcaption><p></p>
</figure>
</div>
<p>There were a few things that still have me stumped, that I might revisit at some later date:</p>
<ul class="task-list">
<li><input type="checkbox" disabled="" checked="">
Left aligning title and caption (Thanks to Jack Davison for this!)</li>
<li><input type="checkbox" disabled="">
Using gradients on multiple parts of the plot</li>
<li><input type="checkbox" disabled="">
Using the YeOrRd gradient, rather than default blues</li>
<li><input type="checkbox" disabled="">
Adding a non-BBC logo to the bottom right.</li>
</ul>
<p>If anyone with superior ggplot skills would like to help with those or give pointers, then I would be most grateful!</p>
<p>Code and figure down below ↓</p>
<div class="cell" data-fig.dpi="100">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Load packages ----</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(bbplot)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(showtext)</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;"># Import fonts ----</span></span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;">font_add_google</span>(<span class="at" style="color: #657422;">name =</span> <span class="st" style="color: #20794D;">"Roboto Slab"</span>, <span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">"roboto-slab"</span>)</span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;">font_add_google</span>(<span class="at" style="color: #657422;">name =</span> <span class="st" style="color: #20794D;">"Roboto"</span>, <span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">"roboto"</span>)</span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;">showtext_auto</span>()</span>
<span id="cb1-10">title_font <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"roboto-slab"</span></span>
<span id="cb1-11">font <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"roboto"</span></span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;"># Input data (estimated values from article) ---</span></span>
<span id="cb1-14">temperatures <span class="ot" style="color: #003B4F;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">tribble</span>(</span>
<span id="cb1-15">  <span class="sc" style="color: #5E5E5E;">~</span>location, <span class="sc" style="color: #5E5E5E;">~</span>max_prev, <span class="sc" style="color: #5E5E5E;">~</span>max_2022,</span>
<span id="cb1-16">  <span class="st" style="color: #20794D;">"Cranwell"</span>, <span class="fl" style="color: #AD0000;">36.6</span>, <span class="fl" style="color: #AD0000;">39.9</span>,</span>
<span id="cb1-17">  <span class="st" style="color: #20794D;">"Nottingham"</span>, <span class="fl" style="color: #AD0000;">36.0</span>, <span class="fl" style="color: #AD0000;">39.8</span>,</span>
<span id="cb1-18">  <span class="st" style="color: #20794D;">"Bramham"</span>, <span class="fl" style="color: #AD0000;">33.5</span>, <span class="fl" style="color: #AD0000;">39.8</span>,</span>
<span id="cb1-19">  <span class="st" style="color: #20794D;">"Sutton Boningon"</span>, <span class="fl" style="color: #AD0000;">35.9</span>, <span class="fl" style="color: #AD0000;">39.4</span>,</span>
<span id="cb1-20">  <span class="st" style="color: #20794D;">"Sheffield"</span>, <span class="fl" style="color: #AD0000;">35.6</span>, <span class="fl" style="color: #AD0000;">39.4</span>,</span>
<span id="cb1-21">  <span class="st" style="color: #20794D;">"Leeming"</span>, <span class="fl" style="color: #AD0000;">34.4</span>, <span class="fl" style="color: #AD0000;">38.7</span>,</span>
<span id="cb1-22">  <span class="st" style="color: #20794D;">"Goudhurst"</span>, <span class="fl" style="color: #AD0000;">34.7</span>, <span class="fl" style="color: #AD0000;">37.9</span>,</span>
<span id="cb1-23">  <span class="st" style="color: #20794D;">"Whitby"</span>, <span class="fl" style="color: #AD0000;">33.1</span>, <span class="fl" style="color: #AD0000;">37.8</span>,</span>
<span id="cb1-24">  <span class="st" style="color: #20794D;">"Bradford"</span>, <span class="fl" style="color: #AD0000;">33.9</span>, <span class="fl" style="color: #AD0000;">37.8</span>,</span>
<span id="cb1-25">  <span class="st" style="color: #20794D;">"High Mowthorpe"</span>, <span class="fl" style="color: #AD0000;">33.1</span>, <span class="fl" style="color: #AD0000;">37.2</span>,</span>
<span id="cb1-26">  <span class="st" style="color: #20794D;">"Blackpool"</span>, <span class="fl" style="color: #AD0000;">33.6</span>, <span class="fl" style="color: #AD0000;">37.2</span>,</span>
<span id="cb1-27">  <span class="st" style="color: #20794D;">"Durham"</span>, <span class="fl" style="color: #AD0000;">32.9</span>, <span class="fl" style="color: #AD0000;">36.9</span>,</span>
<span id="cb1-28">  <span class="st" style="color: #20794D;">"Preston"</span>, <span class="fl" style="color: #AD0000;">33.1</span>, <span class="fl" style="color: #AD0000;">36.5</span>,</span>
<span id="cb1-29">  <span class="st" style="color: #20794D;">"Morecambe"</span>, <span class="fl" style="color: #AD0000;">32.7</span>, <span class="fl" style="color: #AD0000;">36.4</span>,</span>
<span id="cb1-30">  <span class="st" style="color: #20794D;">"Stonyhurst"</span>, <span class="fl" style="color: #AD0000;">32.6</span>, <span class="fl" style="color: #AD0000;">36.3</span>,</span>
<span id="cb1-31">  <span class="st" style="color: #20794D;">"Keele"</span>, <span class="fl" style="color: #AD0000;">32.9</span>, <span class="fl" style="color: #AD0000;">36.2</span>,</span>
<span id="cb1-32">  <span class="st" style="color: #20794D;">"Bude"</span>, <span class="fl" style="color: #AD0000;">32.2</span>, <span class="fl" style="color: #AD0000;">36.1</span>,</span>
<span id="cb1-33">  <span class="st" style="color: #20794D;">"Buxton"</span>, <span class="fl" style="color: #AD0000;">32.7</span>, <span class="fl" style="color: #AD0000;">36.0</span>,</span>
<span id="cb1-34">  <span class="st" style="color: #20794D;">"Kielder Castle"</span>, <span class="fl" style="color: #AD0000;">29.6</span>, <span class="fl" style="color: #AD0000;">35.0</span>,</span>
<span id="cb1-35">  <span class="st" style="color: #20794D;">"Bala"</span>, <span class="fl" style="color: #AD0000;">31.9</span>, <span class="fl" style="color: #AD0000;">34.9</span></span>
<span id="cb1-36">)</span>
<span id="cb1-37"></span>
<span id="cb1-38"><span class="co" style="color: #5E5E5E;"># Data preparation ----</span></span>
<span id="cb1-39"></span>
<span id="cb1-40"><span class="do" style="color: #5E5E5E;
font-style: italic;">## For the points ----</span></span>
<span id="cb1-41">temperatures <span class="ot" style="color: #003B4F;">&lt;-</span> temperatures <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb1-42">  dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">max_ever =</span> <span class="fu" style="color: #4758AB;">pmax</span>(max_2022, max_prev))</span>
<span id="cb1-43"></span>
<span id="cb1-44">temperatures<span class="sc" style="color: #5E5E5E;">$</span>location <span class="ot" style="color: #003B4F;">&lt;-</span> forcats<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">fct_reorder</span>(<span class="fu" style="color: #4758AB;">as.factor</span>(temperatures<span class="sc" style="color: #5E5E5E;">$</span>location), <span class="at" style="color: #657422;">.x =</span> temperatures<span class="sc" style="color: #5E5E5E;">$</span>max_ever)</span>
<span id="cb1-45"></span>
<span id="cb1-46">temp_long <span class="ot" style="color: #003B4F;">&lt;-</span> tidyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">pivot_longer</span>(temperatures, <span class="at" style="color: #657422;">cols =</span> <span class="fu" style="color: #4758AB;">c</span>(max_2022, max_prev), <span class="at" style="color: #657422;">names_to =</span> <span class="st" style="color: #20794D;">"year"</span>,<span class="at" style="color: #657422;">values_to =</span> <span class="st" style="color: #20794D;">"temperature"</span>)</span>
<span id="cb1-47"></span>
<span id="cb1-48"><span class="do" style="color: #5E5E5E;
font-style: italic;">## For the bars ----</span></span>
<span id="cb1-49">n_interp <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">501</span></span>
<span id="cb1-50">temp_interpolated <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tibble</span>(<span class="fu" style="color: #4758AB;">rep</span>(<span class="cn" style="color: #8f5902;">NA</span>, n_interp<span class="sc" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">20</span>))</span>
<span id="cb1-51">temp_interpolated[[<span class="dv" style="color: #AD0000;">1</span>]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rep</span>(temperatures<span class="sc" style="color: #5E5E5E;">$</span>location, <span class="at" style="color: #657422;">each =</span> n_interp)</span>
<span id="cb1-52">temp_interpolated[[<span class="dv" style="color: #AD0000;">2</span>]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rep</span>(<span class="cn" style="color: #8f5902;">NA_real_</span>, n_interp<span class="sc" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">20</span>)</span>
<span id="cb1-53"><span class="fu" style="color: #4758AB;">names</span>(temp_interpolated) <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"location"</span>, <span class="st" style="color: #20794D;">"interp_value"</span>)</span>
<span id="cb1-54"><span class="cf" style="color: #003B4F;">for</span> (i <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">20</span>) {</span>
<span id="cb1-55">  temp_interpolated<span class="sc" style="color: #5E5E5E;">$</span>interp_value[(<span class="dv" style="color: #AD0000;">1</span> <span class="sc" style="color: #5E5E5E;">+</span> n_interp <span class="sc" style="color: #5E5E5E;">*</span> (i <span class="sc" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>))<span class="sc" style="color: #5E5E5E;">:</span>(n_interp<span class="sc" style="color: #5E5E5E;">*</span>i)] <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb1-56">    <span class="fu" style="color: #4758AB;">seq</span>(temperatures<span class="sc" style="color: #5E5E5E;">$</span>max_prev[i], temperatures<span class="sc" style="color: #5E5E5E;">$</span>max_2022[i], <span class="at" style="color: #657422;">length.out =</span> n_interp)</span>
<span id="cb1-57">}</span>
<span id="cb1-58"></span>
<span id="cb1-59">str_wrap_break <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x, break_limit) {</span>
<span id="cb1-60">  <span class="co" style="color: #5E5E5E;"># Function from {usefunc} by N Rennie (https://github.com/nrennie/usefunc)</span></span>
<span id="cb1-61">  <span class="fu" style="color: #4758AB;">sapply</span>(<span class="fu" style="color: #4758AB;">strwrap</span>(x, break_limit, <span class="at" style="color: #657422;">simplify =</span> <span class="cn" style="color: #8f5902;">FALSE</span>), paste, <span class="at" style="color: #657422;">collapse =</span> <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">"</span>)</span>
<span id="cb1-62">}</span>
<span id="cb1-63"></span>
<span id="cb1-64">title_string <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"Huge breaks from previous records in 2022"</span></span>
<span id="cb1-65">subtitle_string <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">str_wrap_break</span>(<span class="st" style="color: #20794D;">"Stations with largest gaps between previous and new records, ordered by highest new temperature"</span>,<span class="dv" style="color: #AD0000;">60</span>)</span>
<span id="cb1-66">caption_string <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"Only includes active weather stations with at least 50 years of observations"</span></span>
<span id="cb1-67"></span>
<span id="cb1-68"></span>
<span id="cb1-69"></span>
<span id="cb1-70"></span>
<span id="cb1-71"></span>
<span id="cb1-72">p <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-73">  <span class="fu" style="color: #4758AB;">geom_line</span>(<span class="at" style="color: #657422;">data =</span> temp_interpolated, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> interp_value, <span class="at" style="color: #657422;">y =</span> location, <span class="at" style="color: #657422;">color =</span> interp_value), <span class="at" style="color: #657422;">lwd =</span> <span class="dv" style="color: #AD0000;">3</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-74">  <span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb1-75">  <span class="fu" style="color: #4758AB;">geom_label</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"2022 record"</span>, <span class="at" style="color: #657422;">x =</span> <span class="fl" style="color: #AD0000;">38.7</span>, <span class="at" style="color: #657422;">y =</span> <span class="fl" style="color: #AD0000;">7.2</span>), <span class="at" style="color: #657422;">family =</span> font, <span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">6.5</span>, <span class="at" style="color: #657422;">label.size =</span> <span class="cn" style="color: #8f5902;">NA</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-76">  <span class="fu" style="color: #4758AB;">geom_curve</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">38</span>, <span class="at" style="color: #657422;">y =</span> <span class="fl" style="color: #AD0000;">7.9</span>, <span class="at" style="color: #657422;">xend =</span> <span class="fl" style="color: #AD0000;">36.9</span>, <span class="at" style="color: #657422;">yend =</span> <span class="fl" style="color: #AD0000;">8.9</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-77">  <span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb1-78">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Previous </span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;"> record"</span>, <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">31</span>, <span class="at" style="color: #657422;">y =</span> <span class="dv" style="color: #AD0000;">11</span>), <span class="at" style="color: #657422;">family =</span> font, <span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">6.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-79">  <span class="fu" style="color: #4758AB;">geom_curve</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">xend =</span> <span class="dv" style="color: #AD0000;">32</span>, <span class="at" style="color: #657422;">yend =</span> <span class="dv" style="color: #AD0000;">11</span>, <span class="at" style="color: #657422;">x =</span> <span class="fl" style="color: #AD0000;">32.9</span>, <span class="at" style="color: #657422;">y =</span> <span class="fl" style="color: #AD0000;">8.9</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-80">  <span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb1-81">  <span class="fu" style="color: #4758AB;">geom_label</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Biggest leap"</span>, <span class="at" style="color: #657422;">x =</span> <span class="fl" style="color: #AD0000;">33.7</span>, <span class="at" style="color: #657422;">y =</span> <span class="dv" style="color: #AD0000;">20</span>), <span class="at" style="color: #657422;">family =</span> font, <span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">6.5</span>, <span class="at" style="color: #657422;">label.size =</span> <span class="cn" style="color: #8f5902;">NA</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-82">  <span class="fu" style="color: #4758AB;">geom_label</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"6.3C"</span>, <span class="at" style="color: #657422;">x =</span> <span class="fl" style="color: #AD0000;">34.0</span>, <span class="at" style="color: #657422;">y =</span> <span class="dv" style="color: #AD0000;">19</span>), <span class="at" style="color: #657422;">family =</span> font, <span class="at" style="color: #657422;">fontface=</span><span class="st" style="color: #20794D;">"bold"</span>, <span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">6.5</span>, <span class="at" style="color: #657422;">label.size =</span> <span class="cn" style="color: #8f5902;">NA</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-83">  <span class="fu" style="color: #4758AB;">geom_curve</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">xend =</span> <span class="fl" style="color: #AD0000;">34.7</span>, <span class="at" style="color: #657422;">yend =</span> <span class="fl" style="color: #AD0000;">19.5</span>, <span class="at" style="color: #657422;">x =</span> <span class="fl" style="color: #AD0000;">35.7</span>, <span class="at" style="color: #657422;">y =</span> <span class="dv" style="color: #AD0000;">18</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-84">  <span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb1-85">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">data =</span> temp_long, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> temperature, <span class="at" style="color: #657422;">y =</span> location, <span class="at" style="color: #657422;">fill =</span> temperature), <span class="at" style="color: #657422;">shape =</span> <span class="dv" style="color: #AD0000;">21</span>, <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"black"</span>, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">6</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-86">  <span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb1-87">  <span class="fu" style="color: #4758AB;">scale_x_continuous</span>(<span class="at" style="color: #657422;">breaks =</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="dv" style="color: #AD0000;">30</span>, <span class="dv" style="color: #AD0000;">40</span>, <span class="at" style="color: #657422;">by =</span> <span class="fl" style="color: #AD0000;">2.5</span>),<span class="at" style="color: #657422;">labels =</span> <span class="fu" style="color: #4758AB;">paste0</span>(<span class="fu" style="color: #4758AB;">seq</span>(<span class="dv" style="color: #AD0000;">30</span>, <span class="dv" style="color: #AD0000;">40</span>, <span class="at" style="color: #657422;">by =</span> <span class="fl" style="color: #AD0000;">2.5</span>),<span class="st" style="color: #20794D;">"C"</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-88">  <span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb1-89">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> title_string,</span>
<span id="cb1-90">       <span class="at" style="color: #657422;">subtitle =</span> subtitle_string,</span>
<span id="cb1-91">       <span class="at" style="color: #657422;">caption =</span> caption_string) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-92">  <span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb1-93">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">plot.title =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">family=</span>title_font,</span>
<span id="cb1-94">                                  <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">28</span>,</span>
<span id="cb1-95">                                  <span class="at" style="color: #657422;">face=</span><span class="st" style="color: #20794D;">"bold"</span>,</span>
<span id="cb1-96">                                  <span class="at" style="color: #657422;">color=</span><span class="st" style="color: #20794D;">"#222222"</span>),</span>
<span id="cb1-97">        <span class="at" style="color: #657422;">plot.subtitle =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">family=</span>font,</span>
<span id="cb1-98">                                     <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">18</span>,</span>
<span id="cb1-99">                                     <span class="at" style="color: #657422;">margin=</span>ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">margin</span>(<span class="dv" style="color: #AD0000;">9</span>,<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">9</span>,<span class="dv" style="color: #AD0000;">0</span>)),</span>
<span id="cb1-100">        <span class="at" style="color: #657422;">plot.caption =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">family =</span> font, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">14</span>,<span class="at" style="color: #657422;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span>),</span>
<span id="cb1-101">        <span class="at" style="color: #657422;">plot.title.position =</span> <span class="st" style="color: #20794D;">'plot'</span>,</span>
<span id="cb1-102">        <span class="at" style="color: #657422;">plot.caption.position =</span> <span class="st" style="color: #20794D;">'plot'</span>,</span>
<span id="cb1-103">        <span class="at" style="color: #657422;">axis.title =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb1-104">        <span class="at" style="color: #657422;">axis.text =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">family=</span>font,</span>
<span id="cb1-105">                                          <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">18</span>,</span>
<span id="cb1-106">                                          <span class="at" style="color: #657422;">color=</span><span class="st" style="color: #20794D;">"grey47"</span>),</span>
<span id="cb1-107">        <span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"none"</span>,</span>
<span id="cb1-108">        <span class="at" style="color: #657422;">title =</span> <span class="fu" style="color: #4758AB;">element_text</span>(),</span>
<span id="cb1-109">        <span class="at" style="color: #657422;">axis.line.x =</span> <span class="fu" style="color: #4758AB;">element_line</span>(<span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">0.7</span>, <span class="at" style="color: #657422;">linetype =</span> <span class="st" style="color: #20794D;">"solid"</span>),</span>
<span id="cb1-110">        <span class="at" style="color: #657422;">axis.ticks.y =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb1-111">        <span class="at" style="color: #657422;">axis.ticks.length.x =</span> <span class="fu" style="color: #4758AB;">unit</span>(<span class="dv" style="color: #AD0000;">7</span>, <span class="at" style="color: #657422;">units =</span> <span class="st" style="color: #20794D;">"points"</span> ),</span>
<span id="cb1-112">        <span class="at" style="color: #657422;">axis.text.x =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">margin=</span><span class="fu" style="color: #4758AB;">margin</span>(<span class="at" style="color: #657422;">t =</span> <span class="dv" style="color: #AD0000;">15</span>, <span class="at" style="color: #657422;">b =</span> <span class="dv" style="color: #AD0000;">10</span>)),</span>
<span id="cb1-113">        <span class="at" style="color: #657422;">panel.grid.minor =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb1-114">        <span class="at" style="color: #657422;">panel.grid.major.y =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_line</span>(<span class="at" style="color: #657422;">color=</span><span class="st" style="color: #20794D;">"#cbcbcb"</span>),</span>
<span id="cb1-115">        <span class="at" style="color: #657422;">panel.grid.major.x =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb1-116">        <span class="at" style="color: #657422;">panel.background =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb1-117">  )</span>
<span id="cb1-118"></span>
<span id="cb1-119">p</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://www.zakvarty.com/blog/2022-10-15-BBC-temperature-plot/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid" alt="My dumbbell plot showing stations with the largest gaps between previous and new records, ordered by the highest new temperature." width="960"></p>
</div>
</div>


</section>

 ]]></description>
  <category>data visualisation</category>
  <guid>https://www.zakvarty.com/blog/2022-10-15-BBC-temperature-plot/index.html</guid>
  <pubDate>Fri, 14 Oct 2022 23:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2022-10-15-BBC-temperature-plot/zdv-temperature-records.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Tidy Tuesday: Ravelry Yarn</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2022-10-11-ravelry-tidy-tuesday/index.html</link>
  <description><![CDATA[ 



<p>For my first Tidy Tuesday I kept things simple with a stacked bar chart.</p>
<p>I have made several plots using <code>{ggplot2}</code> before, but this was my first attempt at making one aesthetically pleasing (forgive the pun).</p>
<p>When making this plot I learned about using custom font, colours, annotations and arrows from a lot of <a href="https://twitter.com/nrennie" title="Nicola Rennie - Twitter">@nrennie</a>’s past examples.</p>
<p>Code and figure down below ↓</p>
<div class="cell" data-fig.dpi="100">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Load Packages ----</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(tidyr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">library</span>(forcats)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;">library</span>(showtext)</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;"># Load Fonts ----</span></span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;">font_add_google</span>(<span class="at" style="color: #657422;">name =</span> <span class="st" style="color: #20794D;">"Indie Flower"</span>, <span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">"indie-flower"</span>)</span>
<span id="cb1-10"><span class="fu" style="color: #4758AB;">font_add_google</span>(<span class="at" style="color: #657422;">name =</span> <span class="st" style="color: #20794D;">"Permanent Marker"</span>, <span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">"marker"</span>)</span>
<span id="cb1-11"><span class="fu" style="color: #4758AB;">showtext_auto</span>()</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;"># Load Data ----</span></span>
<span id="cb1-14">url <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"https://github.com/rfordatascience/tidytuesday/raw/master/data/2022/2022-10-11/yarn.csv"</span></span>
<span id="cb1-15">yarn <span class="ot" style="color: #003B4F;">&lt;-</span> readr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">read_csv</span>(<span class="at" style="color: #657422;">file =</span> url)</span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;"># Data Handling ----</span></span>
<span id="cb1-18"></span>
<span id="cb1-19">other_weight_names <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb1-20">  <span class="st" style="color: #20794D;">"Thread"</span>,</span>
<span id="cb1-21">  <span class="st" style="color: #20794D;">"Cobweb"</span>,</span>
<span id="cb1-22">  <span class="st" style="color: #20794D;">"Jumbo"</span>,</span>
<span id="cb1-23">  <span class="st" style="color: #20794D;">"DK / Sport"</span>,</span>
<span id="cb1-24">  <span class="st" style="color: #20794D;">"Aran / Worsted"</span>,</span>
<span id="cb1-25">  <span class="st" style="color: #20794D;">"No weight specified"</span>)</span>
<span id="cb1-26"></span>
<span id="cb1-27">yarn_data <span class="ot" style="color: #003B4F;">&lt;-</span> yarn <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-28">  <span class="fu" style="color: #4758AB;">select</span>(yarn_weight_name) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-29">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">yarn_weight_name =</span> <span class="fu" style="color: #4758AB;">as.character</span>(yarn_weight_name)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-30">  <span class="fu" style="color: #4758AB;">mutate_at</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"yarn_weight_name"</span>), <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">replace_na</span>(.,<span class="st" style="color: #20794D;">"Missing"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-31">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">name =</span> <span class="fu" style="color: #4758AB;">fct_collapse</span>(yarn_weight_name, <span class="at" style="color: #657422;">Other =</span> other_weight_names)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-32">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">name =</span> <span class="fu" style="color: #4758AB;">fct_collapse</span>(name, <span class="st" style="color: #20794D;">"Double Knit"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"DK"</span>))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-33">  <span class="fu" style="color: #4758AB;">group_by</span>(name) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-34">  <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">value =</span> <span class="fu" style="color: #4758AB;">n</span>())</span>
<span id="cb1-35"></span>
<span id="cb1-36"><span class="co" style="color: #5E5E5E;"># Helper data frames for adding arrows to plot</span></span>
<span id="cb1-37">arrow_df_1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">x1 =</span> <span class="dv" style="color: #AD0000;">27000</span>, <span class="at" style="color: #657422;">x2 =</span> <span class="dv" style="color: #AD0000;">27000</span>, <span class="at" style="color: #657422;">y1 =</span> <span class="fl" style="color: #AD0000;">7.5</span>, <span class="at" style="color: #657422;">y2 =</span> <span class="fl" style="color: #AD0000;">10.4</span>)</span>
<span id="cb1-38">arrow_df_2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">x1 =</span> <span class="dv" style="color: #AD0000;">27000</span>, <span class="at" style="color: #657422;">x2 =</span> <span class="dv" style="color: #AD0000;">19000</span>, <span class="at" style="color: #657422;">y1 =</span> <span class="fl" style="color: #AD0000;">7.5</span>, <span class="at" style="color: #657422;">y2 =</span> <span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb1-39"></span>
<span id="cb1-40"><span class="co" style="color: #5E5E5E;"># Making Plot ----</span></span>
<span id="cb1-41"></span>
<span id="cb1-42">bar_colour <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"#483248"</span></span>
<span id="cb1-43">bg_colour <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"#FEFBEA"</span></span>
<span id="cb1-44">title_font <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"marker"</span></span>
<span id="cb1-45">main_font <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"indie-flower"</span></span>
<span id="cb1-46"></span>
<span id="cb1-47">yarn_plot <span class="ot" style="color: #003B4F;">&lt;-</span> yarn_data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-48">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">reorder</span>(name, value), <span class="at" style="color: #657422;">x =</span> value)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-49">  <span class="fu" style="color: #4758AB;">geom_bar</span>(<span class="at" style="color: #657422;">stat =</span> <span class="st" style="color: #20794D;">"identity"</span>, <span class="at" style="color: #657422;">fill =</span> bar_colour) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-50">  <span class="fu" style="color: #4758AB;">theme_void</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-51">  <span class="fu" style="color: #4758AB;">ggtitle</span>(<span class="st" style="color: #20794D;">" </span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;"> Yarn weights on Ravelry, ordered by frequency"</span>,<span class="at" style="color: #657422;">subtitle =</span> <span class="st" style="color: #20794D;">" "</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-52">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">axis.title =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb1-53">        <span class="at" style="color: #657422;">axis.text =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb1-54">        <span class="at" style="color: #657422;">axis.ticks =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb1-55">        <span class="at" style="color: #657422;">text =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">family =</span> main_font),</span>
<span id="cb1-56">        <span class="at" style="color: #657422;">plot.background =</span> <span class="fu" style="color: #4758AB;">element_rect</span>(<span class="at" style="color: #657422;">fill =</span> bg_colour, <span class="at" style="color: #657422;">colour =</span> bg_colour),</span>
<span id="cb1-57">        <span class="at" style="color: #657422;">panel.background =</span> <span class="fu" style="color: #4758AB;">element_rect</span>(<span class="at" style="color: #657422;">fill =</span> bg_colour, <span class="at" style="color: #657422;">colour =</span> bg_colour),</span>
<span id="cb1-58">        <span class="at" style="color: #657422;">plot.title =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">family =</span> title_font, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">22</span>, <span class="at" style="color: #657422;">hjust =</span> <span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb1-59">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-60">  <span class="fu" style="color: #4758AB;">lims</span>(<span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">28000</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-61">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> name, <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">200</span>),</span>
<span id="cb1-62">            <span class="at" style="color: #657422;">color =</span> bg_colour,</span>
<span id="cb1-63">            <span class="at" style="color: #657422;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb1-64">            <span class="at" style="color: #657422;">family =</span> main_font,</span>
<span id="cb1-65">            <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-66">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> value),</span>
<span id="cb1-67">            <span class="at" style="color: #657422;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb1-68">            <span class="at" style="color: #657422;">nudge_x =</span> <span class="dv" style="color: #AD0000;">200</span>,</span>
<span id="cb1-69">            <span class="at" style="color: #657422;">color =</span> bar_colour,</span>
<span id="cb1-70">            <span class="at" style="color: #657422;">family =</span> main_font,</span>
<span id="cb1-71">            <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">6</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-72">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"The most popular yarn weights </span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">  are 'Fingering' and 'Double Knit'"</span>,</span>
<span id="cb1-73">                <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">20000</span>,</span>
<span id="cb1-74">                <span class="at" style="color: #657422;">y =</span> <span class="fl" style="color: #AD0000;">6.7</span>),</span>
<span id="cb1-75">            <span class="at" style="color: #657422;">family =</span> main_font,</span>
<span id="cb1-76">            <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">7</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-77">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"There were more missing yarn weights </span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;"> than in all remaining categories combined"</span>,</span>
<span id="cb1-78">                <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">18000</span>,</span>
<span id="cb1-79">                <span class="at" style="color: #657422;">y =</span> <span class="fl" style="color: #AD0000;">1.6</span>),</span>
<span id="cb1-80">            <span class="at" style="color: #657422;">family =</span> main_font,</span>
<span id="cb1-81">            <span class="at" style="color: #657422;">size  =</span> <span class="dv" style="color: #AD0000;">7</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-82">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"}"</span>),</span>
<span id="cb1-83">            <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">7000</span>,</span>
<span id="cb1-84">            <span class="at" style="color: #657422;">y =</span> <span class="fl" style="color: #AD0000;">1.5</span>,</span>
<span id="cb1-85">            <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">19</span>,</span>
<span id="cb1-86">            <span class="at" style="color: #657422;">family =</span> main_font) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-87">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Tidy Tuesday 11 Oct 2022 | Data: Ravelry |  @zakvarty"</span>),</span>
<span id="cb1-88">            <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">29000</span>,</span>
<span id="cb1-89">            <span class="at" style="color: #657422;">y =</span> <span class="fl" style="color: #AD0000;">4.5</span>,</span>
<span id="cb1-90">            <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">5</span>,</span>
<span id="cb1-91">            <span class="at" style="color: #657422;">family =</span> main_font,</span>
<span id="cb1-92">            <span class="at" style="color: #657422;">angle =</span> <span class="dv" style="color: #AD0000;">270</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-93">  <span class="fu" style="color: #4758AB;">geom_curve</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> x1, <span class="at" style="color: #657422;">y =</span> y1, <span class="at" style="color: #657422;">xend =</span> x2, <span class="at" style="color: #657422;">yend =</span> y2),</span>
<span id="cb1-94">             <span class="at" style="color: #657422;">data =</span> arrow_df_1,</span>
<span id="cb1-95">             <span class="at" style="color: #657422;">arrow =</span> <span class="fu" style="color: #4758AB;">arrow</span>(<span class="at" style="color: #657422;">length =</span> <span class="fu" style="color: #4758AB;">unit</span>(<span class="fl" style="color: #AD0000;">0.03</span>, <span class="st" style="color: #20794D;">"npc"</span>))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-96">  <span class="fu" style="color: #4758AB;">geom_curve</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> x1, <span class="at" style="color: #657422;">y =</span> y1, <span class="at" style="color: #657422;">xend =</span> x2, <span class="at" style="color: #657422;">yend =</span> y2),</span>
<span id="cb1-97">             <span class="at" style="color: #657422;">data =</span> arrow_df_2,</span>
<span id="cb1-98">             <span class="at" style="color: #657422;">arrow =</span> <span class="fu" style="color: #4758AB;">arrow</span>(<span class="at" style="color: #657422;">length =</span> <span class="fu" style="color: #4758AB;">unit</span>(<span class="fl" style="color: #AD0000;">0.03</span>, <span class="st" style="color: #20794D;">"npc"</span>)))</span>
<span id="cb1-99"></span>
<span id="cb1-100">yarn_plot</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://www.zakvarty.com/blog/2022-10-11-ravelry-tidy-tuesday/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid" alt="Stacked bar chart of yarn weights on Ravelry. Bars are descending order by their frequency, with yarn-type labels written within the bars and count values to the right of the bars. Annotations indicate that the most popular yarn weights are 'Fingering' and 'Double Knit', and that there were more missing yarn weights than in all remaining categories combined." width="768"></p>
</div>
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Exported as 8x8 inch pdf and 800x700 png</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;"># (next time start by setting canvas size!)</span></span></code></pre></div>
</details>
</div>



 ]]></description>
  <category>data visualisation</category>
  <category>tidy tuesday</category>
  <guid>https://www.zakvarty.com/blog/2022-10-11-ravelry-tidy-tuesday/index.html</guid>
  <pubDate>Tue, 11 Oct 2022 23:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2022-10-11-ravelry-tidy-tuesday/2022-10-11-tidy-tuesday-ravelry.png" medium="image" type="image/png" height="126" width="144"/>
</item>
<item>
  <title>Recommended Statistics Books</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2022-10-10-statistics-books/index.html</link>
  <description><![CDATA[ 



<section id="statistics-and-statistical-inference-books" class="level2">
<h2 class="anchored" data-anchor-id="statistics-and-statistical-inference-books">Statistics and Statistical Inference Books</h2>
<div class="medium_right">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2022-10-10-statistics-books/blackwells-maths-section.jpg" alt="Photograph of the mathematics section of Blackwell's book shop in Oxford."></p>
</div>
<p>While teaching a course on supervised learning last year, several students asked about what books I would recommended on statistical inference and modelling.</p>
<p>For context, the students on this course are all highly numerate and studying at the postgraduate level. What makes this request challenging is the broad range of student backgrounds, some students had a maths degree but the majority are trained and work as engineers, physicists or computer scientists.</p>
<p>This variety in backgrounds and exposure to undergraduate level statistics made recommending a single book difficult. Instead, I compiled a list of books that I have enjoyed or found useful. For each book I tried to give some guidance on whether it might match with their current statistical knowledge and what they are trying to achieve. I gave a brief description of the level and target audience of each text, which I reproduce below.</p>
<p>When evaluating whether these resources might suit your current needs, I find it helpful to skim through a section on a topic that you already know (such as linear regression). This is usually the fastest and most reliable way to assess if the book is going to be a good fit for you.</p>
<p>This list is by no means exhaustive. If you know of any gems that I have not included in this list, please do let me know!</p>
<section id="mathematical-statistics-and-data-analysis---john-a.-rice" class="level3">
<h3 class="anchored" data-anchor-id="mathematical-statistics-and-data-analysis---john-a.-rice">Mathematical Statistics and Data Analysis - John A. Rice</h3>
<p><br></p>
<div class="small_left">
<p><img style="border-radius: 2%;" src="https://www.zakvarty.com/blog/2022-10-10-statistics-books/rice.jpg" alt="Cover of Mathematical Statistics and Data Analysis by John A. Rice."></p>
</div>
<p><span class="citation" data-cites="rice2007mathematical">Rice (2007)</span> covers the basics of probability and statistics usually contained in the first couple of undergraduate statistics courses. Generally the first university courses are a bit dry, building up the required knowledge to do interesting things. This book is slightly better than the average treatment in terms of readability and is fairly comprehensive, making it well suited as a reference text. This is a book full of all the stuff you might once have known but have now forgotten, or never studied before.</p>
<p><br></p>
</section>
<section id="essential-medical-statistics---betty-kirkwood-and-jonathan-sterne" class="level3">
<h3 class="anchored" data-anchor-id="essential-medical-statistics---betty-kirkwood-and-jonathan-sterne">Essential Medical Statistics - Betty Kirkwood and Jonathan Sterne</h3>
<div class="small_left">
<p><img style="border-radius: 2%;" src="https://www.zakvarty.com/blog/2022-10-10-statistics-books/kirkwood.jpg" alt="Cover of Essential Medical Statistics by Betty Kirkwood and Jonathan Sterne."></p>
</div>
<p><br></p>
<p><span class="citation" data-cites="kirkwood2010essential">Kirkwood and Sterne (2010)</span> focuses on more advanced topics in statistics, such as inference, hypothesis testing and modelling. However, it approaches these from an applications perspective. While all of the applications it uses are from medical statistics, the authors give sufficient context that you do not need to be familiar with this area before reading. This is a very readable book, with a moderate amount of mathematical detail. I find myself revisiting it quite often.</p>
<p><br></p>
</section>
<section id="core-statistics---simon-wood" class="level3">
<h3 class="anchored" data-anchor-id="core-statistics---simon-wood">Core Statistics - Simon Wood</h3>
<div class="small_left">
<p><img style="border-radius: 2%;" src="https://www.zakvarty.com/blog/2022-10-10-statistics-books/wood.jpg" alt="Cover of Core Statistics by Simon Wood."></p>
</div>
<p><span class="citation" data-cites="wood2015core">Wood (2015)</span> gives an introduction to the core topics in statistics aimed at new graduate-level students. It is mathematically dense but written in an approachable manner and (unsurprisingly) covers all the core ideas of statistics. This means that is often a good source to get an overview of a topic and to cover the key points in that area quickly. It is probably wise to supplement this with a more applied text to see worked examples and to a more detailed text for topics that you need to explore in greater detail.</p>
<p><br></p>
</section>
<section id="in-all-likelihood---yudi-pawitan" class="level3">
<h3 class="anchored" data-anchor-id="in-all-likelihood---yudi-pawitan">In All Likelihood - Yudi Pawitan</h3>
<div class="small_left">
<p><img style="border-radius: 2%;" src="https://www.zakvarty.com/blog/2022-10-10-statistics-books/pawitan.jpg" alt="Cover of In All Likelihood by Yudi Pawitan."></p>
</div>
<p><br></p>
<p><span class="citation" data-cites="pawitan2001all">Pawitan (2001)</span> focuses entirely on likelihood inference and covers both theory and applications in a great deal of detail. I highly recommend this to supplement frequentist topics covered in core statistics and the elements of statistical learning. It builds up from very little assumed knowledge but also goes on to cover some very advanced topics in later chapters.</p>
<p><br> <br></p>
</section>
<section id="kendalls-advanced-theory-of-statistics---alan-stuart-et-al." class="level3">
<h3 class="anchored" data-anchor-id="kendalls-advanced-theory-of-statistics---alan-stuart-et-al.">Kendall’s Advanced Theory of Statistics - Alan Stuart et al.</h3>
<div class="small_left">
<p><img style="border-radius: 2%;" src="https://www.zakvarty.com/blog/2022-10-10-statistics-books/kendall-1.webp" alt="Cover of Kendall's Advanced Theory of Statistics."></p>
</div>
<p><br></p>
<p><span class="citation" data-cites="kendall1987kendall">Kendall, Stuart, and Ord (1987)</span> is an alternative to In All Likelihood, aimed at a similar audience and level. Split over several volumes this is good to do a deep-dive into a particular topic but probably not one to try and read cover to cover!</p>
<p><br> <br> <br> <br></p>
</section>
</section>
<section id="bayesian-statistics" class="level2">
<h2 class="anchored" data-anchor-id="bayesian-statistics">Bayesian Statistics</h2>
<p>We only consider frequentist approaches to inference in this course. However, I would be remiss to not include some Bayesian texts and leave you with the impression that classical or frequentist approaches to statistics are the only option.</p>
<p>Many of the topics we cover in supervised learning can be considered from a Bayesian perspective. A Bayesian statistician does not treat our model parameters as fixed but unknown quantities, instead they consider the parameters as random variables and use probability distributions to describe their (or our) beliefs about the parameter values.</p>
<p>You might find the following books useful, either during or after the Bayesian inference course. The former is more theoretical, while the latter has a more applied focus.</p>
<p><em>Kendall’s advanced theory of statistics. Vol. 2B, Bayesian inference.</em> <span class="citation" data-cites="ohagan2004kendall">(O’Hagan and Forster 2004)</span></p>
<p><em>Bayesian Data Analysis - Gelman et al.</em> <span class="citation" data-cites="gelman2013bayesian">(Gelman et al. 2013)</span></p>



</section>

<div id="quarto-appendix"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-gelman2013bayesian" class="csl-entry">
Gelman, Andrew, John B Carlin, Hal S. Stern, David B Dunson, Aki Vehtari, and Donald B Rubin. 2013. <em>Bayesian Data Analysis</em>. 3rd ed. <span>Chapman and Hall</span>.
</div>
<div id="ref-kendall1987kendall" class="csl-entry">
Kendall, Maurice George, Alan Stuart, and J Keith Ord. 1987. <em>Kendall’s Advanced Theory of Statistics</em>. Oxford University Press.
</div>
<div id="ref-kirkwood2010essential" class="csl-entry">
Kirkwood, Betty R, and Jonathan AC Sterne. 2010. <em>Essential Medical Statistics</em>. John Wiley &amp; Sons.
</div>
<div id="ref-ohagan2004kendall" class="csl-entry">
O’Hagan, Anthony, and Jonathan J Forster. 2004. <em>Kendall’s Advanced Theory of Statistics, Volume 2b: Bayesian Inference</em>. Vol. 2b. Arnold.
</div>
<div id="ref-pawitan2001all" class="csl-entry">
Pawitan, Yudi. 2001. <em>In All Likelihood: Statistical Modelling and Inference Using Likelihood</em>. Oxford University Press.
</div>
<div id="ref-rice2007mathematical" class="csl-entry">
Rice, John A. 2007. <em>Mathematical Statistics and Data Analysis</em>. Thomson.
</div>
<div id="ref-wood2015core" class="csl-entry">
Wood, Simon N. 2015. <em>Core Statistics</em>. Cambridge University Press.
</div>
</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{varty2022,
  author = {Zak Varty},
  title = {Recommended {Statistics} {Books}},
  date = {2022-10-10},
  url = {https://www.zakvarty.com/blog/2022-10-10-statistics-books},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-varty2022" class="csl-entry quarto-appendix-citeas">
Zak Varty. 2022. <span>“Recommended Statistics Books.”</span> October
10, 2022. <a href="https://www.zakvarty.com/blog/2022-10-10-statistics-books">https://www.zakvarty.com/blog/2022-10-10-statistics-books</a>.
</div></div></section></div> ]]></description>
  <category>academic skills</category>
  <category>reading</category>
  <guid>https://www.zakvarty.com/blog/2022-10-10-statistics-books/index.html</guid>
  <pubDate>Sun, 09 Oct 2022 23:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2022-10-10-statistics-books/blackwells-maths-section.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Writing a rhetorical précis</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2022-10-07-rhetorical-precis/index.html</link>
  <description><![CDATA[ 



<p>Photo by <a href="https://unsplash.com/@qwitka?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Maksym Kaharlytskyi</a> on <a href="https://unsplash.com/s/photos/filing-cabinet?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a></p>
<section id="what-is-a-rhetorical-precis" class="level2">
<h2 class="anchored" data-anchor-id="what-is-a-rhetorical-precis">What is a rhetorical precis?</h2>
<div class="medium_right">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2022-10-07-rhetorical-precis/maksym-kaharlytskyi-Q9y3LRuuxmg-unsplash.jpg" alt="Photograph of a filing cabinet filled with library index cards."></p>
</div>
<p>A rhetorical precis is a short summary and analysis of a piece of writing, which considers both the content and the delivery of the piece.</p>
<p>A rhetorical precis serves to summarise and analyse the text through:</p>
<ul>
<li>an accurate bibliographic reference to the text,</li>
<li>a list of keywords relating to the text,</li>
<li>a highly structured four-sentence paragraph providing a summary and analysis of the text.</li>
</ul>
</section>
<section id="why-write-one" class="level2">
<h2 class="anchored" data-anchor-id="why-write-one">Why write one?</h2>
<p>Keeping a rhetorical precis for each text that you read is a fantasitc way to build the skills of active reading and succinct writing. A rhetorical precis is more informative than a bib entry and more easily reviewed <em>(read: waded through)</em> than a stack of annotated papers.</p>
<p>Taken collectively, a set of rhetorical precis summaries provide a reading record that can be a tremendously useful when trying to recall the contents of a paper or book long after you originally read it.</p>
</section>
<section id="how-to-store-them" class="level2">
<h2 class="anchored" data-anchor-id="how-to-store-them">How to store them?</h2>
<p>Writing and storing these reading summaries electronically can make them even more useful. This allows you to search for topics, target audiences or keywords.</p>
<p>For this reason it can be helpful to keep them all together in one word document or plain text file. Alternatively, having a single folder with each summary as a plain text or markdown file works well if you are comfortable with searching at the command line. The same can be achieved by writing these summaries within a reference manager, if that is something you are invested in already.</p>
</section>
<section id="definition" class="level2">
<h2 class="anchored" data-anchor-id="definition">Definition</h2>
<p>Just to prove that I’m not making all this up:</p>
<blockquote class="blockquote">
<p>A rhetorical precis analyzes both the content (the what) and the delivery (the how) of a unit of spoken or written discourse. It is a highly structured four-sentence paragraph blending summary and analysis. Each of the four sentences requires specific information; students are expected to use brief quotations (to convey a sense of the author’s style and tone) and to include a terminal bibliographic reference. Practicing this sort of writing fosters precision in both reading and writing, forcing a writer to employ a variety of sentence structures and to develop a discerning eye for connotative shades of meaning. <br> <strong>Attribution:</strong> <a href="https://courses.lumenlearning.com/englishcomp2kscopex92x2/chapter/rhetorical-precis/">lumenlearning.com</a></p>
</blockquote>
</section>
<section id="format" class="level2">
<h2 class="anchored" data-anchor-id="format">Format</h2>
<p>Four sentences summarising the aim of the work, how this is addressed, why it is important and a description of the target audience.</p>
<ol type="1">
<li>Name of author, [optional phrase describing author], genre and title of work, date in parentheses (additional publishing information in parentheses); a rhetorically accurate verb (such as “asserts,” “argues,” suggests,” “implies,” claims,” etc.); a THAT clause containing the major assertion or thesis statement of the work.</li>
<li>An explanation of <em>how</em> the author develops and/or supports the thesis, usually in chronological order.</li>
<li>A statement of the author’s purpose followed by an “in order to” phrase.</li>
<li>A description of the intended audience and/or the essay’s tone</li>
</ol>
</section>
<section id="a-self-indulgent-example" class="level2">
<h2 class="anchored" data-anchor-id="a-self-indulgent-example">A (self-indulgent) example</h2>
<p>Here is a rather self-indulgent example of a rhetorical precis.</p>
<hr>
<p><code>varty2021inference</code></p>
<p><strong>Title:</strong> <em>Inference for extreme earthquake magnitudes accounting for a time-varying measurement process. {ArXiV preprint, 2021} (20 pages).</em></p>
<p><strong>Authors:</strong> <em>Zak Varty, Jonathan Tawn, Peter Atkinson and Stijn Bierman.</em></p>
<p><strong>Key words:</strong> <em>extreme value</em>, <em>earthquake</em>, <em>threshold selection</em>, <em>magnitude of completion</em>, <em>seismology</em>, <em>bootstrap.</em></p>
<p>In this paper, Varty et al (2021) propose a new threshold selection method for modelling earthquake catalogues, where the magnitude distribution is stationary but detection of small events improves over time. The paper generalises the Gutenberg-Richter law to the GPD and uses metrics based on PP and QQ plots to balance between bias and variance when selecting a time-varying threshold. This procedure more than doubles the usable catalogue size for Groningen earthquakes and gives the first emprircal evidence that the magnitude distribution in this region has a finite upper end point. The paper is targeted at applied and research statisticians with an interest in EVT but would also be accessible to a statistically-minded seismologist.</p>
<hr>
</section>
<section id="a-template-for-new-entries" class="level2">
<h2 class="anchored" data-anchor-id="a-template-for-new-entries">A template for new entries</h2>
<hr>
<p><code>firstauthorYYYYkeyword</code></p>
<p><strong>Title:</strong> <em>Title goes here. {Journal, YYYY} (NN pages).</em></p>
<p><strong>Authors:</strong> <em>Author One, Author Two and Author Three. (optional affiliations)</em></p>
<p><strong>Key words:</strong> <em>key word 1</em>, <em>key word 2</em>, <em>key work 3</em>.</p>
<ol type="1">
<li><em>What</em> is the document and <em>what</em> does it say?</li>
<li><em>How</em> do they do / show this?</li>
<li><em>Why</em> are they bothering to do this in the first place?</li>
<li><em>Who</em> is the intended audience for this work?</li>
</ol>
<p>In this DOC_TYPE, AUTHOUR VERB that THESIS_STATEMENT. They DO/SHOW this by ACTIONS. This is important to PEOPLE because REASONS. This work would be useful when PEOPLE are doing ACTIVITY.</p>
<hr>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb1-1"><span class="in" style="color: #5E5E5E;">`firstauthorYYYYkeyword`</span></span>
<span id="cb1-2"></span>
<span id="cb1-3">**Title:** _Title goes here. {Journal, YYYY} (NN pages)._</span>
<span id="cb1-4"></span>
<span id="cb1-5">**Authors:** _Author One, Author Two and Author Three. (optional affiliations)_</span>
<span id="cb1-6"></span>
<span id="cb1-7">**Key words:** _key word 1_, _key word 2_, _key work 3_. </span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="ss" style="color: #20794D;">1. </span>_What_ is the document and _what_ does it say? </span>
<span id="cb1-10"><span class="ss" style="color: #20794D;">2. </span>_How_ do they do / show this?</span>
<span id="cb1-11"><span class="ss" style="color: #20794D;">3. </span>_Why_ are they bothering to do this in the first place?</span>
<span id="cb1-12"><span class="ss" style="color: #20794D;">4. </span>_Who_ is the intended audience for this work?</span>
<span id="cb1-13"></span>
<span id="cb1-14">In this DOC_TYPE, AUTHOUR VERB that THESIS<span class="sc" style="color: #5E5E5E;">\_</span>STATEMENT.</span>
<span id="cb1-15">They DO/SHOW this by ACTIONS. </span>
<span id="cb1-16">This is important to PEOPLE because REASONS. </span>
<span id="cb1-17">This work would be useful when PEOPLE are doing ACTIVITY.</span></code></pre></div>
<hr>


</section>

<div id="quarto-appendix"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{varty2022,
  author = {Zak Varty},
  title = {Writing a Rhetorical Précis},
  date = {2022-10-07},
  url = {https://www.zakvarty.com/blog/2022-10-07-rhetorical-precis},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-varty2022" class="csl-entry quarto-appendix-citeas">
Zak Varty. 2022. <span>“Writing a Rhetorical Précis.”</span> October 7,
2022. <a href="https://www.zakvarty.com/blog/2022-10-07-rhetorical-precis">https://www.zakvarty.com/blog/2022-10-07-rhetorical-precis</a>.
</div></div></section></div> ]]></description>
  <category>academic skills</category>
  <category>writing</category>
  <category>reading</category>
  <guid>https://www.zakvarty.com/blog/2022-10-07-rhetorical-precis/index.html</guid>
  <pubDate>Thu, 06 Oct 2022 23:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2022-10-07-rhetorical-precis/maksym-kaharlytskyi-Q9y3LRuuxmg-unsplash.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Setting up a quarto blog</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2022-09-26-adding-a-quarto-blog/index.html</link>
  <description><![CDATA[ 



<section id="what-am-i-trying-to-do" class="level1">
<h1>What am I trying to do?</h1>
<div class="medium_right">
<p><img style="border-radius: 10%;" src="https://www.zakvarty.com/blog/2022-09-26-adding-a-quarto-blog/florian-klauer-mk7D-4UCfmg-unsplash.jpg" alt="Mechanical typewriter on white background"></p>
</div>
<p>My aim here is to set up a blog within an existing quarto website. I want the blog to be a sub-domain of the main site (<code>zakvarty.com/blog</code>) and for it to inherit the styling of that site.</p>
<p>It probably would have been easier to make the blog a sub domain (<code>blog.zakvarty.com</code>) and use two separate but matching style files to make those sites look coherent. However, I wanted to make the most of the built in search features on quarto websites and am a glutton for punishment.</p>
<p>Credit to <a href="https://ddimmery.com/">Drew Dimmery</a>, whose website I used alongside the <a href="https://quarto.org/docs/guide/">quarto docs</a> to work out how to get all these pieces working together.</p>
</section>
<section id="steps" class="level1">
<h1>Steps</h1>
<ol type="1">
<li>Create a subdirectory of the website called <code>blog/</code>. This has sub-folders for each blog post and will contain the files of metadata that are common to all blog posts (e.g.&nbsp;default settings for YAML headers information and a bibliography file). <!-- --></li>
<li>Create a <a href="https://quarto.org/docs/websites/website-listings.html">listing page</a> called <code>blog.qmd</code> in the root directory. This will become the blog “landing page” and what we will point to from the website header. <!-- --></li>
<li>Add a “Blog” header item to the <code>_quarto.yml</code> file for the website and set the <code>link:</code> for this to be <code>blog.qmd</code> <!-- --></li>
<li>Added a simple example post to the <code>blog/</code> directory. See for example my <a href="https://www.github.com/zakvarty/quarto-website/blog/hello-world/">hello-world</a> post. <!-- --></li>
<li>Adjust the default YAML parameters for the blog posts by making the file <code>blog/_metadata.yml</code>. These default values can be overwritten by specifying them again in the YAML header at the top of any individual post. For examples of what you might want to include see <a href="https://www.github.com/zakvarty/quarto-website/blog/_metadata.yml">my file</a> or the <a href="https://quarto.org/docs/projects/quarto-projects.html">projects section</a> of the quarto docs. <!-- --></li>
<li>Add a simple bibliography file, called <code>library.bib</code> or similar to the <code>blog/</code> directory. Set this as the default bibliography file for each blog post by adding <code>bibliography: ../library.bib</code> to <code>blog/_metadata.yml</code>. <!-- --></li>
<li>(optional) Create a post template so that you don’t have to memorise header fields. <!-- --></li>
<li>Set your “Hello, World!” and template posts to have <code>draft: true</code> in their headers. This will prevent them from showing up on your website. <!-- --></li>
<li>Set your “Hello, World!” and template posts to have <code>freeze: true</code> in their headers. This will prevent any code in them from re-running each time the website is rendered.</li>
</ol>
<p>Freezing the code within posts will improve the build speed, as well as make the website more stable and portable. See the quarto docs on <a href="https://quarto.org/docs/websites/website-blog.html#freezing-posts">freezing posts</a> for more details. My current plan is to have this as <code>false</code> by default and change to <code>true</code> on publication of each post.</p>
</section>
<section id="checking-that-references-work" class="level1">
<h1>Checking that references work</h1>
<p>I have set up a single bibtex file in which to store references for all posts. This lives in the <code>blog/</code> directory and is set as the default <code>bibliography</code> parameter for each post in the file <code>blog/_metadata.yml</code>.</p>
<p>This is an in-line reference to <span class="citation" data-cites="wan2020network">Wan et al. (2020)</span> written as <code>@citationkey</code>. Parenthetical references, such as <span class="citation" data-cites="wan2020network">(Wan et al. 2020)</span>, are written using <code>[@citationkey]</code>. These can be strung together by separating each citation key with a semicolon, for example <span class="citation" data-cites="wan2020network wan2020network">(Wan et al. 2020, 2020)</span>.</p>
<p>To let people know the license your work is under and how they should cite your blog posts you can use the <code>appendix-style</code> argument. This can be added to the YAML header of individual blog posts or you can specify a default value in <code>blog/_metadata.yml</code>. There are three options for this parameter:</p>
<ul>
<li><code>default</code> does some nice formatting and makes the text a bit smaller than the rest of the article;</li>
<li><code>plain</code> matches the style of the rest of your post;</li>
<li><code>none</code> does not add any citation details to the end of your post.</li>
</ul>
<p>I’m currently using some pretty hacky CSS to style this website so am limited to the latter two options for now. In the process of writing this article I stumbled across some neat SCSS that I hope will fix this issue that I have made for myself! [Update: I changed to SCSS and this is now fixed!]</p>
<p><em>Note: When adding references to your posts, make sure that the <code>site-URL</code> field in your website’s <code>quarto.yml</code> does not have a trailing slash - this will be copied into the reference and break the links.</em></p>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-wan2020network" class="csl-entry">
Wan, Phyllis, Tiandong Wang, Richard A Davis, and Sidney I Resnick. 2020. <span>“Are Extreme Value Estimation Methods Useful for Network Data?”</span> <em>Extremes</em> 23 (1): 171–95.
</div>
</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{varty2022,
  author = {Zak Varty},
  title = {Setting up a Quarto Blog},
  date = {2022-09-26},
  url = {https://www.zakvarty.com/blog/2022-09-26-adding-a-quarto-blog},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-varty2022" class="csl-entry quarto-appendix-citeas">
Zak Varty. 2022. <span>“Setting up a Quarto Blog.”</span> September 26,
2022. <a href="https://www.zakvarty.com/blog/2022-09-26-adding-a-quarto-blog">https://www.zakvarty.com/blog/2022-09-26-adding-a-quarto-blog</a>.
</div></div></section></div> ]]></description>
  <category>quarto</category>
  <category>tutorial</category>
  <guid>https://www.zakvarty.com/blog/2022-09-26-adding-a-quarto-blog/index.html</guid>
  <pubDate>Sun, 25 Sep 2022 23:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2022-09-26-adding-a-quarto-blog/florian-klauer-mk7D-4UCfmg-unsplash.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Hello, World!</title>
  <dc:creator>Zak Varty</dc:creator>
  <link>https://www.zakvarty.com/blog/2022-09-26-hello-world/index.html</link>
  <description><![CDATA[ 



<section id="some-text" class="level1">
<h1>Some Text</h1>
<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry’s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>
</section>
<section id="some-code" class="level1">
<h1>Some Code</h1>
<div class="cell" data-layout-align="center">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">par</span>(<span class="at" style="color: #657422;">bg =</span> <span class="cn" style="color: #8f5902;">NA</span>)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">plot</span>(</span>
<span id="cb1-3">    <span class="at" style="color: #657422;">x =</span> mtcars<span class="sc" style="color: #5E5E5E;">$</span>mpg,</span>
<span id="cb1-4">    <span class="at" style="color: #657422;">y =</span> mtcars<span class="sc" style="color: #5E5E5E;">$</span>cyl,</span>
<span id="cb1-5">    <span class="at" style="color: #657422;">xlab =</span> <span class="st" style="color: #20794D;">"miles per gallon"</span>,</span>
<span id="cb1-6">    <span class="at" style="color: #657422;">ylab =</span> <span class="st" style="color: #20794D;">"cyclider count"</span>,</span>
<span id="cb1-7">    <span class="at" style="color: #657422;">pch =</span> <span class="dv" style="color: #AD0000;">16</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.zakvarty.com/blog/2022-09-26-hello-world/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>Quarto</category>
  <category>Templates</category>
  <guid>https://www.zakvarty.com/blog/2022-09-26-hello-world/index.html</guid>
  <pubDate>Sun, 25 Sep 2022 23:00:00 GMT</pubDate>
  <media:content url="https://www.zakvarty.com/blog/2022-09-26-hello-world/hello-world-image.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
